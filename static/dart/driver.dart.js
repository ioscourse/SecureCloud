// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $ = Isolate.$isolateProperties;
var $$ = {};

// Classes
$$.FileManager_addFile_anon = {
  "": function FileManager_addFile_anon(fileContents_0) {
    this.fileContents_0 = fileContents_0;
  },
  "super": "Closure",
  call$1: function(fileEntry) {
    $.createWriter$0$x(fileEntry).then$1(new $.FileManager_addFile__anon(this.fileContents_0));
  }
};

$$.FileManager_addFile__anon = {
  "": function FileManager_addFile__anon(fileContents_1) {
    this.fileContents_1 = fileContents_1;
  },
  "super": "Closure",
  call$1: function(writer) {
    var blob, t1, t2, subscr;
    blob = $.Blob_Blob([this.fileContents_1], "text/plain", null);
    t1 = $.getInterceptor$x(writer);
    t2 = t1.get$onWriteEnd(writer);
    subscr = $._EventStreamSubscription$(t2._target, t2._eventType, null, t2._useCapture);
    if (subscr.get$_canceled())
      $.throwExpression($.StateError$("Subscription has been canceled."));
    t2 = subscr._onData;
    if (t2 != null)
      $.$$dom_removeEventListener$3$x(subscr._target, subscr._eventType, t2, subscr._useCapture);
    subscr._onData = new $.FileManager_addFile___anon(writer, blob, subscr);
    t2 = subscr._onData;
    if (t2 != null && !subscr.get$_paused())
      $.$$dom_addEventListener$3$x(subscr._target, subscr._eventType, t2, subscr._useCapture);
    t1.truncate$1(writer, 0);
  }
};

$$.FileManager_addFile___anon = {
  "": function FileManager_addFile___anon(writer_2, blob_3, subscr_4) {
    this.writer_2 = writer_2;
    this.blob_3 = blob_3;
    this.subscr_4 = subscr_4;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, t2, t3;
    this.subscr_4.cancel$0();
    $.Primitives_printString("written");
    t1 = this.writer_2;
    t2 = $.getInterceptor$x(t1);
    t3 = t2.get$onWriteEnd(t1);
    $._EventStreamSubscription$(t3._target, t3._eventType, new $.FileManager_addFile____anon(), t3._useCapture);
    t2.write$1(t1, this.blob_3);
  }
};

$$.FileManager_addFile____anon = {
  "": function FileManager_addFile____anon() {
  },
  "super": "Closure",
  call$1: function($event) {
    $.FileManager_updateFileList();
    $.FileManager_sendToCloud();
  }
};

$$.FileManager_removeFileByName_anon = {
  "": function FileManager_removeFileByName_anon() {
  },
  "super": "Closure",
  call$1: function(entry) {
    $.remove$0$ax(entry).then$1(new $.FileManager_removeFileByName__anon());
  }
};

$$.FileManager_removeFileByName__anon = {
  "": function FileManager_removeFileByName__anon() {
  },
  "super": "Closure",
  call$1: function($event) {
    $.FileManager_updateFileList();
    $.FileManager_sendToCloud();
  }
};

$$.FileManager_updateFileList_anon = {
  "": function FileManager_updateFileList_anon(ul_0) {
    this.ul_0 = ul_0;
  },
  "super": "Closure",
  call$1: function(entries) {
    $.forEach$1$ax(entries, new $.FileManager_updateFileList__anon(this.ul_0));
  }
};

$$.FileManager_updateFileList__anon = {
  "": function FileManager_updateFileList__anon(ul_1) {
    this.ul_1 = ul_1;
  },
  "super": "Closure",
  call$1: function(entry) {
    var li, str, t1;
    li = document.createElement("li");
    str = document.createElement("strong");
    t1 = $.getInterceptor$x(entry);
    $.set$text$x(str, t1.get$name(entry));
    $.append$1$x(li, str);
    t1.file$0(entry).then$1(new $.FileManager_updateFileList___anon(this.ul_1, li));
  }
};

$$.FileManager_updateFileList___anon = {
  "": function FileManager_updateFileList___anon(ul_2, li_3) {
    this.ul_2 = ul_2;
    this.li_3 = li_3;
  },
  "super": "Closure",
  call$1: function(file) {
    var reader, t1;
    reader = new FileReader();
    t1 = $.FileReader_methods.get$onLoadEnd(reader);
    $._EventStreamSubscription$(t1._target, t1._eventType, new $.FileManager_updateFileList____anon(this.ul_2, this.li_3, file), t1._useCapture);
    reader.readAsText(file);
  }
};

$$.FileManager_updateFileList____anon = {
  "": function FileManager_updateFileList____anon(ul_4, li_5, file_6) {
    this.ul_4 = ul_4;
    this.li_5 = li_5;
    this.file_6 = file_6;
  },
  "super": "Closure",
  call$1: function($event) {
    var fileContents, t1, t2;
    fileContents = $.get$result$x($.get$target$x($event));
    t1 = this.li_5;
    t2 = $.get$onClick$x(t1);
    $._EventStreamSubscription$(t2._target, t2._eventType, new $.FileManager_updateFileList_____anon(this.file_6, fileContents), t2._useCapture);
    this.ul_4.appendChild(t1);
  }
};

$$.FileManager_updateFileList_____anon = {
  "": function FileManager_updateFileList_____anon(file_7, fileContents_8) {
    this.file_7 = file_7;
    this.fileContents_8 = fileContents_8;
  },
  "super": "Closure",
  call$1: function($event) {
    $.TextFileEditorBox_show($.get$name$x(this.file_7), this.fileContents_8);
  }
};

$$.FileManager_sendToCloud_anon = {
  "": function FileManager_sendToCloud_anon() {
  },
  "super": "Closure",
  call$1: function(entries) {
    var t1, output, t2, output0;
    t1 = {};
    output = $.HashMap$(null, null);
    output.$indexSet(output, "action", "distributeStructure");
    output.$indexSet(output, "structure", $.HashMap$(null, null));
    $.$indexSet$ax(output.$index(output, "structure"), "rootDir", $.List_List($, null));
    t2 = $.getInterceptor$asx(entries);
    if ($.$gt$n(t2.get$length(entries), 0)) {
      t1.index_0 = 0;
      t2.forEach$1(entries, new $.FileManager_sendToCloud__anon(t1, entries, output));
    } else {
      t1 = $.CloudSocket_ws;
      output0 = $.StringBuffer$("");
      $._JsonStringifier$(output0).stringifyValue$1(output);
      t1.send(output0._contents);
    }
  }
};

$$.FileManager_sendToCloud__anon = {
  "": function FileManager_sendToCloud__anon(box_0, entries_1, output_2) {
    this.box_0 = box_0;
    this.entries_1 = entries_1;
    this.output_2 = output_2;
  },
  "super": "Closure",
  call$1: function(entry) {
    $.file$0$x(entry).then$1(new $.FileManager_sendToCloud___anon(this.box_0, this.entries_1, this.output_2));
  }
};

$$.FileManager_sendToCloud___anon = {
  "": function FileManager_sendToCloud___anon(box_0, entries_3, output_4) {
    this.box_0 = box_0;
    this.entries_3 = entries_3;
    this.output_4 = output_4;
  },
  "super": "Closure",
  call$1: function(file) {
    var fileData, t1, t2, output;
    fileData = $.HashMap$(null, null);
    fileData.$indexSet(fileData, "name", $.get$name$x(file));
    t1 = this.output_4;
    $.add$1$ax($.$index$asx(t1.$index(t1, "structure"), "rootDir"), fileData);
    t2 = this.box_0;
    t2.index_0 = $.$add$ns(t2.index_0, 1);
    if ($.$eq(t2.index_0, $.get$length$asx(this.entries_3))) {
      t2 = $.CloudSocket_ws;
      output = $.StringBuffer$("");
      $._JsonStringifier$(output).stringifyValue$1(t1);
      t2.send(output._contents);
    }
  }
};

$$.FileManager_updateStructure_anon = {
  "": function FileManager_updateStructure_anon(filenames_2) {
    this.filenames_2 = filenames_2;
  },
  "super": "Closure",
  call$1: function(entries) {
    var t1, t2, t3, t4;
    t1 = {};
    t2 = $.getInterceptor$asx(entries);
    t3 = $.$gt$n(t2.get$length(entries), 0);
    t4 = this.filenames_2;
    if (t3) {
      t1.index_1 = 0;
      t2.forEach$1(entries, new $.FileManager_updateStructure__anon(t1, t4, entries));
    } else {
      t1.filenamesIndex_2 = 0;
      $.forEach$1$ax(t4, new $.FileManager_updateStructure__anon0(t1, t4));
    }
  }
};

$$.FileManager_updateStructure__anon = {
  "": function FileManager_updateStructure__anon(box_1, filenames_3, entries_4) {
    this.box_1 = box_1;
    this.filenames_3 = filenames_3;
    this.entries_4 = entries_4;
  },
  "super": "Closure",
  call$1: function(entry) {
    $.Primitives_printString(">>> looping read entries");
    $.remove$0$ax(entry).then$1(new $.FileManager_updateStructure___anon0(this.box_1, this.filenames_3, this.entries_4));
  }
};

$$.FileManager_updateStructure___anon0 = {
  "": function FileManager_updateStructure___anon(box_1, filenames_5, entries_6) {
    this.box_1 = box_1;
    this.filenames_5 = filenames_5;
    this.entries_6 = entries_6;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, t2;
    t1 = {};
    $.Primitives_printString(">>> entry removed");
    t2 = this.box_1;
    t2.index_1 = $.$add$ns(t2.index_1, 1);
    if ($.$eq(t2.index_1, $.get$length$asx(this.entries_6))) {
      t2 = this.filenames_5;
      if ($.$gt$n($.get$length$asx(t2), 0)) {
        t1.filenamesIndex_0 = 0;
        $.forEach$1$ax(t2, new $.FileManager_updateStructure____anon(t1, t2));
      } else
        $.FileManager_updateFileList();
    }
  }
};

$$.FileManager_updateStructure____anon = {
  "": function FileManager_updateStructure____anon(box_0, filenames_7) {
    this.box_0 = box_0;
    this.filenames_7 = filenames_7;
  },
  "super": "Closure",
  call$1: function(filename) {
    $._getFile$2$options$x($.get$root$x($.FileManager__filesystem), $.$index$asx(filename, "name"), $.makeLiteralMap(["create", true, "exclusive", false])).then$1(new $.FileManager_updateStructure_____anon(this.box_0, this.filenames_7, filename));
  }
};

$$.FileManager_updateStructure_____anon = {
  "": function FileManager_updateStructure_____anon(box_0, filenames_8, filename_9) {
    this.box_0 = box_0;
    this.filenames_8 = filenames_8;
    this.filename_9 = filename_9;
  },
  "super": "Closure",
  call$1: function(entry) {
    var t1;
    $.Primitives_printString(">>>>> created: " + $.S($.$index$asx(this.filename_9, "name")));
    t1 = this.box_0;
    t1.filenamesIndex_0 = $.$add$ns(t1.filenamesIndex_0, 1);
    if ($.$eq(t1.filenamesIndex_0, $.get$length$asx(this.filenames_8)))
      $.FileManager_updateFileList();
  }
};

$$.FileManager_updateStructure__anon0 = {
  "": function FileManager_updateStructure__anon(box_1, filenames_10) {
    this.box_1 = box_1;
    this.filenames_10 = filenames_10;
  },
  "super": "Closure",
  call$1: function(filename) {
    $._getFile$2$options$x($.get$root$x($.FileManager__filesystem), $.$index$asx(filename, "name"), $.makeLiteralMap(["create", true, "exclusive", false])).then$1(new $.FileManager_updateStructure___anon(this.box_1, this.filenames_10, filename));
  }
};

$$.FileManager_updateStructure___anon = {
  "": function FileManager_updateStructure___anon(box_1, filenames_11, filename_12) {
    this.box_1 = box_1;
    this.filenames_11 = filenames_11;
    this.filename_12 = filename_12;
  },
  "super": "Closure",
  call$1: function(entry) {
    var t1;
    $.Primitives_printString(">>>>> created: " + $.S($.$index$asx(this.filename_12, "name")));
    t1 = this.box_1;
    t1.filenamesIndex_2 = $.$add$ns(t1.filenamesIndex_2, 1);
    if ($.$eq(t1.filenamesIndex_2, $.get$length$asx(this.filenames_11)))
      $.FileManager_updateFileList();
  }
};

$$.CloudSocket_init_anon = {
  "": function CloudSocket_init_anon() {
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, output, t2, output0;
    t1 = $.getInterceptor$x($event);
    t1.preventDefault$0($event);
    output = $.HashMap$(null, null);
    output.$indexSet(output, "action", "setAsBaseCloud");
    t2 = $.CloudSocket_ws;
    output0 = $.StringBuffer$("");
    $._JsonStringifier$(output0).stringifyValue$1(output);
    t2.send(output0._contents);
    t1 = $.get$classes$x(t1.get$target($event));
    t1.add$1(t1, "selected");
  }
};

$$.CloudSocket_init_anon0 = {
  "": function CloudSocket_init_anon() {
  },
  "super": "Closure",
  call$1: function($event) {
    var output, t1, output0;
    $.preventDefault$0$x($event);
    output = $.HashMap$(null, null);
    output.$indexSet(output, "action", "getCloudStructure");
    t1 = $.CloudSocket_ws;
    output0 = $.StringBuffer$("");
    $._JsonStringifier$(output0).stringifyValue$1(output);
    t1.send(output0._contents);
  }
};

$$.MainNav_init_anon = {
  "": function MainNav_init_anon() {
  },
  "super": "Closure",
  call$1: function($event) {
    $.FileManager_sendToCloud();
  }
};

$$.MainSection_init_anon = {
  "": function MainSection_init_anon() {
  },
  "super": "Closure",
  call$1: function($event) {
    return $.TextFileEditorBox_show(null, null);
  }
};

$$.TextFileEditorBox_show_anon = {
  "": function TextFileEditorBox_show_anon(filenameInput_0, textarea_1) {
    this.filenameInput_0 = filenameInput_0;
    this.textarea_1 = textarea_1;
  },
  "super": "Closure",
  call$1: function($event) {
    var filename, fileContents, t1, t2;
    $.Primitives_printString(">>> saving file");
    filename = $.get$value$x(this.filenameInput_0);
    fileContents = $.get$value$x(this.textarea_1);
    if (!$.$eq(filename, ""))
      $.FileManager_addFile(filename, fileContents);
    t1 = document.querySelector(".textFileEditorBox");
    t2 = t1.parentNode;
    if (t2 != null)
      t2.removeChild(t1);
  }
};

$$.TextFileEditorBox_show_anon0 = {
  "": function TextFileEditorBox_show_anon(filename_2) {
    this.filename_2 = filename_2;
  },
  "super": "Closure",
  call$1: function($event) {
    var t1, t2;
    $.FileManager_removeFileByName(this.filename_2);
    t1 = document.querySelector(".textFileEditorBox");
    t2 = t1.parentNode;
    if (t2 != null)
      t2.removeChild(t1);
  }
};

$$.ListIterable = {
  "": function ListIterable() {
  },
  "super": "IterableBase",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout1(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.elementAt$1(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout1: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.elementAt$1(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListIterable, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListIterable, 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.elementAt$1(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SubListIterable = {
  "": function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  },
  "super": "ListIterable",
  get$_endIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._endOrLength;
    if (t1 == null || $.JSNull_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$_startIndex: function() {
    var $length, t1;
    $length = $.get$length$asx(this._iterable);
    t1 = this._start;
    if ($.JSNumber_methods.$gt(t1, $length))
      return $length;
    return t1;
  },
  get$length: function(_) {
    var $length, t1, t2;
    $length = $.get$length$asx(this._iterable);
    if (typeof $length !== "number")
      return this.get$length$bailout2(1, $length);
    t1 = this._start;
    if (t1 >= $length)
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.JSNull_methods.$ge(t2, $length))
      return $length - t1;
    return $.JSNull_methods.$sub(t2, t1);
  },
  get$length$bailout2: function(state0, $length) {
    var t1, t2;
    t1 = this._start;
    if ($.JSNumber_methods.$ge(t1, $length))
      return 0;
    t2 = this._endOrLength;
    if (t2 == null || $.JSNull_methods.$ge(t2, $length))
      return $.$sub$n($length, t1);
    return $.JSNull_methods.$sub(t2, t1);
  },
  elementAt$1: function(_, index) {
    var t1, realIndex;
    if (typeof index !== "number")
      return this.elementAt$1$bailout2(1, index);
    t1 = this.get$_startIndex();
    if (typeof t1 !== "number")
      return this.elementAt$1$bailout2(2, index, t1);
    realIndex = t1 + index;
    if (!(index < 0)) {
      t1 = this.get$_endIndex();
      if (typeof t1 !== "number")
        return this.elementAt$1$bailout2(3, index, t1, realIndex);
      t1 = realIndex >= t1;
    } else
      t1 = true;
    if (t1)
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    return $.elementAt$1$ax(this._iterable, realIndex);
  },
  elementAt$1$bailout2: function(state0, index, t1, realIndex) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = this.get$_startIndex();
      case 2:
        state0 = 0;
        realIndex = $.$add$ns(t1, index);
      case 3:
        if (state0 === 3 || state0 === 0 && !$.$lt$n(index, 0))
          switch (state0) {
            case 0:
              t1 = this.get$_endIndex();
            case 3:
              state0 = 0;
              t1 = $.$ge$n(realIndex, t1);
          }
        else
          t1 = true;
        if (t1)
          throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
        return $.elementAt$1$ax(this._iterable, realIndex);
    }
  },
  skip$1: function(_, count) {
    if (count < 0)
      throw $.wrapException($.ArgumentError$(count));
    return $.SubListIterable$(this._iterable, this._start + count, this._endOrLength, null);
  },
  $asListIterable: null,
  $asIterable: null
};

$$.ListIterator = {
  "": function ListIterator(_iterable, _liblib$_length, _index, _liblib$_current) {
    this._iterable = _iterable;
    this._liblib$_length = _liblib$_length;
    this._index = _index;
    this._liblib$_current = _liblib$_current;
  },
  "super": "Object",
  get$current: function() {
    return this._liblib$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._liblib$_length;
    t2 = this._iterable;
    if ($.$eq(t1, $.get$length$asx(t2)) !== true)
      throw $.wrapException($.ConcurrentModificationError$(t2));
    t3 = this._index;
    if (t3 === t1) {
      this._liblib$_current = null;
      return false;
    }
    this._liblib$_current = $.elementAt$1$ax(t2, t3);
    this._index = this._index + 1;
    return true;
  }
};

$$.MappedIterable = {
  "": function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  },
  "super": "IterableBase",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.MappedIterator$(t1.get$iterator(t1), this._f);
  },
  get$length: function(_) {
    var t1 = this._iterable;
    return t1.get$length(t1);
  },
  get$isEmpty: function(_) {
    var t1 = this._iterable;
    return t1.get$isEmpty(t1);
  },
  elementAt$1: function(_, index) {
    var t1 = this._iterable;
    return this._f$1(t1.elementAt$1(t1, index));
  },
  $asIterableBase: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.MappedIterator = {
  "": function MappedIterator(_liblib$_current, _iterator, _f) {
    this._liblib$_current = _liblib$_current;
    this._iterator = _iterator;
    this._f = _f;
  },
  "super": "Iterator",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    var t1 = this._iterator;
    if (t1.moveNext$0() === true) {
      this._liblib$_current = this._f$1(t1.get$current());
      return true;
    }
    this._liblib$_current = null;
    return false;
  },
  get$current: function() {
    return this._liblib$_current;
  }
};

$$.MappedListIterable = {
  "": function MappedListIterable(_liblib$_source, _f) {
    this._liblib$_source = _liblib$_source;
    this._f = _f;
  },
  "super": "ListIterable",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  get$length: function(_) {
    return $.get$length$asx(this._liblib$_source);
  },
  elementAt$1: function(_, index) {
    return this._f$1($.elementAt$1$ax(this._liblib$_source, index));
  },
  $asListIterable: function (S, T) { return [T]; },
  $asIterable: function (S, T) { return [T]; }
};

$$.WhereIterable = {
  "": function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  },
  "super": "IterableBase",
  get$iterator: function(_) {
    var t1 = this._iterable;
    return $.WhereIterator$(t1.get$iterator(t1), this._f);
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.WhereIterator = {
  "": function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  },
  "super": "Iterator",
  _f$1: function(arg0) {
    return this._f.call$1(arg0);
  },
  moveNext$0: function() {
    for (var t1 = this._iterator; t1.moveNext$0() === true;)
      if (this._f$1(t1.get$current()) === true)
        return true;
    return false;
  },
  get$current: function() {
    return this._iterator.get$current();
  }
};

$$.SkipIterable = {
  "": function SkipIterable(_iterable, _skipCount) {
    this._iterable = _iterable;
    this._skipCount = _skipCount;
  },
  "super": "IterableBase",
  skip$1: function(_, n) {
    if (typeof n !== "number" || Math.floor(n) !== n || n < 0)
      throw $.wrapException($.ArgumentError$(n));
    return $.SkipIterable$(this._iterable, $.$add$ns(this._skipCount, n), $.getRuntimeTypeArgument(this, this.$asSkipIterable, 0));
  },
  get$iterator: function(_) {
    return $.SkipIterator$($.get$iterator$ax(this._iterable), this._skipCount);
  },
  SkipIterable$2: function(_iterable, _skipCount, E) {
    var t1 = this._skipCount;
    if (typeof t1 !== "number" || Math.floor(t1) !== t1 || $.$lt$n(t1, 0))
      throw $.wrapException($.ArgumentError$(t1));
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.SkipIterator = {
  "": function SkipIterator(_iterator, _skipCount) {
    this._iterator = _iterator;
    this._skipCount = _skipCount;
  },
  "super": "Iterator",
  moveNext$0: function() {
    var t1, i, t2;
    t1 = this._iterator;
    i = 0;
    while (true) {
      t2 = this._skipCount;
      if (typeof t2 !== "number")
        throw $.iae(t2);
      if (!(i < t2))
        break;
      t1.moveNext$0();
      ++i;
    }
    this._skipCount = 0;
    return t1.moveNext$0();
  },
  get$current: function() {
    return this._iterator.get$current();
  },
  SkipIterator$2: function(_iterator, _skipCount) {
  }
};

$$.ToString__emitPair_anon = {
  "": function ToString__emitPair_anon(box_0, result_1, visiting_2) {
    this.box_0 = box_0;
    this.result_1 = result_1;
    this.visiting_2 = visiting_2;
  },
  "super": "Closure",
  call$2: function(k, v) {
    var t1, t2;
    t1 = this.box_0;
    if (!t1.first_0)
      $.write$1$x(this.result_1, ", ");
    t1.first_0 = false;
    t1 = this.result_1;
    t2 = this.visiting_2;
    $.ToString__emitObject(k, t1, t2);
    $.write$1$x(t1, ": ");
    $.ToString__emitObject(v, t1, t2);
  }
};

$$.HashMap_values_anon = {
  "": function HashMap_values_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
};

$$.HashMapKeyIterable = {
  "": function HashMapKeyIterable(_map) {
    this._map = _map;
  },
  "super": "IterableBase",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.HashMapKeyIterator$(t1, t1._computeKeys$0());
  },
  forEach$1: function(_, f) {
    var t1, keys, $length, i;
    t1 = this._map;
    keys = t1._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      f.call$1(keys[i]);
      if (keys !== t1._keys)
        throw $.wrapException($.ConcurrentModificationError$(t1));
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.HashMapKeyIterator = {
  "": function HashMapKeyIterator(_map, _keys, _offset, _liblib0$_current) {
    this._map = _map;
    this._keys = _keys;
    this._offset = _offset;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var keys, offset, t1;
    keys = this._keys;
    offset = this._offset;
    t1 = this._map;
    if (keys !== t1._keys)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else if (offset >= keys.length) {
      this._liblib0$_current = null;
      return false;
    } else {
      this._liblib0$_current = keys[offset];
      this._offset = offset + 1;
      return true;
    }
  }
};

$$.LinkedHashMap_values_anon = {
  "": function LinkedHashMap_values_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(each) {
    return $.$index$asx(this.this_0, each);
  }
};

$$.LinkedHashMapCell = {
  "": function LinkedHashMapCell(_key, _value, _next, _previous) {
    this._key = _key;
    this._value = _value;
    this._next = _next;
    this._previous = _previous;
  },
  "super": "Object",
  get$_key: function() {
    return this._key;
  },
  get$_value: function() {
    return this._value;
  },
  set$_value: function(v) {
    this._value = v;
  },
  get$_next: function() {
    return this._next;
  },
  set$_next: function(v) {
    this._next = v;
  },
  get$_previous: function() {
    return this._previous;
  },
  set$_previous: function(v) {
    this._previous = v;
  }
};

$$.LinkedHashMapKeyIterable = {
  "": function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  },
  "super": "IterableBase",
  get$length: function(_) {
    return this._map._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._map._liblib0$_length === 0;
  },
  get$iterator: function(_) {
    var t1 = this._map;
    return $.LinkedHashMapKeyIterator$(t1, t1._modifications);
  },
  forEach$1: function(_, f) {
    var t1, cell, modifications;
    t1 = this._map;
    cell = t1._first;
    modifications = t1._modifications;
    for (; cell != null;) {
      f.call$1(cell.get$_key());
      if (modifications !== t1._modifications)
        throw $.wrapException($.ConcurrentModificationError$(t1));
      cell = cell.get$_next();
    }
  },
  $asIterableBase: null,
  $asIterable: null
};

$$.LinkedHashMapKeyIterator = {
  "": function LinkedHashMapKeyIterator(_map, _modifications, _cell, _liblib0$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._map;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_key();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashMapKeyIterator$2: function(_map, _modifications) {
    this._cell = this._map._first;
  }
};

$$.LinkedHashSetCell = {
  "": function LinkedHashSetCell(_element, _next, _previous) {
    this._element = _element;
    this._next = _next;
    this._previous = _previous;
  },
  "super": "Object",
  get$_element: function() {
    return this._element;
  },
  get$_next: function() {
    return this._next;
  },
  set$_next: function(v) {
    this._next = v;
  },
  get$_previous: function() {
    return this._previous;
  },
  set$_previous: function(v) {
    this._previous = v;
  }
};

$$.LinkedHashSetIterator = {
  "": function LinkedHashSetIterator(_set, _modifications, _cell, _liblib0$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1 = this._set;
    if (this._modifications !== t1._modifications)
      throw $.wrapException($.ConcurrentModificationError$(t1));
    else {
      t1 = this._cell;
      if (t1 == null) {
        this._liblib0$_current = null;
        return false;
      } else {
        this._liblib0$_current = t1.get$_element();
        this._cell = this._cell.get$_next();
        return true;
      }
    }
  },
  LinkedHashSetIterator$2: function(_set, _modifications) {
    this._cell = this._set._first;
  }
};

$$.NoSuchMethodError_toString_anon = {
  "": function NoSuchMethodError_toString_anon(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1, t2, str;
    t1 = this.box_0;
    if ($.$gt$n(t1.i_1, 0)) {
      t2 = t1.sb_0;
      t2._contents = t2._contents + ", ";
    }
    t2 = t1.sb_0;
    str = typeof key === "string" ? key : $.S(key);
    t2._contents = t2._contents + str;
    t2 = t1.sb_0;
    t2._contents = t2._contents + ": ";
    t2 = t1.sb_0;
    str = $.Error_safeToString(value);
    str = typeof str === "string" ? str : $.S(str);
    t2._contents = t2._contents + str;
    t1.i_1 = $.$add$ns(t1.i_1, 1);
  }
};

$$.Interceptor = {
  "": function Interceptor() {
  },
  "super": "Object",
  $eq: function(receiver, other) {
    return receiver === other;
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  toString$0: function(receiver) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(receiver)) + "'";
  }
};

$$.JSFunction = {
  "": function JSFunction() {
  },
  "super": "Interceptor",
  toString$0: function(receiver) {
    return "Closure";
  }
};

$$.JSBool = {
  "": function JSBool() {
  },
  "super": "Interceptor",
  $name: "bool",
  toString$0: function(receiver) {
    return String(receiver);
  },
  get$hashCode: function(receiver) {
    return receiver ? 519018 : 218159;
  },
  $isbool: true
};

$$.JSNull = {
  "": function JSNull() {
  },
  "super": "Interceptor",
  $eq: function(receiver, other) {
    return null == other;
  },
  toString$0: function(receiver) {
    return "null";
  },
  get$hashCode: function(receiver) {
    return 0;
  }
};

$$.CloseToken = {
  "": function CloseToken() {
  },
  "super": "Object",
  $isCloseToken: true
};

$$.JsIsolateSink = {
  "": function JsIsolateSink(_isClosed, _port) {
    this._isClosed = _isClosed;
    this._port = _port;
  },
  "super": "EventSink",
  get$_port: function() {
    return this._port;
  },
  add$1: function(_, message) {
    $.send$1$x(this._port, message);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$isIsolateSink && $.$eq(this._port, other.get$_port()) === true;
  },
  get$hashCode: function(_) {
    return $.$add$ns($.get$hashCode$(this._port), 499);
  },
  $isJsIsolateSink: true,
  $asIsolateSink: null,
  $isIsolateSink: true
};

$$._Manager = {
  "": function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
  },
  "super": "Object",
  get$useWorkers: function() {
    return this.supportsWorkers;
  },
  get$needSerialization: function() {
    return this.get$useWorkers();
  },
  _nativeDetectEnvironment$0: function() {
    var t1, t2;
    t1 = $.get$globalWindow() == null;
    t2 = $.get$globalWorker();
    this.isWorker = t1 && $.get$globalPostMessageDefined() === true;
    if (this.isWorker !== true)
      if (t2 != null) {
        $.get$IsolateNatives_thisScript();
        t2 = true;
      } else
        t2 = false;
    else
      t2 = true;
    this.supportsWorkers = t2;
    this.fromCommandLine = t1 && this.isWorker !== true;
  },
  _nativeInitWorkerMessageHandler$0: function() {
    var $function = function (e) { $.IsolateNatives__processWorkerMessage.call$2(this.mainManager, e); };
    $.get$globalThis().onmessage = $function;
    $.get$globalThis().dartPrint = function (object) {};
  },
  maybeCloseWorker$0: function() {
    if (this.isWorker === true) {
      var t1 = this.isolates;
      t1 = t1.get$isEmpty(t1) && this.topEventLoop.activeTimerCount === 0;
    } else
      t1 = false;
    if (t1) {
      t1 = $._serializeMessage($.makeLiteralMap(["command", "close"]));
      $.get$globalThis().postMessage(t1);
    }
  },
  _Manager$0: function() {
    this._nativeDetectEnvironment$0();
    this.topEventLoop = $._EventLoop$();
    this.isolates = $.Map_Map($.JSInt, $._IsolateContext);
    this.managers = $.Map_Map($.JSInt, $._ManagerStub);
    if (this.isWorker === true) {
      this.mainManager = $._MainManagerStub$();
      this._nativeInitWorkerMessageHandler$0();
    }
  }
};

$$._IsolateContext = {
  "": function _IsolateContext(id, ports, isolateStatics) {
    this.id = id;
    this.ports = ports;
    this.isolateStatics = isolateStatics;
  },
  "super": "Object",
  get$id: function(receiver) {
    return this.id;
  },
  eval$1: function(code) {
    var old, result;
    old = $globalState.currentContext;
    $globalState.currentContext = this;
    $ = this.isolateStatics;
    result = null;
    try {
      result = code.call$0();
    } finally {
      $globalState.currentContext = old;
      if (old != null)
        old._setGlobals$0();
    }
    return result;
  },
  _setGlobals$0: function() {
    $ = this.isolateStatics;
  },
  lookup$1: function(portId) {
    var t1 = this.ports;
    return t1.$index(t1, portId);
  },
  register$2: function(_, portId, port) {
    var t1;
    if (this.ports.containsKey$1(portId) === true)
      throw $.wrapException($._ExceptionImplementation$("Registry: ports must be registered only once."));
    t1 = this.ports;
    t1.$indexSet(t1, portId, port);
    t1 = $globalState.isolates;
    t1.$indexSet(t1, this.id, this);
  },
  unregister$1: function(portId) {
    var t1 = this.ports;
    t1.remove$1(t1, portId);
    t1 = this.ports;
    if (t1.get$isEmpty(t1)) {
      t1 = $globalState.isolates;
      t1.remove$1(t1, this.id);
    }
  },
  _IsolateContext$0: function() {
    var t1, t2;
    t1 = $._globalState();
    t2 = t1.nextIsolateId;
    t1.nextIsolateId = t2 + 1;
    this.id = t2;
    this.ports = $.Map_Map($.JSInt, $.ReceivePort);
    this.isolateStatics = new Isolate();
  }
};

$$._EventLoop = {
  "": function _EventLoop(events, activeTimerCount) {
    this.events = events;
    this.activeTimerCount = activeTimerCount;
  },
  "super": "Object",
  enqueue$3: function(isolate, fn, msg) {
    this.events._add$1($._IsolateEvent$(isolate, fn, msg));
  },
  dequeue$0: function() {
    var t1 = this.events;
    if (t1.get$isEmpty(t1))
      return;
    return t1.removeFirst$0();
  },
  checkOpenReceivePortsFromCommandLine$0: function() {
    if ($globalState.rootContext != null)
      if ($globalState.isolates.containsKey$1($globalState.rootContext.id) === true)
        if ($globalState.fromCommandLine === true) {
          var t1 = $globalState.rootContext.ports;
          t1 = t1.get$isEmpty(t1);
        } else
          t1 = false;
      else
        t1 = false;
    else
      t1 = false;
    if (t1)
      throw $.wrapException($._ExceptionImplementation$("Program exited with open ReceivePorts."));
  },
  runIteration$0: function() {
    var $event = this.dequeue$0();
    if ($event == null) {
      this.checkOpenReceivePortsFromCommandLine$0();
      $globalState.maybeCloseWorker$0();
      return false;
    }
    $event.process$0();
    return true;
  },
  _runHelper$0: function() {
    if ($.get$globalWindow() != null)
      new $._EventLoop__runHelper_next(this).call$0();
    else
      for (; this.runIteration$0();)
        ;
  },
  run$0: function() {
    var e, trace, exception, t1;
    if ($globalState.isWorker !== true)
      this._runHelper$0();
    else
      try {
        this._runHelper$0();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        trace = $.getTraceFromException(exception);
        $globalState;
        t1 = $._serializeMessage($.makeLiteralMap(["command", "error", "msg", $.S(e) + "\n" + $.S(trace)]));
        $.get$globalThis().postMessage(t1);
      }

  }
};

$$._EventLoop__runHelper_next = {
  "": function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    if (!this.this_0.runIteration$0())
      return;
    $.Timer_run(this);
  }
};

$$._IsolateEvent = {
  "": function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  },
  "super": "Object",
  process$0: function() {
    this.isolate.eval$1(this.fn);
  }
};

$$._ManagerStub = {
  "": function _ManagerStub() {
  },
  "super": "Object"
};

$$._MainManagerStub = {
  "": function _MainManagerStub() {
  },
  "super": "Object",
  get$id: function(_) {
    return 0;
  },
  postMessage$1: function(_, msg) {
    $.get$globalThis().postMessage(msg);
  },
  terminate$0: function(_) {
  }
};

$$.IsolateNatives__processWorkerMessage_anon = {
  "": function IsolateNatives__processWorkerMessage_anon(entryPoint_0, replyTo_1) {
    this.entryPoint_0 = entryPoint_0;
    this.replyTo_1 = replyTo_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = this.entryPoint_0;
    t2 = this.replyTo_1;
    $.lazyPort = $.ReceivePortImpl$();
    $.send$2$x(t2, "spawned", $._Isolate_port().toSendPort$0());
    t1.call$0();
  }
};

$$._BaseSendPort = {
  "": function _BaseSendPort(_isolateId) {
    this._isolateId = _isolateId;
  },
  "super": "Object",
  get$_isolateId: function() {
    return this._isolateId;
  },
  _checkReplyTo$1: function(replyTo) {
    if (replyTo != null && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_NativeJsSendPort) && (typeof replyTo !== "object" || replyTo === null || !$.getInterceptor(replyTo).$is_WorkerSendPort) && true)
      throw $.wrapException($._ExceptionImplementation$("SendPort.send: Illegal replyTo port type"));
  },
  call$1: function(message) {
    var completer, port;
    completer = $._CompleterImpl$();
    port = $.ReceivePortImpl$();
    this.send$2(this, message, $._NativeJsSendPort$(port, $.get$id$x($globalState.currentContext)));
    port._callback = new $._BaseSendPort_call_anon(completer, port);
    return completer.future;
  },
  $isSendPort: true
};

$$._BaseSendPort_call_anon = {
  "": function _BaseSendPort_call_anon(completer_0, port_1) {
    this.completer_0 = completer_0;
    this.port_1 = port_1;
  },
  "super": "Closure",
  call$2: function(value, ignoreReplyTo) {
    var t1 = this.port_1;
    t1._callback = null;
    $globalState.currentContext.unregister$1(t1._id);
    t1 = this.completer_0;
    if (typeof value === "object" && value !== null && !!$.getInterceptor(value).$isException)
      t1.completeError$1(value);
    else {
      if (t1._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t1._isComplete = true;
      t1.future._setValue$1(value);
    }
  }
};

$$._NativeJsSendPort = {
  "": function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  },
  "super": "_BaseSendPort",
  get$_receivePort: function() {
    return this._receivePort;
  },
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    return typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_NativeJsSendPort && $.$eq(this._receivePort, other._receivePort) === true;
  },
  get$hashCode: function(_) {
    return this._receivePort.get$_id();
  },
  $is_NativeJsSendPort: true,
  $isSendPort: true
};

$$._NativeJsSendPort_send_anon = {
  "": function _NativeJsSendPort_send_anon(this_1, message_2, replyTo_3) {
    this.this_1 = this_1;
    this.message_2 = message_2;
    this.replyTo_3 = replyTo_3;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, t3, t4, isolate, shouldSerialize, msg;
    t1 = {};
    t2 = this.this_1;
    t3 = this.replyTo_3;
    t2._checkReplyTo$1(t3);
    t4 = $globalState.isolates;
    isolate = t4.$index(t4, t2.get$_isolateId());
    if (isolate == null)
      return;
    if (t2.get$_receivePort().get$_callback() == null)
      return;
    shouldSerialize = $globalState.currentContext != null && $.$eq($.get$id$x($globalState.currentContext), t2.get$_isolateId()) !== true;
    msg = this.message_2;
    t1.msg_0 = msg;
    t1.reply_1 = t3;
    if (shouldSerialize) {
      t1.msg_0 = $._serializeMessage(t1.msg_0);
      t1.reply_1 = $._serializeMessage(t1.reply_1);
    }
    t3 = $globalState.topEventLoop;
    t4 = "receive " + $.S(msg);
    t3.events._add$1($._IsolateEvent$(isolate, new $._NativeJsSendPort_send__anon(t1, t2, shouldSerialize), t4));
  }
};

$$._NativeJsSendPort_send__anon = {
  "": function _NativeJsSendPort_send__anon(box_0, this_4, shouldSerialize_5) {
    this.box_0 = box_0;
    this.this_4 = this_4;
    this.shouldSerialize_5 = shouldSerialize_5;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2;
    t1 = this.this_4;
    if (t1.get$_receivePort().get$_callback() != null) {
      if (this.shouldSerialize_5) {
        t2 = this.box_0;
        t2.msg_0 = $._deserializeMessage(t2.msg_0);
        t2.reply_1 = $._deserializeMessage(t2.reply_1);
      }
      t1 = t1.get$_receivePort();
      t2 = this.box_0;
      t1._callback$2(t2.msg_0, t2.reply_1);
    }
  }
};

$$._WorkerSendPort = {
  "": function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  },
  "super": "_BaseSendPort",
  get$_workerId: function() {
    return this._workerId;
  },
  send$2: function(_, message, replyTo) {
    $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(this, message, replyTo));
  },
  send$1: function($receiver, message) {
    return this.send$2($receiver, message, null);
  },
  $eq: function(_, other) {
    var t1;
    if (other == null)
      return false;
    if (typeof other === "object" && other !== null && !!$.getInterceptor(other).$is_WorkerSendPort) {
      other;
      t1 = $.$eq(this._workerId, other._workerId) === true && $.$eq(this._isolateId, other._isolateId) === true && $.$eq(this._receivePortId, other._receivePortId) === true;
    } else
      t1 = false;
    return t1;
  },
  get$hashCode: function(_) {
    var t1, t2, t3;
    t1 = $.$shl$n(this._workerId, 16);
    t2 = $.$shl$n(this._isolateId, 8);
    t3 = this._receivePortId;
    if (typeof t3 !== "number")
      throw $.iae(t3);
    return (t1 ^ t2 ^ t3) >>> 0;
  },
  $is_WorkerSendPort: true,
  $isSendPort: true
};

$$._WorkerSendPort_send_anon = {
  "": function _WorkerSendPort_send_anon(this_0, message_1, replyTo_2) {
    this.this_0 = this_0;
    this.message_1 = message_1;
    this.replyTo_2 = replyTo_2;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, workerMessage, manager;
    t1 = this.this_0;
    t2 = this.replyTo_2;
    t1._checkReplyTo$1(t2);
    workerMessage = $._serializeMessage($.makeLiteralMap(["command", "message", "port", t1, "msg", this.message_1, "replyTo", t2]));
    if ($globalState.isWorker === true) {
      $globalState;
      $.get$globalThis().postMessage(workerMessage);
    } else {
      t2 = $globalState.managers;
      manager = t2.$index(t2, t1.get$_workerId());
      if (manager != null)
        $.postMessage$1$x(manager, workerMessage);
    }
  }
};

$$.ReceivePortImpl = {
  "": function ReceivePortImpl(_id, _callback) {
    this._id = _id;
    this._callback = _callback;
  },
  "super": "Object",
  get$_id: function() {
    return this._id;
  },
  get$_callback: function() {
    return this._callback;
  },
  _callback$2: function(arg0, arg1) {
    return this._callback.call$2(arg0, arg1);
  },
  toSendPort$0: function() {
    return $._NativeJsSendPort$(this, $.get$id$x($globalState.currentContext));
  },
  ReceivePortImpl$0: function() {
    $.register$2$x($._globalState().currentContext, this._id, this);
  }
};

$$._waitForPendingPorts_anon = {
  "": function _waitForPendingPorts_anon(callback_0) {
    this.callback_0 = callback_0;
  },
  "super": "Closure",
  call$1: function(_) {
    return this.callback_0.call$0();
  }
};

$$._PendingSendPortFinder = {
  "": function _PendingSendPortFinder(ports, _visited) {
    this.ports = ports;
    this._visited = _visited;
  },
  "super": "_MessageTraverser",
  visitPrimitive$1: function(x) {
  },
  visitList$1: function(list) {
    var t1 = this._visited;
    if (t1.$index(t1, list) != null)
      return;
    t1.$indexSet(t1, list, true);
    $.forEach$1$ax(list, new $._PendingSendPortFinder_visitList_anon(this));
  },
  visitMap$1: function(map) {
    var t1 = this._visited;
    if (t1.$index(t1, map) != null)
      return;
    t1.$indexSet(t1, map, true);
    $.forEach$1$ax(map.get$values(map), new $._PendingSendPortFinder_visitMap_anon(this));
  },
  visitSendPort$1: function(port) {
    if (false)
      this.ports.push(port.get$_futurePort());
  },
  visitIsolateSink$1: function(sink) {
    var t1 = sink._port;
    if (false)
      this.ports.push(t1.get$_futurePort());
  },
  visitCloseToken$1: function(token) {
  },
  _PendingSendPortFinder$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._PendingSendPortFinder_visitList_anon = {
  "": function _PendingSendPortFinder_visitList_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._PendingSendPortFinder_visitMap_anon = {
  "": function _PendingSendPortFinder_visitMap_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$1: function(e) {
    return this.this_0._dispatch$1(e);
  }
};

$$._JsSerializer = {
  "": function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  },
  "super": "_Serializer",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return ["sendport", $globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return ["sendport", x._workerId, x._isolateId, x._receivePortId];
    throw $.wrapException("Illegal underlying port " + $.S(x));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed = sink._isClosed;
    return ["isolateSink", this.visitSendPort$1(sink._port), isClosed];
  },
  visitCloseToken$1: function(token) {
    return ["closeToken"];
  },
  _JsSerializer$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsCopier = {
  "": function _JsCopier(_visited) {
    this._visited = _visited;
  },
  "super": "_Copier",
  visitSendPort$1: function(x) {
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_NativeJsSendPort)
      return $._NativeJsSendPort$(x._receivePort, x._isolateId);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$is_WorkerSendPort)
      return $._WorkerSendPort$(x._workerId, x._isolateId, x._receivePortId);
    throw $.wrapException("Illegal underlying port " + $.S(this.get$p()));
  },
  visitIsolateSink$1: function(sink) {
    var isClosed, result;
    isClosed = sink._isClosed;
    result = $.JsIsolateSink$fromPort(this.visitSendPort$1(sink._port));
    result._isClosed = isClosed;
    return result;
  },
  visitCloseToken$1: function(token) {
    return token;
  },
  _JsCopier$0: function() {
    this._visited = $._JsVisitedMap$();
  }
};

$$._JsDeserializer = {
  "": function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  },
  "super": "_Deserializer",
  deserializeSendPort$1: function(list) {
    var t1, managerId, isolateId, receivePortId, isolate, receivePort;
    t1 = $.getInterceptor$asx(list);
    managerId = t1.$index(list, 1);
    isolateId = t1.$index(list, 2);
    receivePortId = t1.$index(list, 3);
    if ($.$eq(managerId, $globalState.currentManagerId) === true) {
      t1 = $globalState.isolates;
      isolate = t1.$index(t1, isolateId);
      if (isolate == null)
        return;
      receivePort = isolate.lookup$1(receivePortId);
      if (receivePort == null)
        return;
      return $._NativeJsSendPort$(receivePort, isolateId);
    } else
      return $._WorkerSendPort$(managerId, isolateId, receivePortId);
  },
  deserializeIsolateSink$1: function(list) {
    var t1, port, isClosed, result;
    t1 = $.getInterceptor$asx(list);
    port = this.deserializeSendPort$1(t1.$index(list, 1));
    isClosed = t1.$index(list, 2);
    result = $.JsIsolateSink$fromPort(port);
    result._isClosed = isClosed;
    return result;
  },
  deserializeCloseToken$1: function(list) {
    return $.C_CloseToken;
  }
};

$$._JsVisitedMap = {
  "": function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  },
  "super": "Object",
  $index: function(_, object) {
    return object.__MessageTraverser__attached_info__;
  },
  $indexSet: function(_, object, info) {
    $.add$1$ax(this.tagged, object);
    object.__MessageTraverser__attached_info__ = info;
  },
  reset$0: function(_) {
    this.tagged = $.List_List($, null);
  },
  cleanup$0: function() {
    var $length, i, t1;
    for ($length = this.tagged.length, i = 0; i < $length; ++i) {
      t1 = this.tagged;
      if (i >= t1.length)
        throw $.ioore(i);
      t1[i].__MessageTraverser__attached_info__ = null;
    }
    this.tagged = null;
  }
};

$$._MessageTraverserVisitedMap = {
  "": function _MessageTraverserVisitedMap() {
  },
  "super": "Object",
  $index: function(_, object) {
    return;
  },
  $indexSet: function(_, object, info) {
  },
  reset$0: function(_) {
  },
  cleanup$0: function() {
  }
};

$$._MessageTraverser = {
  "": function _MessageTraverser(_visited) {
    this._visited = _visited;
  },
  "super": "Object",
  traverse$1: function(x) {
    var result, t1;
    t1 = x;
    if (t1 == null || typeof t1 === "string" || typeof t1 === "number" || typeof t1 === "boolean")
      return this.visitPrimitive$1(x);
    t1 = this._visited;
    t1.reset$0(t1);
    result = null;
    try {
      result = this._dispatch$1(x);
    } finally {
      this._visited.cleanup$0();
    }
    return result;
  },
  _dispatch$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return this.visitPrimitive$1(x);
    if (typeof x === "object" && x !== null && (x.constructor === Array || !!$.getInterceptor(x).$isList))
      return this.visitList$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isMap)
      return this.visitMap$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isSendPort)
      return this.visitSendPort$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isJsIsolateSink)
      return this.visitIsolateSink$1(x);
    if (typeof x === "object" && x !== null && !!$.getInterceptor(x).$isCloseToken)
      return this.visitCloseToken$1(x);
    $.throwExpression("Message serialization: Illegal value " + $.S(x) + " passed");
    return;
  }
};

$$._Copier = {
  "": function _Copier(_visited) {
    this._visited = _visited;
  },
  "super": "_MessageTraverser",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copy, len, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this.visitList$1$bailout1(1, list);
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    len = list.length;
    copy = $.List_List(len, null);
    t1 = this._visited;
    t1.$indexSet(t1, list, copy);
    for (t1 = copy.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      copy[i] = t2;
    }
    return copy;
  },
  visitList$1$bailout1: function(state0, list) {
    var t1, copy, len, t2, i, t3;
    t1 = this._visited;
    copy = t1.$index(t1, list);
    if (copy != null)
      return copy;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    copy = $.List_List(len, null);
    t2 = this._visited;
    t2.$indexSet(t2, list, copy);
    for (t2 = copy.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      copy[i] = t3;
    }
    return copy;
  },
  visitMap$1: function(map) {
    var t1, t2;
    t1 = {};
    t2 = this._visited;
    t1.copy_0 = t2.$index(t2, map);
    t2 = t1.copy_0;
    if (t2 != null)
      return t2;
    t1.copy_0 = $.HashMap$(null, null);
    t2 = this._visited;
    t2.$indexSet(t2, map, t1.copy_0);
    map.forEach$1(map, new $._Copier_visitMap_anon(t1, this));
    return t1.copy_0;
  }
};

$$._Copier_visitMap_anon = {
  "": function _Copier_visitMap_anon(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$2: function(key, val) {
    var t1, t2;
    t1 = this.box_0.copy_0;
    t2 = this.this_1;
    $.$indexSet$ax(t1, t2._dispatch$1(key), t2._dispatch$1(val));
  }
};

$$._Serializer = {
  "": function _Serializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  },
  "super": "_MessageTraverser",
  visitPrimitive$1: function(x) {
    return x;
  },
  visitList$1: function(list) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, list);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, list, id);
    return ["list", id, this._serializeList$1(list)];
  },
  visitMap$1: function(map) {
    var t1, copyId, id;
    t1 = this._visited;
    copyId = t1.$index(t1, map);
    if (copyId != null)
      return ["ref", copyId];
    id = this._nextFreeRefId;
    this._nextFreeRefId = id + 1;
    t1 = this._visited;
    t1.$indexSet(t1, map, id);
    return ["map", id, this._serializeList$1($.toList$0$ax(map.get$keys())), this._serializeList$1($.toList$0$ax(map.get$values(map)))];
  },
  _serializeList$1: function(list) {
    var len, result, t1, i, t2;
    if (typeof list !== "string" && (typeof list !== "object" || list === null || list.constructor !== Array && !$.getInterceptor(list).$isJavaScriptIndexingBehavior))
      return this._serializeList$1$bailout(1, list);
    len = list.length;
    result = $.List_List(len, null);
    for (t1 = result.length, i = 0; i < len; ++i) {
      if (i >= list.length)
        throw $.ioore(i);
      t2 = this._dispatch$1(list[i]);
      if (i >= t1)
        throw $.ioore(i);
      result[i] = t2;
    }
    return result;
  },
  _serializeList$1$bailout: function(state0, list) {
    var t1, len, result, t2, i, t3;
    t1 = $.getInterceptor$asx(list);
    len = t1.get$length(list);
    result = $.List_List(len, null);
    for (t2 = result.length, i = 0; $.JSNumber_methods.$lt(i, len); ++i) {
      t3 = this._dispatch$1(t1.$index(list, i));
      if (i >= t2)
        throw $.ioore(i);
      result[i] = t3;
    }
    return result;
  }
};

$$._Deserializer = {
  "": function _Deserializer(_deserialized) {
    this._deserialized = _deserialized;
  },
  "super": "Object",
  deserialize$1: function(x) {
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    this._deserialized = $.HashMap$(null, null);
    return this._deserializeHelper$1(x);
  },
  _deserializeHelper$1: function(x) {
    var t1, id;
    t1 = $.getInterceptor(x);
    if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
      return x;
    switch (t1.$index(x, 0)) {
      case "ref":
        id = t1.$index(x, 1);
        t1 = this._deserialized;
        return t1.$index(t1, id);
      case "list":
        return this._deserializeList$1(x);
      case "map":
        return this._deserializeMap$1(x);
      case "sendport":
        return this.deserializeSendPort$1(x);
      case "isolateSink":
        return this.deserializeIsolateSink$1(x);
      case "closeToken":
        return this.deserializeCloseToken$1(x);
      default:
        $.throwExpression("Unexpected serialized object");
        return;
    }
  },
  _deserializeList$1: function(x) {
    var t1, id, dartList, len, i;
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    dartList = t1.$index(x, 2);
    if (typeof dartList !== "object" || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !$.getInterceptor(dartList).$isJavaScriptIndexingBehavior)
      return this._deserializeList$1$bailout(1, dartList, id);
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    len = dartList.length;
    for (i = 0; i < len; ++i) {
      if (i >= dartList.length)
        throw $.ioore(i);
      t1 = this._deserializeHelper$1(dartList[i]);
      if (i >= dartList.length)
        throw $.ioore(i);
      dartList[i] = t1;
    }
    return dartList;
  },
  _deserializeList$1$bailout: function(state0, dartList, id) {
    var t1, len, i;
    t1 = this._deserialized;
    t1.$indexSet(t1, id, dartList);
    t1 = $.getInterceptor$asx(dartList);
    len = t1.get$length(dartList);
    for (i = 0; $.JSNumber_methods.$lt(i, len); ++i)
      t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
    return dartList;
  },
  _deserializeMap$1: function(x) {
    var result, t1, id, t2, keys, values, len, i, key;
    result = $.HashMap$(null, null);
    t1 = $.getInterceptor$asx(x);
    id = t1.$index(x, 1);
    t2 = this._deserialized;
    t2.$indexSet(t2, id, result);
    keys = t1.$index(x, 2);
    if (typeof keys !== "string" && (typeof keys !== "object" || keys === null || keys.constructor !== Array && !$.getInterceptor(keys).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(1, keys, t1, x, result);
    values = t1.$index(x, 3);
    if (typeof values !== "string" && (typeof values !== "object" || values === null || values.constructor !== Array && !$.getInterceptor(values).$isJavaScriptIndexingBehavior))
      return this._deserializeMap$1$bailout(2, keys, 0, 0, result, values);
    len = keys.length;
    for (i = 0; i < len; ++i) {
      if (i >= keys.length)
        throw $.ioore(i);
      key = this._deserializeHelper$1(keys[i]);
      if (i >= values.length)
        throw $.ioore(i);
      result.$indexSet(result, key, this._deserializeHelper$1(values[i]));
    }
    return result;
  },
  _deserializeMap$1$bailout: function(state0, keys, t1, x, result, values) {
    switch (state0) {
      case 0:
        result = $.HashMap$(null, null);
        t1 = $.getInterceptor$asx(x);
        id = t1.$index(x, 1);
        t2 = this._deserialized;
        t2.$indexSet(t2, id, result);
        keys = t1.$index(x, 2);
      case 1:
        state0 = 0;
        values = t1.$index(x, 3);
      case 2:
        var id, t2, len, i;
        state0 = 0;
        t1 = $.getInterceptor$asx(keys);
        len = t1.get$length(keys);
        for (t2 = $.getInterceptor$asx(values), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
          result.$indexSet(result, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
        return result;
    }
  }
};

$$.TimerImpl = {
  "": function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  },
  "super": "Object",
  set$_handle: function(v) {
    this._handle = v;
  },
  TimerImpl$2: function(milliseconds, callback) {
    var t1;
    if (milliseconds === 0)
      t1 = !$.hasTimer() || $._globalState().isWorker === true;
    else
      t1 = false;
    if (t1) {
      t1 = $._globalState;
      t1().topEventLoop.enqueue$3(t1().currentContext, callback, "timer");
      this._inEventLoop = true;
    } else if ($.hasTimer()) {
      t1 = $._globalState().topEventLoop;
      t1.activeTimerCount = t1.activeTimerCount + 1;
      this._handle = $.get$globalThis().setTimeout($.convertDartClosureToJS(new $.internalCallback(this, callback), 0), milliseconds);
    } else
      throw $.wrapException($.UnsupportedError$("Timer greater than 0."));
  }
};

$$.internalCallback = {
  "": function internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  },
  "super": "Closure",
  call$0: function() {
    this.callback_1.call$0();
    this.this_0.set$_handle(null);
    var t1 = $globalState.topEventLoop;
    t1.activeTimerCount = t1.activeTimerCount - 1;
  }
};

$$.JSArray = {
  "": function JSArray() {
  },
  "super": "Interceptor",
  $name: "List",
  add$1: function(receiver, value) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("add"));
    receiver.push(value);
  },
  removeLast$0: function(receiver) {
    if (!!receiver.fixed$length)
      $.throwExpression($.UnsupportedError$("removeLast"));
    if (receiver.length === 0)
      throw $.wrapException($.RangeError$value(-1));
    return receiver.pop();
  },
  addAll$1: function(receiver, collection) {
    var t1, e;
    for (t1 = $.get$iterator$ax(collection); t1.moveNext$0() === true;) {
      e = t1.get$current();
      if (!!receiver.fixed$length)
        $.throwExpression($.UnsupportedError$("add"));
      receiver.push(e);
    }
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  sublist$2: function(receiver, start, end) {
    if (start == null)
      $.throwExpression($.ArgumentError$(null));
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0 || start > receiver.length)
      throw $.wrapException($.RangeError$range(start, 0, receiver.length));
    if (end == null)
      end = receiver.length;
    else {
      if (typeof end !== "number" || Math.floor(end) !== end)
        throw $.wrapException($.ArgumentError$(end));
      if (end < start || end > receiver.length)
        throw $.wrapException($.RangeError$range(end, start, receiver.length));
    }
    if (start === end)
      return [];
    return receiver.slice(start, end);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  setRange$4: function(receiver, start, end, iterable, skipCount) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("set range"));
    $.IterableMixinWorkaround_setRangeList(receiver, start, end, iterable, skipCount);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(receiver, result, $.List_List($, null));
    return result._contents;
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.getRuntimeTypeArgument(receiver, receiver.$asJSArray, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$iterator: function(receiver) {
    return $.ListIterator$(receiver);
  },
  get$hashCode: function(receiver) {
    return $.Primitives_objectHashCode(receiver);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  set$length: function(receiver, newLength) {
    if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
      throw $.wrapException($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.wrapException($.RangeError$value(newLength));
    $.checkGrowable(receiver, "set length");
    receiver.length = newLength;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    if (!!receiver.immutable$list)
      $.throwExpression($.UnsupportedError$("indexed set"));
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    receiver[index] = value;
  },
  $asInterceptor: null,
  $asList: null,
  $asIterable: null,
  $isList: true,
  $isIterable: true
};

$$.JSMutableArray = {
  "": function JSMutableArray() {
  },
  "super": "JSArray",
  $asList: function() { return [null]; },
  $asIterable: function() { return [null]; }
};

$$.JSFixedArray = {
  "": function JSFixedArray() {
  },
  "super": "JSMutableArray"
};

$$.JSExtendableArray = {
  "": function JSExtendableArray() {
  },
  "super": "JSMutableArray"
};

$$.DartError = {
  "": function DartError() {
  },
  "super": "Object",
  get$stack: function() {
    return this.stack;
  },
  toString$0: function(_) {
    var dartException = this.dartException;
    if (!!Error.captureStackTrace || this.get$stack() == null)
      return $.toString$0(dartException);
    else
      return $.S(dartException) + "\n" + $.S(this.get$stack());
  },
  DartError$1: function(dartException) {
    this.dartException = dartException;
    this.toString = $.DartError_toStringWrapper.call$0;
  }
};

$$._StackTrace = {
  "": function _StackTrace(_stack) {
    this._stack = _stack;
  },
  "super": "Object",
  toString$0: function(_) {
    var t1 = this._stack;
    return t1 != null ? t1 : "";
  }
};

$$.invokeClosure_anon = {
  "": function invokeClosure_anon(closure_0) {
    this.closure_0 = closure_0;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_0.call$0();
  }
};

$$.invokeClosure_anon0 = {
  "": function invokeClosure_anon(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_1.call$1(this.arg1_2);
  }
};

$$.invokeClosure_anon1 = {
  "": function invokeClosure_anon(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  },
  "super": "Closure",
  call$0: function() {
    return this.closure_3.call$2(this.arg1_4, this.arg2_5);
  }
};

$$.Closure = {
  "": function Closure() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Closure";
  }
};

$$.Creates = {
  "": function Creates(types) {
    this.types = types;
  },
  "super": "Object"
};

$$.Returns = {
  "": function Returns(types) {
    this.types = types;
  },
  "super": "Object"
};

$$.JSName = {
  "": function JSName(name) {
    this.name = name;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  }
};

$$.Null = {
  "": function Null() {
  },
  "super": "Object"
};

$$.TypeErrorImplementation = {
  "": function TypeErrorImplementation(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    return this.message;
  }
};

$$.FallThroughErrorImplementation = {
  "": function FallThroughErrorImplementation() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Switch case fall-through.";
  }
};

$$.JSNumber = {
  "": function JSNumber() {
  },
  "super": "Interceptor",
  $name: "num",
  get$isNaN: function(receiver) {
    return isNaN(receiver);
  },
  get$isInfinite: function(receiver) {
    return receiver == Infinity || receiver == -Infinity;
  },
  remainder$1: function(receiver, b) {
    return receiver % b;
  },
  truncate$0: function(receiver) {
    var truncated;
    if (this.get$isNaN(receiver))
      $.throwExpression($.UnsupportedError$("NaN"));
    if (this.get$isInfinite(receiver))
      $.throwExpression($.UnsupportedError$("Infinity"));
    truncated = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
    return truncated == -0.0 ? 0 : truncated;
  },
  toString$0: function(receiver) {
    if (receiver === 0 && 1 / receiver < 0)
      return "-0.0";
    else
      return "" + receiver;
  },
  get$hashCode: function(receiver) {
    return receiver & 0x1FFFFFFF;
  },
  $add: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  $sub: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver - other;
  },
  $tdiv: function(receiver, other) {
    return this.truncate$0(receiver / other);
  },
  $shl: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (other > 31)
      return 0;
    return receiver << other >>> 0;
  },
  $shr: function(receiver, other) {
    if (other < 0)
      throw $.wrapException($.ArgumentError$(other));
    if (receiver > 0) {
      if (other > 31)
        return 0;
      return receiver >>> other;
    }
    if (other > 31)
      other = 31;
    return receiver >> other >>> 0;
  },
  $and: function(receiver, other) {
    return (receiver & other) >>> 0;
  },
  $lt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver < other;
  },
  $gt: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver > other;
  },
  $le: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver <= other;
  },
  $ge: function(receiver, other) {
    if (typeof other !== "number")
      throw $.wrapException($.ArgumentError$(other));
    return receiver >= other;
  },
  $isnum: true
};

$$.JSInt = {
  "": function JSInt() {
  },
  "super": "JSNumber",
  $name: "int",
  $isint: true,
  $isnum: true
};

$$.JSDouble = {
  "": function JSDouble() {
  },
  "super": "JSNumber",
  $name: "double",
  $isdouble: true,
  $isnum: true
};

$$.TypeImpl = {
  "": function TypeImpl(typeName) {
    this.typeName = typeName;
  },
  "super": "Object",
  toString$0: function(_) {
    return this.typeName;
  },
  get$hashCode: function(_) {
    return $.get$hashCode$(this.typeName);
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isTypeImpl)
      return false;
    return $.$eq(this.typeName, other.typeName);
  },
  $isTypeImpl: true
};

$$.JSString = {
  "": function JSString() {
  },
  "super": "Interceptor",
  $name: "String",
  codeUnitAt$1: function(receiver, index) {
    if (index < 0)
      throw $.wrapException($.RangeError$value(index));
    if (index >= receiver.length)
      throw $.wrapException($.RangeError$value(index));
    return receiver.charCodeAt(index);
  },
  $add: function(receiver, other) {
    if (typeof other !== "string")
      throw $.wrapException($.ArgumentError$(other));
    return receiver + other;
  },
  endsWith$1: function(receiver, other) {
    var otherLength, t1;
    otherLength = other.length;
    t1 = receiver.length;
    if (otherLength > t1)
      return false;
    return other === this.substring$1(receiver, t1 - otherLength);
  },
  replaceAll$2: function(receiver, from, to) {
    return $.stringReplaceAllUnchecked(receiver, from, to);
  },
  split$1: function(receiver, pattern) {
    return receiver.split(pattern);
  },
  substring$2: function(receiver, startIndex, endIndex) {
    if (endIndex == null)
      endIndex = receiver.length;
    if (typeof endIndex !== "number")
      $.throwExpression($.ArgumentError$(endIndex));
    if (startIndex < 0)
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.JSInt_methods.$gt(startIndex, endIndex))
      throw $.wrapException($.RangeError$value(startIndex));
    if ($.$gt$n(endIndex, receiver.length))
      throw $.wrapException($.RangeError$value(endIndex));
    return receiver.substring(startIndex, endIndex);
  },
  substring$1: function($receiver, startIndex) {
    return this.substring$2($receiver, startIndex, null);
  },
  trim$0: function(receiver) {
    return receiver.trim();
  },
  indexOf$2: function(receiver, other, start) {
    if (typeof start !== "number" || Math.floor(start) !== start)
      throw $.wrapException($.ArgumentError$(start));
    else
      start;
    if (start < 0)
      return -1;
    return receiver.indexOf(other, start);
  },
  contains$2: function(receiver, other, startIndex) {
    return $.stringContainsUnchecked(receiver, other, startIndex);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  toString$0: function(receiver) {
    return receiver;
  },
  get$hashCode: function(receiver) {
    var hash, i;
    for (hash = 0, i = 0; i < receiver.length; ++i) {
      hash = 536870911 & hash + receiver.charCodeAt(i);
      hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
      hash ^= hash >> 6;
    }
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    if (typeof index !== "number" || Math.floor(index) !== index)
      throw $.wrapException($.ArgumentError$(index));
    if (index >= receiver.length || index < 0)
      throw $.wrapException($.RangeError$value(index));
    return receiver[index];
  },
  $isString: true
};

$$._convertJsonToDart_anon = {
  "": function _convertJsonToDart_anon() {
  },
  "super": "Closure",
  call$2: function(key, value) {
    return value;
  }
};

$$._convertJsonToDart_walk = {
  "": function _convertJsonToDart_walk(revive_0) {
    this.revive_0 = revive_0;
  },
  "super": "Closure",
  call$1: function(e) {
    var list, t1, i, keys, map, key, proto;
    if (e == null || typeof e != "object")
      return e;
    if (Object.getPrototypeOf(e) === Array.prototype) {
      list = e;
      for (t1 = this.revive_0, i = 0; i < list.length; ++i)
        list[i] = t1.call$2(i, this.call$1(list[i]));
      return list;
    }
    keys = Object.keys(e);
    map = $.makeLiteralMap([]);
    for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
      key = keys[i];
      map.$indexSet(map, key, t1.call$2(key, this.call$1(e[key])));
    }
    proto = e.__proto__;
    if (typeof proto !== "undefined" && proto !== Object.prototype)
      map.$indexSet(map, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
    return map;
  }
};

$$.JSSyntaxRegExp = {
  "": function JSSyntaxRegExp(_pattern, _isMultiLine, _isCaseSensitive, _nativeRegExp) {
    this._pattern = _pattern;
    this._isMultiLine = _isMultiLine;
    this._isCaseSensitive = _isCaseSensitive;
    this._nativeRegExp = _nativeRegExp;
  },
  "super": "Object",
  firstMatch$1: function(str) {
    var m, matchStart, t1;
    if (typeof str !== "string")
      $.throwExpression($.ArgumentError$(str));
    m = this._nativeRegExp.exec(str);
    if (m == null)
      return;
    matchStart = m.index;
    if (0 >= m.length)
      throw $.ioore(0);
    t1 = $.get$length$asx(m[0]);
    if (typeof t1 !== "number")
      throw $.iae(t1);
    return $._MatchImplementation$(this.get$pattern(this), str, matchStart, matchStart + t1, m);
  },
  get$pattern: function(_) {
    return this._pattern;
  },
  get$isMultiLine: function() {
    return this._isMultiLine;
  },
  get$isCaseSensitive: function() {
    return this._isCaseSensitive;
  }
};

$$._MatchImplementation = {
  "": function _MatchImplementation(pattern, str, start, end, _groups) {
    this.pattern = pattern;
    this.str = str;
    this.start = start;
    this.end = end;
    this._groups = _groups;
  },
  "super": "Object",
  $index: function(_, index) {
    var t1 = this._groups;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  }
};

$$._AllMatchesIterable = {
  "": function _AllMatchesIterable(_re, _str) {
    this._re = _re;
    this._str = _str;
  },
  "super": "IterableBase",
  get$iterator: function(_) {
    return $._AllMatchesIterator$(this._re, this._str);
  },
  $asIterable: function() { return [$.Match]; }
};

$$._AllMatchesIterator = {
  "": function _AllMatchesIterator(_re, _str, _liblib4$_current) {
    this._re = _re;
    this._str = _str;
    this._liblib4$_current = _liblib4$_current;
  },
  "super": "Object",
  get$current: function() {
    return this._liblib4$_current;
  },
  moveNext$0: function() {
    this._liblib4$_current = this._re.firstMatch$1(this._str);
    return this._liblib4$_current != null;
  }
};

$$.StringMatch = {
  "": function StringMatch(start, str, pattern) {
    this.start = start;
    this.str = str;
    this.pattern = pattern;
  },
  "super": "Object",
  $index: function(_, g) {
    if ($.$eq(g, 0) !== true)
      $.throwExpression($.RangeError$value(g));
    return this.pattern;
  }
};

$$._CompleterImpl = {
  "": function _CompleterImpl(future, _isComplete) {
    this.future = future;
    this._isComplete = _isComplete;
  },
  "super": "Object",
  completeError$2: function(error, stackTrace) {
    if (this._isComplete)
      throw $.wrapException($.StateError$("Future already completed"));
    this._isComplete = true;
    if (stackTrace != null)
      $._attachStackTrace(error, stackTrace);
    this.future._setError$1(error);
  },
  completeError$1: function(error) {
    return this.completeError$2(error, null);
  }
};

$$._FutureListenerWrapper = {
  "": function _FutureListenerWrapper(future, _nextListener) {
    this.future = future;
    this._nextListener = _nextListener;
  },
  "super": "Object",
  get$_nextListener: function() {
    return this._nextListener;
  },
  set$_nextListener: function(v) {
    this._nextListener = v;
  },
  _sendValue$1: function(value) {
    this.future._setValue$1(value);
  },
  _sendError$1: function(error) {
    this.future._setError$1(error);
  }
};

$$._FutureImpl = {
  "": function _FutureImpl(_state, _resultOrListeners) {
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "Object",
  get$_state: function() {
    return this._state;
  },
  set$_state: function(v) {
    this._state = v;
  },
  get$_resultOrListeners: function() {
    return this._resultOrListeners;
  },
  get$_isComplete: function() {
    return this._state !== 0;
  },
  get$_hasValue: function() {
    return this._state === 1;
  },
  get$_hasError: function() {
    return (this._state & 2) !== 0;
  },
  get$_hasUnhandledError: function() {
    return (this._state & 4) !== 0;
  },
  then$2$onError: function(f, onError) {
    var t1;
    if (!this.get$_isComplete()) {
      if (onError == null) {
        t1 = $._ThenFuture$(f);
        t1._subscribeTo$1(this);
        return t1;
      }
      t1 = $._SubscribeFuture$(f, onError);
      t1._subscribeTo$1(this);
      return t1;
    }
    if (this.get$_hasError()) {
      if (onError != null)
        return this._handleError$2(onError, null);
      return $._FutureWrapper$(this);
    } else
      return this._handleValue$1(f);
  },
  then$1: function(f) {
    return this.then$2$onError(f, null);
  },
  catchError$2$test: function(f, test) {
    var t1;
    if (this.get$_hasValue())
      return $._FutureWrapper$(this);
    if (!this.get$_isComplete()) {
      t1 = $._CatchErrorFuture$(f, test);
      t1._subscribeTo$1(this);
      return t1;
    } else
      return this._handleError$2(f, test);
  },
  catchError$1: function(f) {
    return this.catchError$2$test(f, null);
  },
  _handleValue$1: function(onValue) {
    var thenFuture = $._ThenFuture$(onValue);
    $.Timer_run(new $._FutureImpl__handleValue_anon(thenFuture, this._resultOrListeners));
    return thenFuture;
  },
  _handleError$2: function(onError, test) {
    var error, errorFuture;
    this._state = (this._state & 4294967291) >>> 0;
    error = this._resultOrListeners;
    errorFuture = $._CatchErrorFuture$(onError, test);
    $.Timer_run(new $._FutureImpl__handleError_anon(error, errorFuture));
    return errorFuture;
  },
  _setValue$1: function(value) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 1;
    this._resultOrListeners = value;
    for (; listeners != null; listeners = listeners0) {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendValue$1(value);
    }
  },
  get$_setValue: function() {
    return new $.BoundClosure$1(this, "_setValue$1");
  },
  _setError$1: function(error) {
    var listeners, listeners0;
    if (this.get$_isComplete())
      throw $.wrapException($.StateError$("Future already completed"));
    listeners = this._removeListeners$0();
    this._state = 2;
    this._resultOrListeners = error;
    if (listeners == null) {
      this._scheduleUnhandledError$0();
      return;
    }
    do {
      listeners0 = listeners.get$_nextListener();
      listeners.set$_nextListener(null);
      listeners._sendError$1(error);
      if (listeners0 != null) {
        listeners = listeners0;
        continue;
      } else
        break;
    } while (true);
  },
  get$_setError: function() {
    return new $.BoundClosure$1(this, "_setError$1");
  },
  _scheduleUnhandledError$0: function() {
    this._state = (this._state | 4) >>> 0;
    $.Timer_run(new $._FutureImpl__scheduleUnhandledError_anon(this));
  },
  _removeListeners$0: function() {
    var current, prev, next;
    current = this._resultOrListeners;
    this._resultOrListeners = null;
    for (prev = null; current != null; prev = current, current = next) {
      next = current.get$_nextListener();
      current.set$_nextListener(prev);
    }
    return prev;
  },
  _chain$1: function(future) {
    var t1;
    if (!this.get$_isComplete()) {
      t1 = $._FutureListenerWrapper$(future);
      t1._nextListener = this._resultOrListeners;
      this._resultOrListeners = t1;
    } else if (this.get$_hasValue())
      future._setValue$1(this._resultOrListeners);
    else {
      this._state = (this._state & 4294967291) >>> 0;
      future._setError$1(this._resultOrListeners);
    }
  },
  _setOrChainValue$1: function(result) {
    if (typeof result === "object" && result !== null && !!$.getInterceptor(result).$isFuture) {
      result;
      if (!!$.getInterceptor(result).$is_FutureImpl) {
        result._chain$1(this);
        return;
      } else {
        result.then$2$onError(this.get$_setValue(), this.get$_setError());
        return;
      }
    } else
      this._setValue$1(result);
  },
  _FutureImpl$immediate$1: function(value) {
    this._state = 1;
    this._resultOrListeners = value;
  },
  $is_FutureImpl: true,
  $isFuture: true
};

$$._FutureImpl__FutureImpl$wait_handleError = {
  "": function _FutureImpl__FutureImpl$wait_handleError(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(error) {
    var t1 = this.box_0;
    if (t1.values_1 != null) {
      t1.values_1 = null;
      t1.completer_0.completeError$1(error);
    }
  }
};

$$._FutureImpl__FutureImpl$wait_anon = {
  "": function _FutureImpl__FutureImpl$wait_anon(box_0, pos_1) {
    this.box_0 = box_0;
    this.pos_1 = pos_1;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.values_1;
    if (t2 == null)
      return;
    t3 = this.pos_1;
    if (t3 >>> 0 !== t3 || t3 >= t2.length)
      throw $.ioore(t3);
    t2[t3] = value;
    t1.remaining_2 = $.$sub$n(t1.remaining_2, 1);
    if ($.$eq(t1.remaining_2, 0)) {
      t2 = t1.completer_0;
      t1 = t1.values_1;
      if (t2._isComplete)
        $.throwExpression($.StateError$("Future already completed"));
      t2._isComplete = true;
      t2.future._setValue$1(t1);
    }
  }
};

$$._FutureImpl__handleValue_anon = {
  "": function _FutureImpl__handleValue_anon(thenFuture_0, value_1) {
    this.thenFuture_0 = thenFuture_0;
    this.value_1 = value_1;
  },
  "super": "Closure",
  call$0: function() {
    this.thenFuture_0._sendValue$1(this.value_1);
  }
};

$$._FutureImpl__handleError_anon = {
  "": function _FutureImpl__handleError_anon(error_0, errorFuture_1) {
    this.error_0 = error_0;
    this.errorFuture_1 = errorFuture_1;
  },
  "super": "Closure",
  call$0: function() {
    this.errorFuture_1._sendError$1(this.error_0);
  }
};

$$._FutureImpl__scheduleUnhandledError_anon = {
  "": function _FutureImpl__scheduleUnhandledError_anon(this_0) {
    this.this_0 = this_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1, error, trace;
    t1 = this.this_0;
    if (t1.get$_hasUnhandledError()) {
      t1.set$_state((t1.get$_state() & 4294967291) >>> 0);
      error = t1.get$_resultOrListeners();
      $.Primitives_printString("Uncaught Error: " + $.S(error));
      trace = $.getAttachedStackTrace(error);
      if (trace != null)
        $.Primitives_printString("Stack Trace:\n" + $.S(trace) + "\n");
      throw $.wrapException(error);
    }
  }
};

$$._TransformFuture = {
  "": function _TransformFuture(_nextListener) {
    this._nextListener = _nextListener;
  },
  "super": "_FutureImpl",
  get$_nextListener: function() {
    return this._nextListener;
  },
  set$_nextListener: function(v) {
    this._nextListener = v;
  },
  _subscribeTo$1: function(future) {
    this._nextListener = future._resultOrListeners;
    future._resultOrListeners = this;
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._ThenFuture = {
  "": function _ThenFuture(_onValue, _nextListener, _state, _resultOrListeners) {
    this._onValue = _onValue;
    this._nextListener = _nextListener;
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_TransformFuture",
  _onValue$1: function(arg0) {
    return this._onValue.call$1(arg0);
  },
  _sendValue$1: function(value) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onValue$1(value);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  _sendError$1: function(error) {
    this._setError$1(error);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._CatchErrorFuture = {
  "": function _CatchErrorFuture(_test, _onError, _nextListener, _state, _resultOrListeners) {
    this._test = _test;
    this._onError = _onError;
    this._nextListener = _nextListener;
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_TransformFuture",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendValue$1: function(value) {
    this._setValue$1(value);
  },
  _sendError$1: function(error) {
    var matchesTest, e, s, result, e0, s0, exception, t1;
    if (this._test != null) {
      matchesTest = null;
      try {
        matchesTest = this._test$1(error);
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        s = $.getTraceFromException(exception);
        this._setError$1($._asyncError(e, s));
        return;
      }

      if (matchesTest !== true) {
        this._setError$1(error);
        return;
      }
    }
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e0 = t1;
      s0 = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e0, s0));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: null,
  $asFuture: null
};

$$._SubscribeFuture = {
  "": function _SubscribeFuture(_onError, _onValue, _nextListener, _state, _resultOrListeners) {
    this._onError = _onError;
    this._onValue = _onValue;
    this._nextListener = _nextListener;
    this._state = _state;
    this._resultOrListeners = _resultOrListeners;
  },
  "super": "_ThenFuture",
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _sendError$1: function(error) {
    var result, e, s, exception, t1;
    result = null;
    try {
      result = this._onError$1(error);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      this._setError$1($._asyncError(e, s));
      return;
    }

    this._setOrChainValue$1(result);
  },
  $as_FutureImpl: function (S, T) { return [T]; },
  $asFuture: function (S, T) { return [T]; }
};

$$._FutureWrapper = {
  "": function _FutureWrapper(_future) {
    this._future = _future;
  },
  "super": "Object",
  then$2$onError: function($function, onError) {
    return this._future.then$2$onError($function, onError);
  },
  then$1: function($function) {
    return this.then$2$onError($function, null);
  },
  catchError$2$test: function($function, test) {
    return this._future.catchError$2$test($function, test);
  },
  catchError$1: function($function) {
    return this.catchError$2$test($function, null);
  },
  $isFuture: true
};

$$.Stream = {
  "": function Stream() {
  },
  "super": "Object",
  forEach$1: function(_, action) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_forEach_anon(t1, action, future), true, new $.Stream_forEach_anon0(future), future.get$_setError());
    return future;
  },
  get$length: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$();
    t1.count_0 = 0;
    this.listen$4$cancelOnError$onDone$onError(new $.Stream_length_anon(t1), true, new $.Stream_length_anon0(t1, future), future.get$_setError());
    return future;
  },
  get$isEmpty: function(_) {
    var t1, future;
    t1 = {};
    future = $._FutureImpl$();
    t1.subscription_0 = null;
    t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_isEmpty_anon(t1, future), true, new $.Stream_isEmpty_anon0(future), future.get$_setError());
    return future;
  },
  skip$1: function(_, count) {
    return $._SkipStream$(this, count);
  },
  elementAt$1: function(_, index) {
    var t1, t2, future;
    t1 = {};
    t1.index_0 = index;
    t2 = t1.index_0;
    if (typeof t2 !== "number" || Math.floor(t2) !== t2 || $.$lt$n(t2, 0))
      throw $.wrapException($.ArgumentError$(t2));
    future = $._FutureImpl$();
    t1.subscription_1 = null;
    t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new $.Stream_elementAt_anon(t1, future), true, new $.Stream_elementAt_anon0(future), future.get$_setError());
    return future;
  }
};

$$.Stream_forEach_anon = {
  "": function Stream_forEach_anon(box_0, action_1, future_2) {
    this.box_0 = box_0;
    this.action_1 = action_1;
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$1: function(element) {
    $._runUserCode(new $.Stream_forEach__anon(this.action_1, element), new $.Stream_forEach__anon0(), $._cancelAndError(this.box_0.subscription_0, this.future_2));
  }
};

$$.Stream_forEach__anon = {
  "": function Stream_forEach__anon(action_3, element_4) {
    this.action_3 = action_3;
    this.element_4 = element_4;
  },
  "super": "Closure",
  call$0: function() {
    return this.action_3.call$1(this.element_4);
  }
};

$$.Stream_forEach__anon0 = {
  "": function Stream_forEach__anon() {
  },
  "super": "Closure",
  call$1: function(_) {
  }
};

$$.Stream_forEach_anon0 = {
  "": function Stream_forEach_anon(future_5) {
    this.future_5 = future_5;
  },
  "super": "Closure",
  call$0: function() {
    this.future_5._setValue$1(null);
  }
};

$$.Stream_length_anon = {
  "": function Stream_length_anon(box_0) {
    this.box_0 = box_0;
  },
  "super": "Closure",
  call$1: function(_) {
    var t1 = this.box_0;
    t1.count_0 = $.$add$ns(t1.count_0, 1);
  }
};

$$.Stream_length_anon0 = {
  "": function Stream_length_anon(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$0: function() {
    this.future_1._setValue$1(this.box_0.count_0);
  }
};

$$.Stream_isEmpty_anon = {
  "": function Stream_isEmpty_anon(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(_) {
    this.box_0.subscription_0.cancel$0();
    this.future_1._setValue$1(false);
  }
};

$$.Stream_isEmpty_anon0 = {
  "": function Stream_isEmpty_anon(future_2) {
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setValue$1(true);
  }
};

$$.Stream_elementAt_anon = {
  "": function Stream_elementAt_anon(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.box_0;
    if ($.$eq(t1.index_0, 0) === true) {
      t1.subscription_1.cancel$0();
      this.future_1._setValue$1(value);
      return;
    }
    t1.index_0 = $.$sub$n(t1.index_0, 1);
  }
};

$$.Stream_elementAt_anon0 = {
  "": function Stream_elementAt_anon(future_2) {
    this.future_2 = future_2;
  },
  "super": "Closure",
  call$0: function() {
    this.future_2._setError$1($.StateError$("Not enough elements for elementAt"));
  }
};

$$.StreamSubscription = {
  "": function StreamSubscription() {
  },
  "super": "Object"
};

$$.EventSink = {
  "": function EventSink() {
  },
  "super": "Object"
};

$$._throwDelayed_anon = {
  "": function _throwDelayed_anon(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  },
  "super": "Closure",
  call$0: function() {
    var t1, t2, trace, t3;
    t1 = this.stackTrace_1;
    if (t1 != null)
      $.Primitives_printString($.JSNull_methods.toString$0(t1));
    t2 = this.error_0;
    trace = $.getAttachedStackTrace(t2);
    t3 = $.getInterceptor(trace);
    if (trace != null && t3.$eq(trace, t1) !== true)
      $.Primitives_printString(t3.toString$0(trace));
    throw $.wrapException(t2);
  }
};

$$._cancelAndError_anon = {
  "": function _cancelAndError_anon(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.subscription_0.cancel$0();
    this.future_1._setError$1(error);
  }
};

$$._ForwardingStream = {
  "": function _ForwardingStream() {
  },
  "super": "Stream",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._ForwardingStreamSubscription$(this, onData, onError, onDone, true === cancelOnError);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  },
  _handleData$2: function(data, sink) {
    sink._liblib1$_onData$1(data);
  }
};

$$._BaseStreamSubscription = {
  "": function _BaseStreamSubscription() {
  },
  "super": "Object",
  _liblib1$_onData$1: function(arg0) {
    return this._liblib1$_onData.call$1(arg0);
  },
  _onError$1: function(arg0) {
    return this._onError.call$1(arg0);
  },
  _onDone$0: function() {
    return this._onDone.call$0();
  },
  _BaseStreamSubscription$3: function(_onData, _onError, _onDone) {
    if (this._liblib1$_onData == null)
      this._liblib1$_onData = $._nullDataHandler;
    if (this._onError == null)
      this._onError = $._nullErrorHandler;
  }
};

$$._ForwardingStreamSubscription = {
  "": function _ForwardingStreamSubscription(_stream, _cancelOnError, _subscription, _liblib1$_onData, _onError, _onDone) {
    this._stream = _stream;
    this._cancelOnError = _cancelOnError;
    this._subscription = _subscription;
    this._liblib1$_onData = _liblib1$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
  },
  "super": "_BaseStreamSubscription",
  get$_cancelOnError: function() {
    return this._cancelOnError;
  },
  get$_subscription: function() {
    return this._subscription;
  },
  set$_subscription: function(v) {
    this._subscription = v;
  },
  cancel$0: function() {
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
  },
  _sendError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  _handleData$1: function(data) {
    this._stream._handleData$2(data, this);
  },
  get$_handleData: function() {
    return new $.BoundClosure$1(this, "_handleData$1");
  },
  _handleError$1: function(error) {
    this._onError$1(error);
    if (this._cancelOnError) {
      this._subscription.cancel$0();
      this._subscription = null;
    }
  },
  get$_handleError: function() {
    return new $.BoundClosure$1(this, "_handleError$1");
  },
  _handleDone$0: function() {
    this._subscription = null;
    var t1 = this._subscription;
    if (t1 != null) {
      t1.cancel$0();
      this._subscription = null;
    }
    this._onDone$0();
  },
  get$_handleDone: function() {
    return new $.BoundClosure$0(this, "_handleDone$0");
  },
  _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, _cancelOnError) {
    var t1, t2;
    t1 = this.get$_handleData();
    t2 = this.get$_handleError();
    this._subscription = this._stream._source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
  }
};

$$._WhereStream = {
  "": function _WhereStream(_test, _source) {
    this._test = _test;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  _test$1: function(arg0) {
    return this._test.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var satisfies, e, s, exception, t1;
    satisfies = null;
    try {
      satisfies = this._test$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError()) {
        t1.get$_subscription().cancel$0();
        t1.set$_subscription(null);
      }
      return;
    }

    if (satisfies === true)
      sink._liblib1$_onData$1(inputEvent);
  }
};

$$._MapStream = {
  "": function _MapStream(_transform, _source) {
    this._transform = _transform;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  _transform$1: function(arg0) {
    return this._transform.call$1(arg0);
  },
  _handleData$2: function(inputEvent, sink) {
    var outputEvent, e, s, exception, t1;
    outputEvent = null;
    try {
      outputEvent = this._transform$1(inputEvent);
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      s = $.getTraceFromException(exception);
      t1 = sink;
      t1._onError$1($._asyncError(e, s));
      if (t1.get$_cancelOnError()) {
        t1.get$_subscription().cancel$0();
        t1.set$_subscription(null);
      }
      return;
    }

    sink._liblib1$_onData$1(outputEvent);
  }
};

$$._SkipStream = {
  "": function _SkipStream(_remaining, _source) {
    this._remaining = _remaining;
    this._source = _source;
  },
  "super": "_ForwardingStream",
  _handleData$2: function(inputEvent, sink) {
    var t1 = this._remaining;
    if (t1 > 0) {
      this._remaining = t1 - 1;
      return;
    }
    sink._liblib1$_onData$1(inputEvent);
    return;
  },
  _SkipStream$2: function(source, count) {
    if (typeof count !== "number" || Math.floor(count) !== count || count < 0)
      throw $.wrapException($.ArgumentError$(count));
  }
};

$$.Timer_run_anon = {
  "": function Timer_run_anon() {
  },
  "super": "Closure",
  call$0: function() {
    var runCallbacks, i, callback, newCallbacks, exception;
    runCallbacks = $.get$Timer__runCallbacks();
    $.Timer__runCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(runCallbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(runCallbacks, i);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        newCallbacks = $.get$Timer__runCallbacks();
        $.Timer__runCallbacks = [];
        i = $.$add$ns(i, 1);
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), $.sublist$1$ax(runCallbacks, i));
        $.JSArray_methods.addAll$1($.get$Timer__runCallbacks(), newCallbacks);
        throw exception;
      }

    }
  }
};

$$.HashMap = {
  "": function HashMap(_liblib0$_length, _strings, _nums, _rest, _keys) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._keys = _keys;
  },
  "super": "Object",
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  get$keys: function() {
    return $.HashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.HashMap_values_anon(this));
  },
  containsKey$1: function(key) {
    var strings, nums, rest;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      return strings == null ? false : strings[key] != null;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      return nums == null ? false : nums[key] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.HashMap__findBucketIndex(rest[$.get$hashCode$(key) & 0x3ffffff], key) >= 0;
    }
  },
  $index: function(_, key) {
    var strings, t1, entry, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        t1 = null;
      else {
        entry = strings[key];
        t1 = entry === strings ? null : entry;
      }
      return t1;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        t1 = null;
      else {
        entry = nums[key];
        t1 = entry === nums ? null : entry;
      }
      return t1;
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, t1, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      if (strings[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        strings[key] = strings;
      else
        strings[key] = value;
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      if (nums[key] == null) {
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      }
      if (value == null)
        nums[key] = nums;
      else
        nums[key] = value;
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        if (table == null)
          table["<non-identifier-key>"] = table;
        else
          table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null) {
        t1 = [key, value];
        if (t1 == null)
          rest[hash] = rest;
        else
          rest[hash] = t1;
        this._liblib0$_length = this._liblib0$_length + 1;
        this._keys = null;
      } else {
        index = $.HashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          this._liblib0$_length = this._liblib0$_length + 1;
          this._keys = null;
        }
      }
    }
  },
  remove$1: function(_, key) {
    var rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, key);
    else if (typeof key === "number" && (key & 0x3ffffff) === key)
      return this._removeHashTableEntry$2(this._nums, key);
    else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.HashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return bucket.splice(index, 2)[1];
    }
  },
  forEach$1: function(_, action) {
    var keys, $length, i, key;
    keys = this._computeKeys$0();
    for ($length = keys.length, i = 0; i < $length; ++i) {
      key = keys[i];
      action.call$2(key, this.$index(this, key));
      if (keys !== this._keys)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _computeKeys$0: function() {
    var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
    t1 = this._keys;
    if (t1 != null)
      return t1;
    result = $.List_List(this._liblib0$_length, null);
    strings = this._strings;
    if (strings != null) {
      names = Object.getOwnPropertyNames(strings);
      entries = names.length;
      for (index = 0, i = 0; i < entries; ++i) {
        result[index] = names[i];
        ++index;
      }
    } else
      index = 0;
    nums = this._nums;
    if (nums != null) {
      names = Object.getOwnPropertyNames(nums);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        result[index] = +names[i];
        ++index;
      }
    }
    rest = this._rest;
    if (rest != null) {
      names = Object.getOwnPropertyNames(rest);
      entries = names.length;
      for (i = 0; i < entries; ++i) {
        bucket = rest[names[i]];
        $length = bucket.length;
        for (i0 = 0; i0 < $length; i0 += 2) {
          result[index] = bucket[i0];
          ++index;
        }
      }
    }
    this._keys = result;
    return result;
  },
  _removeHashTableEntry$2: function(table, key) {
    var entry, value;
    if (table != null && table[key] != null) {
      entry = table[key];
      value = entry === table ? null : entry;
      delete table[key];
      this._liblib0$_length = this._liblib0$_length - 1;
      this._keys = null;
      return value;
    } else
      return;
  },
  $isMap: true
};

$$._HashSetBase = {
  "": function _HashSetBase() {
  },
  "super": "IterableBase",
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
};

$$.IterableBase = {
  "": function IterableBase() {
  },
  "super": "Object",
  map$1: function(_, f) {
    return $.MappedIterable$(this, f, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0), null);
  },
  forEach$1: function(_, f) {
    var t1;
    for (t1 = this.get$iterator(this); t1.moveNext$0() === true;)
      f.call$1(t1.get$current());
  },
  join$1: function(_, separator) {
    var iterator, buffer, t1;
    if (typeof separator !== "string")
      return this.join$1$bailout(1, separator);
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator === "")
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      buffer._contents = buffer._contents + t1;
      for (; iterator.moveNext$0() === true;) {
        buffer._contents = buffer._contents + separator;
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      }
    }
    return buffer._contents;
  },
  join$1$bailout: function(state0, separator) {
    var iterator, buffer, t1, str, t2;
    iterator = this.get$iterator(this);
    if (iterator.moveNext$0() !== true)
      return "";
    buffer = $.StringBuffer$("");
    if (separator == null || $.$eq(separator, "") === true)
      do {
        t1 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t1;
      } while (iterator.moveNext$0() === true);
    else {
      t1 = $.S(iterator.get$current());
      buffer._contents = buffer._contents + t1;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        buffer._contents = buffer._contents + str;
        t2 = $.S(iterator.get$current());
        buffer._contents = buffer._contents + t2;
      }
    }
    return buffer._contents;
  },
  toList$1$growable: function(_, growable) {
    return $.List_List$from(this, growable, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$length: function(_) {
    var it, count;
    it = this.get$iterator(this);
    for (count = 0; it.moveNext$0() === true;)
      ++count;
    return count;
  },
  get$isEmpty: function(_) {
    return this.get$iterator(this).moveNext$0() !== true;
  },
  skip$1: function(_, n) {
    return $.SkipIterable$(this, n, $.getRuntimeTypeArgument(this, this.$asIterableBase, 0));
  },
  elementAt$1: function(_, index) {
    var t1, remaining, element;
    if (typeof index !== "number")
      return this.elementAt$1$bailout(1, index);
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      if (remaining === 0)
        return element;
      --remaining;
    }
    throw $.wrapException($.RangeError$value(index));
  },
  elementAt$1$bailout: function(state0, index) {
    var t1, remaining, element, t2;
    if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
      throw $.wrapException($.RangeError$value(index));
    for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0() === true;) {
      element = t1.get$current();
      t2 = $.getInterceptor(remaining);
      if (t2.$eq(remaining, 0))
        return element;
      remaining = t2.$sub(remaining, 1);
    }
    throw $.wrapException($.RangeError$value(index));
  },
  $isIterable: true,
  $asIterable: null
};

$$.LinkedHashMap = {
  "": function LinkedHashMap(_liblib0$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  },
  "super": "Object",
  $index: function(_, key) {
    var strings, cell, nums, rest, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return;
      cell = strings[key];
      return cell == null ? null : cell.get$_value();
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null)
        return;
      cell = nums[key];
      return cell == null ? null : cell.get$_value();
    } else {
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[$.get$hashCode$(key) & 0x3ffffff];
      index = $.LinkedHashMap__findBucketIndex(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    }
  },
  $indexSet: function(_, key, value) {
    var strings, table, nums, rest, hash, bucket, index;
    if (typeof key === "string" && key !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$3(strings, key, value);
    } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$3(nums, key, value);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(key) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = $.LinkedHashMap__findBucketIndex(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$2(cell.get$_key(), cell.get$_value());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  get$keys: function() {
    return $.LinkedHashMapKeyIterable$(this, $.getRuntimeTypeArgument(this, this.$asLinkedHashMap, 0));
  },
  get$values: function(_) {
    var t1 = this.get$keys();
    return t1.map$1(t1, new $.LinkedHashMap_values_anon(this));
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitPair(this, result, $.List_List($, null));
    return result._contents;
  },
  _addHashTableEntry$3: function(table, key, value) {
    var cell = table[key];
    if (cell == null)
      table[key] = this._newLinkedCell$2(key, value);
    else
      cell.set$_value(value);
  },
  _newLinkedCell$2: function(key, value) {
    var cell, last;
    cell = $.LinkedHashMapCell$(key, value);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last._next = cell;
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  $isMap: true
};

$$.LinkedHashSet = {
  "": function LinkedHashSet(_liblib0$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._liblib0$_length = _liblib0$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  },
  "super": "_HashSetBase",
  get$iterator: function(_) {
    return $.LinkedHashSetIterator$(this, this._modifications);
  },
  get$length: function(_) {
    return this._liblib0$_length;
  },
  get$isEmpty: function(_) {
    return this._liblib0$_length === 0;
  },
  contains$1: function(_, object) {
    var strings, nums, rest;
    if (object !== "__proto__") {
      strings = this._strings;
      if (strings == null)
        return false;
      return strings[object] != null;
    } else if (false) {
      nums = this._nums;
      if (nums == null)
        return false;
      return nums[object] != null;
    } else {
      rest = this._rest;
      if (rest == null)
        return false;
      return $.LinkedHashSet__findBucketIndex(rest[$.JSString_methods.get$hashCode(object) & 0x3ffffff], object) >= 0;
    }
  },
  forEach$1: function(_, action) {
    var cell, modifications;
    cell = this._first;
    modifications = this._modifications;
    for (; cell != null;) {
      action.call$1(cell.get$_element());
      if (modifications !== this._modifications)
        throw $.wrapException($.ConcurrentModificationError$(this));
      cell = cell.get$_next();
    }
  },
  add$1: function(_, element) {
    var strings, table, nums, rest, hash, bucket;
    if (typeof element === "string" && element !== "__proto__") {
      strings = this._strings;
      if (strings == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._strings = table;
        strings = table;
      }
      this._addHashTableEntry$2(strings, element);
    } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
      nums = this._nums;
      if (nums == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._nums = table;
        nums = table;
      }
      this._addHashTableEntry$2(nums, element);
    } else {
      rest = this._rest;
      if (rest == null) {
        table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        this._rest = table;
        rest = table;
      }
      hash = $.get$hashCode$(element) & 0x3ffffff;
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if ($.LinkedHashSet__findBucketIndex(bucket, element) >= 0)
          return;
        bucket.push(this._newLinkedCell$1(element));
      }
    }
  },
  remove$1: function(_, object) {
    var rest, bucket, index;
    if (object !== "__proto__")
      return this._removeHashTableEntry$2(this._strings, object);
    else if (false)
      return this._removeHashTableEntry$2(this._nums, object);
    else {
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[$.JSString_methods.get$hashCode(object) & 0x3ffffff];
      index = $.LinkedHashSet__findBucketIndex(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    }
  },
  _addHashTableEntry$2: function(table, element) {
    if (table[element] != null)
      return;
    table[element] = this._newLinkedCell$1(element);
  },
  _removeHashTableEntry$2: function(table, element) {
    var cell;
    if (table == null)
      return false;
    cell = table[element];
    if (cell == null)
      return false;
    this._unlinkCell$1(cell);
    delete table[element];
    return true;
  },
  _newLinkedCell$1: function(element) {
    var cell, last;
    cell = $.LinkedHashSetCell$(element);
    if (this._first == null) {
      this._last = cell;
      this._first = cell;
    } else {
      last = this._last;
      cell._previous = last;
      last.set$_next(cell);
      this._last = cell;
    }
    this._liblib0$_length = this._liblib0$_length + 1;
    this._modifications = this._modifications + 1 & 67108863;
    return cell;
  },
  _unlinkCell$1: function(cell) {
    var previous, next;
    previous = cell.get$_previous();
    next = cell.get$_next();
    if (previous == null)
      this._first = next;
    else
      previous.set$_next(next);
    if (next == null)
      this._last = previous;
    else
      next.set$_previous(previous);
    this._liblib0$_length = this._liblib0$_length - 1;
    this._modifications = this._modifications + 1 & 67108863;
  },
  $as_HashSetBase: null,
  $asIterable: null
};

$$.ListBase = {
  "": function ListBase() {
  },
  "super": "Object+ListMixin",
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.ListMixin = {
  "": function ListMixin() {
  },
  "super": "Object",
  get$iterator: function(_) {
    return $.ListIterator$(this);
  },
  elementAt$1: function(_, index) {
    return this.$index(this, index);
  },
  forEach$1: function(_, action) {
    var $length, i;
    $length = this.get$length(this);
    if (typeof $length !== "number")
      return this.forEach$1$bailout(1, action, $length);
    for (i = 0; i < $length; ++i) {
      action.call$1(this.$index(this, i));
      if ($length !== this.get$length(this))
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  forEach$1$bailout: function(state0, action, $length) {
    var t1, i;
    for (t1 = $.getInterceptor($length), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
      action.call$1(this.$index(this, i));
      if (t1.$eq($length, this.get$length(this)) !== true)
        throw $.wrapException($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return $.$eq(this.get$length(this), 0);
  },
  get$last: function(_) {
    if ($.$eq(this.get$length(this), 0) === true)
      throw $.wrapException($.StateError$("No elements"));
    return this.$index(this, $.$sub$n(this.get$length(this), 1));
  },
  where$1: function(_, test) {
    return $.WhereIterable$(this, test, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
  },
  skip$1: function(_, count) {
    return $.SubListIterable$(this, count, null, null);
  },
  toList$1$growable: function(_, growable) {
    var result, i, t1;
    if (growable) {
      result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
      $.JSArray_methods.set$length(result, this.get$length(this));
    } else {
      result = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
      $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
    }
    for (i = 0; $.JSNumber_methods.$lt(i, this.get$length(this)); ++i) {
      t1 = this.$index(this, i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    var t1 = this.get$length(this);
    this.set$length(this, $.$add$ns(t1, 1));
    this.$indexSet(this, t1, element);
  },
  removeLast$0: function(_) {
    var result;
    if ($.$eq(this.get$length(this), 0) === true)
      throw $.wrapException($.StateError$("No elements"));
    result = this.$index(this, $.$sub$n(this.get$length(this), 1));
    this.set$length(this, $.$sub$n(this.get$length(this), 1));
    return result;
  },
  _rangeCheck$2: function(start, end) {
    var t1 = $.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(this)))
      throw $.wrapException($.RangeError$range(start, 0, this.get$length(this)));
    t1 = $.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, this.get$length(this)))
      throw $.wrapException($.RangeError$range(end, start, this.get$length(this)));
  },
  sublist$2: function(_, start, end) {
    var $length, result, i, t1;
    if (typeof start !== "number")
      return this.sublist$2$bailout(1, start, end);
    if (end == null)
      end = this.get$length(this);
    this._rangeCheck$2(start, end);
    $length = $.$sub$n(end, start);
    if (typeof $length !== "number")
      return this.sublist$2$bailout(2, start, 0, $length);
    result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
    $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
    $.JSArray_methods.set$length(result, $length);
    for (i = 0; i < $length; ++i) {
      t1 = this.$index(this, start + i);
      if (i >= result.length)
        throw $.ioore(i);
      result[i] = t1;
    }
    return result;
  },
  sublist$2$bailout: function(state0, start, end, $length) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        if (end == null)
          end = this.get$length(this);
        this._rangeCheck$2(start, end);
        $length = $.$sub$n(end, start);
      case 2:
        var result, t1, i, t2;
        state0 = 0;
        result = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListMixin, 0));
        $.setRuntimeTypeInfo(result, [$.getRuntimeTypeArgument(this, this.$asListMixin, 0)]);
        $.JSArray_methods.set$length(result, $length);
        for (t1 = $.getInterceptor$ns(start), i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
          t2 = this.$index(this, t1.$add(start, i));
          if (i >= result.length)
            throw $.ioore(i);
          result[i] = t2;
        }
        return result;
    }
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  $isList: true,
  $asList: null,
  $isIterable: true,
  $asIterable: null
};

$$.ListQueue = {
  "": function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  },
  "super": "IterableBase",
  get$iterator: function(_) {
    return $._ListQueueIterator$(this);
  },
  forEach$1: function(_, action) {
    var modificationCount, i, t1;
    modificationCount = this._modificationCount;
    for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
      t1 = this._table;
      if (i < 0 || i >= t1.length)
        throw $.ioore(i);
      action.call$1(t1[i]);
      if (modificationCount !== this._modificationCount)
        $.throwExpression($.ConcurrentModificationError$(this));
    }
  },
  get$isEmpty: function(_) {
    return this._head === this._tail;
  },
  get$length: function(_) {
    return $.$and$n($.$sub$n(this._tail, this._head), this._table.length - 1);
  },
  elementAt$1: function(_, index) {
    var t1, t2, t3;
    t1 = $.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, this.get$length(this)))
      throw $.wrapException($.RangeError$range(index, 0, this.get$length(this)));
    t1 = this._table;
    t2 = this._head;
    if (typeof index !== "number")
      throw $.iae(index);
    t3 = t1.length;
    t2 = (t2 + index & t3 - 1) >>> 0;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    return t1[t2];
  },
  toList$1$growable: function(_, growable) {
    var list;
    if (growable) {
      list = $.List_List($, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
      $.JSArray_methods.set$length(list, this.get$length(this));
    } else {
      list = $.List_List(this.get$length(this), $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
      $.setRuntimeTypeInfo(list, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    }
    this._writeToList$1(list);
    return list;
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  add$1: function(_, element) {
    this._add$1(element);
  },
  toString$0: function(_) {
    var result = $.StringBuffer$("");
    $.ToString__emitValue(this, result, $.List_List($, null));
    return result._contents;
  },
  removeFirst$0: function() {
    var t1, t2, t3, result;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    t1 = this._table;
    t2 = this._head;
    t3 = t1.length;
    if (t2 < 0 || t2 >= t3)
      throw $.ioore(t2);
    result = t1[t2];
    this._head = (t2 + 1 & t3 - 1) >>> 0;
    return result;
  },
  removeLast$0: function(_) {
    var t1, t2;
    if (this._head === this._tail)
      throw $.wrapException($.StateError$("No elements"));
    this._modificationCount = this._modificationCount + 1;
    this._tail = $.$and$n($.$sub$n(this._tail, 1), this._table.length - 1);
    t1 = this._table;
    t2 = this._tail;
    if (t2 >>> 0 !== t2 || t2 >= t1.length)
      throw $.ioore(t2);
    return t1[t2];
  },
  _add$1: function(element) {
    var t1, t2, t3;
    t1 = this._table;
    t2 = this._tail;
    t3 = t1.length;
    if (t2 >>> 0 !== t2 || t2 >= t3)
      throw $.ioore(t2);
    t1[t2] = element;
    this._tail = $.$and$n(t2 + 1, t3 - 1);
    if (this._head === this._tail)
      this._grow$0();
    this._modificationCount = this._modificationCount + 1;
  },
  _grow$0: function() {
    var newTable, t1, t2, split;
    newTable = $.List_List(this._table.length * 2, $.getRuntimeTypeArgument(this, this.$asListQueue, 0));
    $.setRuntimeTypeInfo(newTable, [$.getRuntimeTypeArgument(this, this.$asListQueue, 0)]);
    t1 = this._table;
    t2 = this._head;
    split = t1.length - t2;
    $.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
    $.JSArray_methods.setRange$4(newTable, split, split + this._head, this._table, 0);
    this._head = 0;
    this._tail = this._table.length;
    this._table = newTable;
  },
  _writeToList$1: function(target) {
    var t1, t2, t3, t4, $length, firstPartSize;
    t1 = this._head;
    t2 = this._tail;
    t3 = $.JSInt_methods.$le(t1, t2);
    t4 = this._table;
    if (t3) {
      $length = $.$sub$n(t2, t1);
      $.JSArray_methods.setRange$4(target, 0, $length, t4, t1);
      return $length;
    } else {
      firstPartSize = t4.length - t1;
      $.JSArray_methods.setRange$4(target, 0, firstPartSize, t4, t1);
      t1 = this._tail;
      if (typeof t1 !== "number")
        throw $.iae(t1);
      $.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + t1, this._table, 0);
      return $.$add$ns(this._tail, firstPartSize);
    }
  },
  ListQueue$1: function(initialCapacity, E) {
    var t1;
    if (initialCapacity == null || $.JSNull_methods.$lt(initialCapacity, 8))
      initialCapacity = 8;
    else if (!$.ListQueue__isPowerOf2(initialCapacity))
      initialCapacity = $.ListQueue__nextPowerOf2(initialCapacity);
    t1 = $.List_List(initialCapacity, E);
    $.setRuntimeTypeInfo(t1, [E]);
    this._table = t1;
  },
  $asIterableBase: null,
  $asIterable: null,
  $isIterable: true
};

$$._ListQueueIterator = {
  "": function _ListQueueIterator(_queue, _end, _modificationCount, _liblib0$_position, _liblib0$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._liblib0$_position = _liblib0$_position;
    this._liblib0$_current = _liblib0$_current;
  },
  "super": "Object",
  get$current: function() {
    return this._liblib0$_current;
  },
  moveNext$0: function() {
    var t1, t2, t3;
    t1 = this._queue;
    if (this._modificationCount !== t1._modificationCount)
      $.throwExpression($.ConcurrentModificationError$(t1));
    t2 = this._liblib0$_position;
    if (t2 === this._end) {
      this._liblib0$_current = null;
      return false;
    }
    t3 = t1._table;
    if (t2 < 0 || t2 >= t3.length)
      throw $.ioore(t2);
    this._liblib0$_current = t3[t2];
    this._liblib0$_position = (this._liblib0$_position + 1 & t1._table.length - 1) >>> 0;
    return true;
  }
};

$$.Duration = {
  "": function Duration(_duration) {
    this._duration = _duration;
  },
  "super": "Object",
  get$_duration: function() {
    return this._duration;
  },
  $add: function(_, other) {
    return $.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
  },
  $sub: function(_, other) {
    return $.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
  },
  $lt: function(_, other) {
    return this._duration < other.get$_duration();
  },
  $gt: function(_, other) {
    return this._duration > other.get$_duration();
  },
  $ge: function(_, other) {
    return this._duration >= other.get$_duration();
  },
  get$inHours: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 3600000000);
  },
  get$inMinutes: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 60000000);
  },
  get$inSeconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000000);
  },
  get$inMilliseconds: function() {
    return $.JSNumber_methods.$tdiv(this._duration, 1000);
  },
  get$inMicroseconds: function() {
    return this._duration;
  },
  $eq: function(_, other) {
    if (other == null)
      return false;
    if (typeof other !== "object" || other === null || !$.getInterceptor(other).$isDuration)
      return false;
    return this._duration === other._duration;
  },
  get$hashCode: function(_) {
    return $.JSNumber_methods.get$hashCode(this._duration);
  },
  toString$0: function(_) {
    var t1, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
    t1 = new $.Duration_toString_twoDigits();
    if (this.get$inMicroseconds() < 0)
      return "-" + $.S($.Duration$(0, 0, -this.get$inMicroseconds(), 0, 0, 0));
    twoDigitMinutes = t1.call$1($.JSNumber_methods.remainder$1(this.get$inMinutes(), 60));
    twoDigitSeconds = t1.call$1($.JSNumber_methods.remainder$1(this.get$inSeconds(), 60));
    sixDigitUs = new $.Duration_toString_sixDigits().call$1($.JSNumber_methods.remainder$1(this.get$inMicroseconds(), 1000000));
    return $.S(this.get$inHours()) + ":" + $.S(twoDigitMinutes) + ":" + $.S(twoDigitSeconds) + "." + $.S(sixDigitUs);
  },
  $isDuration: true
};

$$.Duration_toString_sixDigits = {
  "": function Duration_toString_sixDigits() {
  },
  "super": "Closure",
  call$1: function(n) {
    var t1 = $.getInterceptor$n(n);
    if (t1.$ge(n, 100000))
      return $.S(n);
    if (t1.$ge(n, 10000))
      return "0" + $.S(n);
    if (t1.$ge(n, 1000))
      return "00" + $.S(n);
    if (t1.$ge(n, 100))
      return "000" + $.S(n);
    if (t1.$gt(n, 10))
      return "0000" + $.S(n);
    return "00000" + $.S(n);
  }
};

$$.Duration_toString_twoDigits = {
  "": function Duration_toString_twoDigits() {
  },
  "super": "Closure",
  call$1: function(n) {
    if ($.$ge$n(n, 10))
      return $.S(n);
    return "0" + $.S(n);
  }
};

$$.Error = {
  "": function Error() {
  },
  "super": "Object"
};

$$.AssertionError = {
  "": function AssertionError() {
  },
  "super": "Object"
};

$$.TypeError = {
  "": function TypeError() {
  },
  "super": "Object"
};

$$.NullThrownError = {
  "": function NullThrownError() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Throw of null.";
  }
};

$$.ArgumentError = {
  "": function ArgumentError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 != null)
      return "Illegal argument(s): " + $.S(t1);
    return "Illegal argument(s)";
  }
};

$$.RangeError = {
  "": function RangeError(message) {
    this.message = message;
  },
  "super": "ArgumentError",
  toString$0: function(_) {
    return "RangeError: " + $.S(this.message);
  }
};

$$.FallThroughError = {
  "": function FallThroughError() {
  },
  "super": "Object"
};

$$.AbstractClassInstantiationError = {
  "": function AbstractClassInstantiationError(_className) {
    this._className = _className;
  },
  "super": "Object",
  toString$0: function(_) {
    return "Cannot instantiate abstract class: '" + $.S(this._className) + "'";
  }
};

$$.NoSuchMethodError = {
  "": function NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, _existingArgumentNames) {
    this._receiver = _receiver;
    this._memberName = _memberName;
    this._arguments = _arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  },
  "super": "Object",
  toString$0: function(_) {
    var t1, t2, t3, t4, str, actualParameters, i, formalParameters;
    t1 = {};
    t1.sb_0 = $.StringBuffer$("");
    t1.i_1 = 0;
    t2 = this._arguments;
    for (; t3 = t1.i_1, t4 = $.getInterceptor$n(t3), t4.$lt(t3, t2.length); t1.i_1 = $.$add$ns(t1.i_1, 1)) {
      if (t4.$gt(t3, 0)) {
        t3 = t1.sb_0;
        t3._contents = t3._contents + ", ";
      }
      t3 = t1.sb_0;
      t4 = t1.i_1;
      if (t4 >>> 0 !== t4 || t4 >= t2.length)
        throw $.ioore(t4);
      str = $.Error_safeToString(t2[t4]);
      str = typeof str === "string" ? str : $.S(str);
      t3._contents = t3._contents + str;
    }
    t2 = this._namedArguments;
    t2.forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
    t2 = this._existingArgumentNames;
    if (t2 == null)
      return "NoSuchMethodError : method not found: '" + $.S(this._memberName) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nArguments: [" + $.S(t1.sb_0) + "]";
    else {
      actualParameters = t1.sb_0._contents;
      t1.sb_0 = $.StringBuffer$("");
      for (i = 0; i < t2.length; ++i) {
        if (i > 0) {
          t3 = t1.sb_0;
          t3._contents = t3._contents + ", ";
        }
        t3 = t1.sb_0;
        if (i >= t2.length)
          throw $.ioore(i);
        str = t2[i];
        str = typeof str === "string" ? str : $.S(str);
        t3._contents = t3._contents + str;
      }
      formalParameters = t1.sb_0._contents;
      t1 = this._memberName;
      return "NoSuchMethodError: incorrect number of arguments passed to method named '" + $.S(t1) + "'\nReceiver: " + $.S($.Error_safeToString(this._receiver)) + "\nTried calling: " + $.S(t1) + "(" + actualParameters + ")\nFound: " + $.S(t1) + "(" + formalParameters + ")";
    }
  }
};

$$.UnsupportedError = {
  "": function UnsupportedError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    return "Unsupported operation: " + this.message;
  }
};

$$.UnimplementedError = {
  "": function UnimplementedError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    var t1 = this.message;
    return t1 != null ? "UnimplementedError: " + $.S(t1) : "UnimplementedError";
  }
};

$$.StateError = {
  "": function StateError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    return "Bad state: " + this.message;
  }
};

$$.ConcurrentModificationError = {
  "": function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  },
  "super": "Object",
  toString$0: function(_) {
    var t1 = this.modifiedObject;
    if (t1 == null)
      return "Concurrent modification during iteration.";
    return "Concurrent modification during iteration: " + $.S($.Error_safeToString(t1)) + ".";
  }
};

$$.StackOverflowError = {
  "": function StackOverflowError() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "Stack Overflow";
  }
};

$$.RuntimeError = {
  "": function RuntimeError(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    return "RuntimeError: " + this.message;
  }
};

$$._ExceptionImplementation = {
  "": function _ExceptionImplementation(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    var t1 = this.message;
    if (t1 == null)
      return "Exception";
    return "Exception: " + $.S(t1);
  },
  $isException: true
};

$$.FormatException = {
  "": function FormatException(message) {
    this.message = message;
  },
  "super": "Object",
  toString$0: function(_) {
    return "FormatException: " + this.message;
  },
  $isException: true
};

$$.IntegerDivisionByZeroException = {
  "": function IntegerDivisionByZeroException() {
  },
  "super": "Object",
  toString$0: function(_) {
    return "IntegerDivisionByZeroException";
  },
  $isException: true
};

$$.Expando = {
  "": function Expando(name) {
    this.name = name;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  },
  toString$0: function(_) {
    return "Expando:" + this.name;
  },
  $index: function(_, object) {
    var values = $.Primitives_getProperty(object, "expando$values");
    return values == null ? null : $.Primitives_getProperty(values, this._getKey$0());
  },
  $indexSet: function(_, object, value) {
    var values = $.Primitives_getProperty(object, "expando$values");
    if (values == null) {
      values = $.Object$();
      $.Primitives_setProperty(object, "expando$values", values);
    }
    $.Primitives_setProperty(values, this._getKey$0(), value);
  },
  _getKey$0: function() {
    var key, t1;
    key = $.Primitives_getProperty(this, "expando$key");
    if (key == null) {
      t1 = $.Expando__keyCount;
      $.Expando__keyCount = $.$add$ns(t1, 1);
      key = "expando$key$" + $.S(t1);
      $.Primitives_setProperty(this, "expando$key", key);
    }
    return key;
  }
};

$$.Iterator = {
  "": function Iterator() {
  },
  "super": "Object"
};

$$.Object = {
  "": function Object() {
  },
  $eq: function(_, other) {
    return this === other;
  },
  get$hashCode: function(_) {
    return $.Primitives_objectHashCode(this);
  },
  toString$0: function(_) {
    return "Instance of '" + $.S($.Primitives_objectTypeName(this)) + "'";
  }
};

$$.Match = {
  "": function Match() {
  },
  "super": "Object"
};

$$.StringBuffer = {
  "": function StringBuffer(_contents) {
    this._contents = _contents;
  },
  "super": "Object",
  get$length: function(_) {
    return this._contents.length;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  write$1: function(_, obj) {
    if (typeof obj !== "string")
      return this.write$1$bailout(1, obj);
    this._contents = this._contents + obj;
  },
  write$1$bailout: function(state0, obj) {
    var str = typeof obj === "string" ? obj : $.S(obj);
    this._contents = this._contents + str;
  },
  writeAll$2: function(objects, separator) {
    var iterator, str;
    if (typeof separator !== "string")
      return this.writeAll$2$bailout(1, objects, separator);
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.JSString_methods.get$isEmpty(separator))
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (; iterator.moveNext$0() === true;) {
        this._contents = this._contents + separator;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  writeAll$2$bailout: function(state0, objects, separator) {
    var iterator, str, t1;
    iterator = $.get$iterator$ax(objects);
    if (iterator.moveNext$0() !== true)
      return;
    if ($.get$isEmpty$asx(separator) === true)
      do {
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      } while (iterator.moveNext$0() === true);
    else {
      str = iterator.get$current();
      str = typeof str === "string" ? str : $.S(str);
      this._contents = this._contents + str;
      for (t1 = typeof separator === "string"; iterator.moveNext$0() === true;) {
        str = t1 ? separator : $.S(separator);
        this._contents = this._contents + str;
        str = iterator.get$current();
        str = typeof str === "string" ? str : $.S(str);
        this._contents = this._contents + str;
      }
    }
  },
  toString$0: function(_) {
    return this._contents;
  },
  StringBuffer$1: function($content) {
    this._contents = $content;
  }
};

$$.Console = {
  "": function Console() {
  },
  "super": "Object",
  get$_isConsoleDefined: function() {
    return typeof console != "undefined";
  }
};

$$.DirectoryEntry__getFile_anon0 = {
  "": function DirectoryEntry__getFile_anon(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1.future._setValue$1(value);
  }
};

$$.DirectoryEntry__getFile_anon = {
  "": function DirectoryEntry__getFile_anon(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  }
};

$$.DirectoryReader_readEntries_anon = {
  "": function DirectoryReader_readEntries_anon(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1.future._setValue$1(value);
  }
};

$$.DirectoryReader_readEntries_anon0 = {
  "": function DirectoryReader_readEntries_anon(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  }
};

$$._ChildrenElementList = {
  "": function _ChildrenElementList(_liblib2$_element, _childElements) {
    this._liblib2$_element = _liblib2$_element;
    this._childElements = _childElements;
  },
  "super": "ListBase",
  get$isEmpty: function(_) {
    return this._liblib2$_element.firstElementChild == null;
  },
  get$length: function(_) {
    return this._childElements.length;
  },
  $index: function(_, index) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $indexSet: function(_, index, value) {
    var t1 = this._childElements;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    this._liblib2$_element.replaceChild(value, t1[index]);
  },
  set$length: function(_, newLength) {
    throw $.wrapException($.UnsupportedError$("Cannot resize element lists"));
  },
  add$1: function(_, value) {
    this._liblib2$_element.appendChild(value);
    return value;
  },
  get$iterator: function(_) {
    return $.get$iterator$ax(this.toList$0(this));
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._liblib2$_element.removeChild(result);
    return result;
  },
  get$last: function(_) {
    var result = this._liblib2$_element.lastElementChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  $asList: function() { return [$.Element]; },
  $asIterable: function() { return [$.Element]; }
};

$$._ElementCssClassSet = {
  "": function _ElementCssClassSet(_liblib2$_element) {
    this._liblib2$_element = _liblib2$_element;
  },
  "super": "CssClassSet",
  readClasses$0: function() {
    var s, t1, trimmed;
    s = $.LinkedHashSet$($.JSString);
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s(this._liblib2$_element.className, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if (!$.JSString_methods.get$isEmpty(trimmed))
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    $.List_List$from(s, true, null);
    this._liblib2$_element.className = s.join$1(s, " ");
  }
};

$$.Entry_remove_anon = {
  "": function Entry_remove_anon(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$0: function() {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1.future._setValue$1(null);
  }
};

$$.Entry_remove_anon0 = {
  "": function Entry_remove_anon(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  }
};

$$.FileEntry_createWriter_anon = {
  "": function FileEntry_createWriter_anon(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1.future._setValue$1(value);
  }
};

$$.FileEntry_createWriter_anon0 = {
  "": function FileEntry_createWriter_anon(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  }
};

$$.FileEntry_file_anon = {
  "": function FileEntry_file_anon(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1.future._setValue$1(value);
  }
};

$$.FileEntry_file_anon0 = {
  "": function FileEntry_file_anon(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  }
};

$$._ChildNodeListLazy = {
  "": function _ChildNodeListLazy(_this) {
    this._this = _this;
  },
  "super": "ListBase",
  get$last: function(_) {
    var result = this._this.lastChild;
    if (result == null)
      throw $.wrapException($.StateError$("No elements"));
    return result;
  },
  add$1: function(_, value) {
    this._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, len, i, t2;
    if (typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy) {
      t1 = this._this;
      if (iterable._this !== t1) {
        len = iterable.get$length(iterable);
        if (typeof len !== "number")
          return this.addAll$1$bailout1(1, iterable, len, t1);
        i = 0;
        for (; i < len; ++i)
          t1.appendChild(iterable.$index(iterable, 0));
      }
      return;
    }
    for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  addAll$1$bailout1: function(state0, iterable, len, t1) {
    switch (state0) {
      case 0:
      case 1:
        var i, t2;
        if (state0 === 1 || state0 === 0 && typeof iterable === "object" && iterable !== null && !!$.getInterceptor(iterable).$is_ChildNodeListLazy)
          switch (state0) {
            case 0:
              t1 = this._this;
            case 1:
              if (state0 === 1 || state0 === 0 && iterable._this !== t1)
                switch (state0) {
                  case 0:
                    len = iterable.get$length(iterable);
                  case 1:
                    state0 = 0;
                    i = 0;
                    for (; $.JSNumber_methods.$lt(i, len); ++i)
                      t1.appendChild(iterable.$index(iterable, 0));
                }
              return;
          }
        for (t1 = $.get$iterator$ax(iterable), t2 = this._this; t1.moveNext$0() === true;)
          t2.appendChild(t1.get$current());
    }
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      this._this.removeChild(result);
    return result;
  },
  clear$0: function(_) {
    this._this.textContent = "";
  },
  $indexSet: function(_, index, value) {
    var t1, t2;
    t1 = this._this;
    t2 = t1.childNodes;
    if (index >>> 0 !== index || index >= t2.length)
      throw $.ioore(index);
    t1.replaceChild(value, t2[index]);
  },
  get$iterator: function(_) {
    return $.NodeList_methods.get$iterator(this._this.childNodes);
  },
  get$length: function(_) {
    return this._this.childNodes.length;
  },
  set$length: function(_, value) {
    throw $.wrapException($.UnsupportedError$("Cannot set length on immutable List."));
  },
  $index: function(_, index) {
    var t1 = this._this.childNodes;
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  $is_ChildNodeListLazy: true,
  $asList: function() { return [$.Node]; },
  $asIterable: function() { return [$.Node]; }
};

$$.Window__requestFileSystem_anon = {
  "": function Window__requestFileSystem_anon(completer_0) {
    this.completer_0 = completer_0;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1 = this.completer_0;
    if (t1._isComplete)
      $.throwExpression($.StateError$("Future already completed"));
    t1._isComplete = true;
    t1.future._setValue$1(value);
  }
};

$$.Window__requestFileSystem_anon0 = {
  "": function Window__requestFileSystem_anon(completer_1) {
    this.completer_1 = completer_1;
  },
  "super": "Closure",
  call$1: function(error) {
    this.completer_1.completeError$1(error);
  }
};

$$._AttributeMap = {
  "": function _AttributeMap() {
  },
  "super": "Object",
  forEach$1: function(_, f) {
    var t1, key;
    for (t1 = $.JSArray_methods.get$iterator(this.get$keys()); t1.moveNext$0();) {
      key = t1.get$current();
      f.call$2(key, this.$index(this, key));
    }
  },
  get$keys: function() {
    var attributes, keys, len, i, t1;
    attributes = this._liblib2$_element.attributes;
    keys = $.List_List($, $.JSString);
    $.setRuntimeTypeInfo(keys, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        keys.push(t1.localName);
    }
    return keys;
  },
  get$values: function(_) {
    var attributes, values, len, i, t1;
    attributes = this._liblib2$_element.attributes;
    values = $.List_List($, $.JSString);
    $.setRuntimeTypeInfo(values, [$.JSString]);
    for (len = attributes.length, i = 0; i < len; ++i) {
      if (i >= attributes.length)
        throw $.ioore(i);
      t1 = attributes[i];
      if (this._matches$1(t1))
        values.push($.get$value$x(t1));
    }
    return values;
  },
  get$isEmpty: function(_) {
    return this.get$length(this) === 0;
  },
  $isMap: true,
  $asMap: function() { return [$.JSString, $.JSString]; }
};

$$._ElementAttributeMap = {
  "": function _ElementAttributeMap(_liblib2$_element) {
    this._liblib2$_element = _liblib2$_element;
  },
  "super": "_AttributeMap",
  $index: function(_, key) {
    return this._liblib2$_element.getAttribute(key);
  },
  $indexSet: function(_, key, value) {
    this._liblib2$_element.setAttribute(key, value);
  },
  get$length: function(_) {
    return this.get$keys().length;
  },
  _matches$1: function(node) {
    return node.namespaceURI == null;
  }
};

$$.CssClassSet = {
  "": function CssClassSet() {
  },
  "super": "Object",
  toString$0: function(_) {
    var t1 = this.readClasses$0();
    return t1.join$1(t1, " ");
  },
  toggle$1: function(value) {
    var s, result;
    s = this.readClasses$0();
    if (s.contains$1(s, value) === true) {
      s.remove$1(s, value);
      result = false;
    } else {
      s.add$1(s, value);
      result = true;
    }
    this.writeClasses$1(s);
    return result;
  },
  get$iterator: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$iterator(t1);
  },
  forEach$1: function(_, f) {
    var t1 = this.readClasses$0();
    t1.forEach$1(t1, f);
  },
  get$isEmpty: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$isEmpty(t1);
  },
  get$length: function(_) {
    var t1 = this.readClasses$0();
    return t1.get$length(t1);
  },
  add$1: function(_, value) {
    var s = this.readClasses$0();
    new $.CssClassSet_add_anon(value).call$1(s);
    this.writeClasses$1(s);
  },
  toList$1$growable: function(_, growable) {
    var t1 = this.readClasses$0();
    return $.List_List$from(t1, growable, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0));
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  skip$1: function(_, n) {
    var t1 = this.readClasses$0();
    return $.SkipIterable$(t1, n, $.getRuntimeTypeArgument(t1, t1.$asIterableBase, 0));
  },
  elementAt$1: function(_, index) {
    var t1 = this.readClasses$0();
    return t1.elementAt$1(t1, index);
  },
  $isIterable: true,
  $asIterable: function() { return [$.JSString]; }
};

$$.CssClassSet_add_anon = {
  "": function CssClassSet_add_anon(value_0) {
    this.value_0 = value_0;
  },
  "super": "Closure",
  call$1: function(s) {
    return $.add$1$ax(s, this.value_0);
  }
};

$$._EventStream = {
  "": function _EventStream(_target, _eventType, _useCapture) {
    this._target = _target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  },
  "super": "Stream",
  listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
    return $._EventStreamSubscription$(this._target, this._eventType, onData, this._useCapture);
  },
  listen$3$onDone$onError: function(onData, onDone, onError) {
    return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
  }
};

$$._EventStreamSubscription = {
  "": function _EventStreamSubscription(_pauseCount, _target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._target = _target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  },
  "super": "StreamSubscription",
  cancel$0: function() {
    if (this.get$_canceled())
      return;
    var t1 = this._onData;
    if (t1 != null)
      $.$$dom_removeEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
    this._target = null;
    this._onData = null;
  },
  get$_canceled: function() {
    return this._target == null;
  },
  get$_paused: function() {
    return this._pauseCount > 0;
  },
  _tryResume$0: function() {
    var t1 = this._onData;
    if (t1 != null && !this.get$_paused())
      $.$$dom_addEventListener$3$x(this._target, this._eventType, t1, this._useCapture);
  },
  _EventStreamSubscription$4: function(_target, _eventType, _onData, _useCapture) {
    this._tryResume$0();
  }
};

$$.EventStreamProvider = {
  "": function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  },
  "super": "Object",
  forTarget$2$useCapture: function(e, useCapture) {
    return $._EventStream$(e, this._eventType, useCapture);
  },
  forTarget$1: function(e) {
    return this.forTarget$2$useCapture(e, false);
  }
};

$$._DOMWindowCrossFrame = {
  "": function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  },
  "super": "Object"
};

$$.FixedSizeListIterator = {
  "": function FixedSizeListIterator(_array, _length, _position, _current) {
    this._array = _array;
    this._length = _length;
    this._position = _position;
    this._current = _current;
  },
  "super": "Object",
  moveNext$0: function() {
    var t1, nextPosition;
    t1 = this._position;
    if (t1 !== (t1 | 0))
      return this.moveNext$0$bailout(1, t1);
    nextPosition = t1 + 1;
    t1 = this._length;
    if (nextPosition < t1) {
      t1 = this._array;
      if (nextPosition < 0 || nextPosition >= t1.length)
        throw $.ioore(nextPosition);
      this._current = t1[nextPosition];
      this._position = nextPosition;
      return true;
    }
    this._current = null;
    this._position = t1;
    return false;
  },
  moveNext$0$bailout: function(state0, t1, nextPosition) {
    switch (state0) {
      case 0:
        t1 = this._position;
      case 1:
        state0 = 0;
        nextPosition = $.$add$ns(t1, 1);
      case 2:
        state0 = 0;
        t1 = this._length;
        if ($.$lt$n(nextPosition, t1)) {
          t1 = this._array;
          if (nextPosition >>> 0 !== nextPosition || nextPosition >= t1.length)
            throw $.ioore(nextPosition);
          this._current = t1[nextPosition];
          this._position = nextPosition;
          return true;
        }
        this._current = null;
        this._position = t1;
        return false;
    }
  },
  get$current: function() {
    return this._current;
  }
};

$$.convertDartToNative_Dictionary_anon = {
  "": function convertDartToNative_Dictionary_anon(object_0) {
    this.object_0 = object_0;
  },
  "super": "Closure",
  call$2: function(key, value) {
    this.object_0[key] = value;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_findSlot = {
  "": function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  },
  "super": "Closure",
  call$1: function(value) {
    var t1, $length, i, t2;
    t1 = this.values_0;
    $length = t1.length;
    for (i = 0; i < $length; ++i) {
      t2 = t1[i];
      if (t2 == null ? value == null : t2 === value)
        return i;
    }
    t1.push(value);
    this.copies_1.push(null);
    return $length;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_readSlot = {
  "": function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  },
  "super": "Closure",
  call$1: function(i) {
    var t1 = this.copies_2;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    return t1[i];
  }
};

$$.convertNativeToDart_AcceptStructuredClone_writeSlot = {
  "": function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  },
  "super": "Closure",
  call$2: function(i, x) {
    var t1 = this.copies_3;
    if (i >>> 0 !== i || i >= t1.length)
      throw $.ioore(i);
    t1[i] = x;
  }
};

$$.convertNativeToDart_AcceptStructuredClone_walk = {
  "": function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  },
  "super": "Closure",
  call$1: function(e) {
    var slot, copy, t1, key, $length, i;
    if (typeof e !== "object" || e === null || (e.constructor !== Array || !!e.immutable$list) && !$.getInterceptor(e).$isJavaScriptIndexingBehavior)
      return this.call$1$bailout(1, e);
    if (e instanceof Date)
      throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
    if (e instanceof RegExp)
      throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
    if (Object.getPrototypeOf(e) === Object.prototype) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      copy = $.makeLiteralMap([]);
      this.writeSlot_7.call$2(slot, copy);
      for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
        key = t1.get$current();
        copy.$indexSet(copy, key, this.call$1(e[key]));
      }
      return copy;
    }
    if (e instanceof Array) {
      slot = this.findSlot_5.call$1(e);
      copy = this.readSlot_6.call$1(slot);
      if (copy != null)
        return copy;
      $length = e.length;
      if (this.mustCopy_4)
        copy = new Array($length);
      else
        copy = e;
      if (typeof copy !== "object" || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !$.getInterceptor(copy).$isJavaScriptIndexingBehavior)
        return this.call$1$bailout(2, e, $length, copy, $.JSArray_methods, slot);
      this.writeSlot_7.call$2(slot, copy);
      for (i = 0; i < $length; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        t1 = this.call$1(e[i]);
        if (i >= copy.length)
          throw $.ioore(i);
        copy[i] = t1;
      }
      return copy;
    }
    return e;
  },
  call$1$bailout: function(state0, e, $length, copy, t1, slot) {
    switch (state0) {
      case 0:
      case 1:
        state0 = 0;
        t1 = $.getInterceptor(e);
        if (e == null)
          return e;
        if (typeof e === "boolean")
          return e;
        if (typeof e === "number")
          return e;
        if (typeof e === "string")
          return e;
        if (e instanceof Date)
          throw $.wrapException($.UnimplementedError$("structured clone of DateTime"));
        if (e instanceof RegExp)
          throw $.wrapException($.UnimplementedError$("structured clone of RegExp"));
        if (Object.getPrototypeOf(e) === Object.prototype) {
          slot = this.findSlot_5.call$1(e);
          copy = this.readSlot_6.call$1(slot);
          if (copy != null)
            return copy;
          copy = $.makeLiteralMap([]);
          this.writeSlot_7.call$2(slot, copy);
          for (t1 = $.JSArray_methods.get$iterator(Object.keys(e)); t1.moveNext$0();) {
            key = t1.get$current();
            copy.$indexSet(copy, key, this.call$1(e[key]));
          }
          return copy;
        }
      case 2:
        var key, t2, i;
        if (state0 === 2 || state0 === 0 && e instanceof Array)
          switch (state0) {
            case 0:
              slot = this.findSlot_5.call$1(e);
              copy = this.readSlot_6.call$1(slot);
              if (copy != null)
                return copy;
              $length = t1.get$length(e);
              copy = this.mustCopy_4 ? new Array($length) : e;
            case 2:
              state0 = 0;
              this.writeSlot_7.call$2(slot, copy);
              for (t2 = $.getInterceptor$ax(copy), i = 0; $.JSNumber_methods.$lt(i, $length); ++i)
                t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
              return copy;
          }
        return e;
    }
  }
};

$$.FilteredElementList = {
  "": function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  },
  "super": "ListBase",
  get$_filtered: function() {
    var t1 = this._childNodes;
    return $.List_List$from(t1.where$1(t1, new $.FilteredElementList__filtered_anon()), true, $.Element);
  },
  forEach$1: function(_, f) {
    $.JSArray_methods.forEach$1(this.get$_filtered(), f);
  },
  $indexSet: function(_, index, value) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    $.replaceWith$1$x(t1[index], value);
  },
  set$length: function(_, newLength) {
    var len;
    if (typeof newLength !== "number")
      return this.set$length$bailout(1, newLength);
    len = this.get$length(this);
    if (newLength >= len)
      return;
    else if (newLength < 0)
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  set$length$bailout: function(state0, newLength) {
    var len, t1;
    len = this.get$length(this);
    t1 = $.getInterceptor$n(newLength);
    if (t1.$ge(newLength, len))
      return;
    else if (t1.$lt(newLength, 0))
      throw $.wrapException($.ArgumentError$("Invalid list length"));
    this.removeRange$2(this, newLength, len);
  },
  add$1: function(_, value) {
    this._childNodes._this.appendChild(value);
  },
  addAll$1: function(_, iterable) {
    var t1, t2;
    for (t1 = $.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0() === true;)
      t2.appendChild(t1.get$current());
  },
  removeRange$2: function(_, start, end) {
    $.JSArray_methods.forEach$1($.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new $.FilteredElementList_removeRange_anon());
  },
  clear$0: function(_) {
    this._childNodes._this.textContent = "";
  },
  removeLast$0: function(_) {
    var result = this.get$last(this);
    if (result != null)
      $.remove$0$ax(result);
    return result;
  },
  get$length: function(_) {
    return this.get$_filtered().length;
  },
  $index: function(_, index) {
    var t1 = this.get$_filtered();
    if (index >>> 0 !== index || index >= t1.length)
      throw $.ioore(index);
    return t1[index];
  },
  get$iterator: function(_) {
    return $.JSArray_methods.get$iterator(this.get$_filtered());
  },
  $asListBase: null,
  $asList: null,
  $asIterable: null
};

$$.FilteredElementList__filtered_anon = {
  "": function FilteredElementList__filtered_anon() {
  },
  "super": "Closure",
  call$1: function(n) {
    return typeof n === "object" && n !== null && !!$.getInterceptor(n).$isElement;
  }
};

$$.FilteredElementList_removeRange_anon = {
  "": function FilteredElementList_removeRange_anon() {
  },
  "super": "Closure",
  call$1: function(el) {
    return $.remove$0$ax(el);
  }
};

$$.SupportedBrowser = {
  "": function SupportedBrowser(browserName, minimumVersion) {
    this.browserName = browserName;
    this.minimumVersion = minimumVersion;
  },
  "super": "Object"
};

$$.DomName = {
  "": function DomName(name) {
    this.name = name;
  },
  "super": "Object",
  get$name: function(receiver) {
    return this.name;
  }
};

$$.ReceivePort = {
  "": function ReceivePort() {
  },
  "super": "Object"
};

$$.JsonUnsupportedObjectError = {
  "": function JsonUnsupportedObjectError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  },
  "super": "Object",
  toString$0: function(_) {
    if (this.cause != null)
      return "Calling toJson method on object failed.";
    else
      return "Object toJson method returns non-serializable value.";
  }
};

$$.JsonCyclicError = {
  "": function JsonCyclicError(unsupportedObject, cause) {
    this.unsupportedObject = unsupportedObject;
    this.cause = cause;
  },
  "super": "JsonUnsupportedObjectError",
  toString$0: function(_) {
    return "Cyclic error in JSON stringify";
  }
};

$$._JsonStringifier = {
  "": function _JsonStringifier(sb, seen) {
    this.sb = sb;
    this.seen = seen;
  },
  "super": "Object",
  get$sb: function() {
    return this.sb;
  },
  checkCycle$1: function(object) {
    var t1, t2, i, t3;
    for (t1 = this.seen, t2 = t1.length, i = 0; i < t2; ++i) {
      t3 = t1[i];
      if (t3 == null ? object == null : t3 === object)
        throw $.wrapException($.JsonCyclicError$(object));
    }
    t1.push(object);
  },
  stringifyValue$1: function(object) {
    var customJson, e, t1, exception;
    if (!this.stringifyJsonValue$1(object)) {
      this.checkCycle$1(object);
      try {
        customJson = object.toJson$0();
        if (!this.stringifyJsonValue$1(customJson)) {
          t1 = $.JsonUnsupportedObjectError$(object, null);
          throw $.wrapException(t1);
        }
        t1 = this.seen;
        if (0 >= t1.length)
          throw $.ioore(0);
        t1.pop();
      } catch (exception) {
        t1 = $.unwrapException(exception);
        e = t1;
        throw $.wrapException($.JsonUnsupportedObjectError$(object, e));
      }

    }
  },
  stringifyJsonValue$1: function(object) {
    var t1, t2, i;
    t1 = {};
    if (typeof object === "number") {
      t1 = this.sb;
      t2 = $.JSNumber_methods.toString$0(object);
      t1._contents = t1._contents + t2;
      return true;
    } else if (object === true) {
      t1 = this.sb;
      t1._contents = t1._contents + "true";
      return true;
    } else if (object === false) {
      t1 = this.sb;
      t1._contents = t1._contents + "false";
      return true;
    } else if (object == null) {
      t1 = this.sb;
      t1._contents = t1._contents + "null";
      return true;
    } else if (typeof object === "string") {
      t1 = this.sb;
      t1._contents = t1._contents + "\"";
      $._JsonStringifier_escape(t1, object);
      t1._contents = t1._contents + "\"";
      return true;
    } else if (typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList)) {
      if (typeof object !== "string" && (typeof object !== "object" || object === null || object.constructor !== Array && !$.getInterceptor(object).$isJavaScriptIndexingBehavior))
        return this.stringifyJsonValue$1$bailout(1, object);
      this.checkCycle$1(object);
      t1 = this.sb;
      t1._contents = t1._contents + "[";
      if (object.length > 0) {
        this.stringifyValue$1(object[0]);
        for (i = 1; i < object.length; ++i) {
          t1._contents = t1._contents + ",";
          if (i >= object.length)
            throw $.ioore(i);
          this.stringifyValue$1(object[i]);
        }
      }
      t1._contents = t1._contents + "]";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
      this.checkCycle$1(object);
      t2 = this.sb;
      t2._contents = t2._contents + "{";
      t1.first_0 = true;
      object.forEach$1(object, new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
      t2._contents = t2._contents + "}";
      t1 = this.seen;
      if (0 >= t1.length)
        throw $.ioore(0);
      t1.pop();
      return true;
    } else
      return false;
  },
  stringifyJsonValue$1$bailout: function(state0, object) {
    switch (state0) {
      case 0:
        t1 = {};
      case 1:
        var t1, t2, i;
        if (state0 === 0 && typeof object === "number") {
          t1 = this.sb;
          t2 = $.JSNumber_methods.toString$0(object);
          t1._contents = t1._contents + t2;
          return true;
        } else
          switch (state0) {
            case 0:
            case 1:
              if (state0 === 0 && object === true) {
                t1 = this.sb;
                t1._contents = t1._contents + "true";
                return true;
              } else
                switch (state0) {
                  case 0:
                  case 1:
                    if (state0 === 0 && object === false) {
                      t1 = this.sb;
                      t1._contents = t1._contents + "false";
                      return true;
                    } else
                      switch (state0) {
                        case 0:
                        case 1:
                          if (state0 === 0 && object == null) {
                            t1 = this.sb;
                            t1._contents = t1._contents + "null";
                            return true;
                          } else
                            switch (state0) {
                              case 0:
                              case 1:
                                if (state0 === 0 && typeof object === "string") {
                                  t1 = this.sb;
                                  t1._contents = t1._contents + "\"";
                                  $._JsonStringifier_escape(t1, object);
                                  t1._contents = t1._contents + "\"";
                                  return true;
                                } else
                                  switch (state0) {
                                    case 0:
                                    case 1:
                                      if (state0 === 1 || state0 === 0 && typeof object === "object" && object !== null && (object.constructor === Array || !!$.getInterceptor(object).$isList))
                                        switch (state0) {
                                          case 0:
                                          case 1:
                                            state0 = 0;
                                            this.checkCycle$1(object);
                                            t1 = this.sb;
                                            t1._contents = t1._contents + "[";
                                            t2 = $.getInterceptor$asx(object);
                                            if ($.$gt$n(t2.get$length(object), 0)) {
                                              this.stringifyValue$1(t2.$index(object, 0));
                                              for (i = 1; $.JSNumber_methods.$lt(i, t2.get$length(object)); ++i) {
                                                t1._contents = t1._contents + ",";
                                                this.stringifyValue$1(t2.$index(object, i));
                                              }
                                            }
                                            t1._contents = t1._contents + "]";
                                            t1 = this.seen;
                                            if (0 >= t1.length)
                                              throw $.ioore(0);
                                            t1.pop();
                                            return true;
                                        }
                                      else if (typeof object === "object" && object !== null && !!$.getInterceptor(object).$isMap) {
                                        this.checkCycle$1(object);
                                        t2 = this.sb;
                                        t2._contents = t2._contents + "{";
                                        t1.first_0 = true;
                                        object.forEach$1(object, new $._JsonStringifier_stringifyJsonValue_anon(t1, this));
                                        t2._contents = t2._contents + "}";
                                        t1 = this.seen;
                                        if (0 >= t1.length)
                                          throw $.ioore(0);
                                        t1.pop();
                                        return true;
                                      } else
                                        return false;
                                  }
                            }
                      }
                }
          }
    }
  }
};

$$._JsonStringifier_stringifyJsonValue_anon = {
  "": function _JsonStringifier_stringifyJsonValue_anon(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  },
  "super": "Closure",
  call$2: function(key, value) {
    var t1, t2, t3;
    t1 = this.box_0;
    t2 = t1.first_0;
    t3 = this.this_1;
    if (!t2) {
      t2 = t3.get$sb();
      t2._contents = t2._contents + ",\"";
    } else {
      t2 = t3.get$sb();
      t2._contents = t2._contents + "\"";
    }
    t2 = this.this_1;
    $._JsonStringifier_escape(t2.get$sb(), key);
    t3 = t2.get$sb();
    t3._contents = t3._contents + "\":";
    t2.stringifyValue$1(value);
    t1.first_0 = false;
  }
};

$$._AttributeClassSet = {
  "": function _AttributeClassSet(_liblib3$_element) {
    this._liblib3$_element = _liblib3$_element;
  },
  "super": "CssClassSet",
  readClasses$0: function() {
    var classname, s, t1, trimmed;
    classname = $.get$attributes$x(this._liblib3$_element)._liblib2$_element.getAttribute("class");
    s = $.LinkedHashSet$($.JSString);
    if (classname == null)
      return s;
    for (t1 = $.JSArray_methods.get$iterator($.split$1$s(classname, " ")); t1.moveNext$0();) {
      trimmed = $.trim$0$s(t1.get$current());
      if (!$.JSString_methods.get$isEmpty(trimmed))
        s.add$1(s, trimmed);
    }
    return s;
  },
  writeClasses$1: function(s) {
    var t1 = $.get$attributes$x(this._liblib3$_element);
    t1.$indexSet(t1, "class", s.join$1(s, " "));
  }
};

$$.Endianness = {
  "": function Endianness(_littleEndian) {
    this._littleEndian = _littleEndian;
  },
  "super": "Object"
};

// Native classes
$$._WorkerStub = {
  "": function _WorkerStub() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$id: function(receiver) {
    return receiver.id;
  },
  set$id: function(receiver, i) {
    receiver.id = i;
  },
  set$onmessage: function(receiver, f) {
    receiver.onmessage = f;
  },
  postMessage$1: function(receiver, msg) {
    receiver.postMessage(msg);
  },
  terminate$0: function(receiver) {
    receiver.terminate();
  }
};

$$._HTMLElement = {
  "": function _HTMLElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.AnchorElement = {
  "": function AnchorElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$target: function(receiver) {
    return receiver.target;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.AnimationEvent = {
  "": function AnimationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.AreaElement = {
  "": function AreaElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$target: function(receiver) {
    return receiver.target;
  }
};

$$.Attr = {
  "": function Attr() {
    throw "Called unused constructor";
  },
  "super": "Node"
};

$$.AudioElement = {
  "": function AudioElement() {
    throw "Called unused constructor";
  },
  "super": "MediaElement"
};

$$.AutocompleteErrorEvent = {
  "": function AutocompleteErrorEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.BRElement = {
  "": function BRElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.BaseElement = {
  "": function BaseElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$target: function(receiver) {
    return receiver.target;
  }
};

$$.BeforeLoadEvent = {
  "": function BeforeLoadEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.Blob = {
  "": function Blob() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.BodyElement = {
  "": function BodyElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.ButtonElement = {
  "": function ButtonElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.CDataSection = {
  "": function CDataSection() {
    throw "Called unused constructor";
  },
  "super": "Text"
};

$$.CanvasElement = {
  "": function CanvasElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.CharacterData = {
  "": function CharacterData() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$data: function(receiver) {
    return receiver.data;
  },
  get$length: function(receiver) {
    return receiver.length;
  }
};

$$.CloseEvent = {
  "": function CloseEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.Comment = {
  "": function Comment() {
    throw "Called unused constructor";
  },
  "super": "CharacterData"
};

$$.CompositionEvent = {
  "": function CompositionEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$data: function(receiver) {
    return receiver.data;
  }
};

$$.ContentElement = {
  "": function ContentElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.CssFontFaceLoadEvent = {
  "": function CssFontFaceLoadEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.CssStyleDeclaration = {
  "": function CssStyleDeclaration() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$length: function(receiver) {
    return receiver.length;
  }
};

$$.CustomElementConstructor = {
  "": function CustomElementConstructor() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.CustomEvent = {
  "": function CustomEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.DListElement = {
  "": function DListElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.DataListElement = {
  "": function DataListElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.DetailsElement = {
  "": function DetailsElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.DeviceMotionEvent = {
  "": function DeviceMotionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.DeviceOrientationEvent = {
  "": function DeviceOrientationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.DialogElement = {
  "": function DialogElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.DirectoryEntry = {
  "": function DirectoryEntry() {
    throw "Called unused constructor";
  },
  "super": "Entry",
  __getFile$4$errorCallback$options$successCallback: function(receiver, path, errorCallback, options, successCallback) {
    var t1, t2, t3;
    t1 = $ === errorCallback;
    if (t1)
      errorCallback = null;
    t2 = $ === options;
    if (t2)
      options = null;
    t3 = $ === successCallback;
    if (t3)
      successCallback = null;
    if (!t1) {
      this.___getFile_1$4(receiver, path, $.convertDartToNative_Dictionary(options), successCallback, errorCallback);
      return;
    }
    if (!t3) {
      this.___getFile_2$3(receiver, path, $.convertDartToNative_Dictionary(options), successCallback);
      return;
    }
    if (!t2) {
      receiver.getFile(path, $.convertDartToNative_Dictionary(options));
      return;
    }
    receiver.getFile(path);
    return;
  },
  ___getFile_1$4: function(receiver, path, options, successCallback, errorCallback) {
    return receiver.getFile(path, options, $.convertDartClosureToJS(successCallback, 1), $.convertDartClosureToJS(errorCallback, 1));
  },
  ___getFile_2$3: function(receiver, path, options, successCallback) {
    return receiver.getFile(path, options, $.convertDartClosureToJS(successCallback, 1));
  },
  _getFile$2$options: function(receiver, path, options) {
    var completer = $._CompleterImpl$();
    this.__getFile$4$errorCallback$options$successCallback(receiver, path, new $.DirectoryEntry__getFile_anon(completer), options, new $.DirectoryEntry__getFile_anon0(completer));
    return completer.future;
  },
  _getFile$1: function($receiver, path) {
    return this._getFile$2$options($receiver, path, null);
  }
};

$$.DirectoryReader = {
  "": function DirectoryReader() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  _readEntries$2: function(receiver, successCallback, errorCallback) {
    return receiver.readEntries($.convertDartClosureToJS(successCallback, 1), $.convertDartClosureToJS(errorCallback, 1));
  },
  readEntries$0: function(receiver) {
    var completer = $._CompleterImpl$();
    this._readEntries$2(receiver, new $.DirectoryReader_readEntries_anon(completer), new $.DirectoryReader_readEntries_anon0(completer));
    return completer.future;
  }
};

$$.DivElement = {
  "": function DivElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.Document = {
  "": function Document() {
    throw "Called unused constructor";
  },
  "super": "Node",
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  register$2: function(receiver, $name, options) {
    var t1 = $ === options;
    if (t1)
      options = null;
    if (!t1)
      return receiver.webkitRegister($name, $.convertDartToNative_Dictionary(options));
    return receiver.webkitRegister($name);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.DocumentFragment = {
  "": function DocumentFragment() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$children: function(receiver) {
    if (receiver._children == null)
      receiver._children = $.FilteredElementList$(receiver, null);
    return receiver._children;
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  set$innerHtml: function(receiver, value) {
    var t1, e, nodes;
    t1 = this.get$nodes(receiver);
    t1.clear$0(t1);
    e = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(e);
    t1.set$innerHtml(e, value);
    nodes = $.List_List$from(t1.get$nodes(e), true, null);
    t1 = this.get$nodes(receiver);
    t1.addAll$1(t1, nodes);
  }
};

$$.DocumentType = {
  "": function DocumentType() {
    throw "Called unused constructor";
  },
  "super": "Node"
};

$$.DomError = {
  "": function DomError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.DomException = {
  "": function DomException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    var errorName = receiver.name;
    if ($.Device_isWebKit() === true && errorName === "SECURITY_ERR")
      return "SecurityError";
    if ($.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
      return "SyntaxError";
    return errorName;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.Element = {
  "": function Element() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$$$dom_children: function(receiver) {
    return receiver.children;
  },
  get$id: function(receiver) {
    return receiver.id;
  },
  set$innerHtml: function(receiver, v) {
    receiver.innerHTML = v;
  },
  get$attributes: function(receiver) {
    return $._ElementAttributeMap$(receiver);
  },
  get$children: function(receiver) {
    return $._ChildrenElementList$_wrap(receiver);
  },
  get$classes: function(receiver) {
    return $._ElementCssClassSet$(receiver);
  },
  query$1: function(receiver, selectors) {
    return receiver.querySelector(selectors);
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  },
  $isElement: true,
  $asElement: null
};

$$.EmbedElement = {
  "": function EmbedElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.Entry = {
  "": function Entry() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  _remove$2: function(receiver, successCallback, errorCallback) {
    return receiver.remove($.convertDartClosureToJS(successCallback, 0), $.convertDartClosureToJS(errorCallback, 1));
  },
  remove$0: function(receiver) {
    var completer = $._CompleterImpl$();
    this._remove$2(receiver, new $.Entry_remove_anon(completer), new $.Entry_remove_anon0(completer));
    return completer.future;
  }
};

$$.ErrorEvent = {
  "": function ErrorEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.Event = {
  "": function Event() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$target: function(receiver) {
    return $._convertNativeToDart_EventTarget(receiver.target);
  },
  preventDefault$0: function(receiver) {
    return receiver.preventDefault();
  }
};

$$.EventException = {
  "": function EventException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.EventTarget = {
  "": function EventTarget() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  }
};

$$.FieldSetElement = {
  "": function FieldSetElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.File = {
  "": function File() {
    throw "Called unused constructor";
  },
  "super": "Blob",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.FileEntry = {
  "": function FileEntry() {
    throw "Called unused constructor";
  },
  "super": "Entry",
  _createWriter$2: function(receiver, successCallback, errorCallback) {
    return receiver.createWriter($.convertDartClosureToJS(successCallback, 1), $.convertDartClosureToJS(errorCallback, 1));
  },
  createWriter$0: function(receiver) {
    var completer = $._CompleterImpl$();
    this._createWriter$2(receiver, new $.FileEntry_createWriter_anon(completer), new $.FileEntry_createWriter_anon0(completer));
    return completer.future;
  },
  _file$2: function(receiver, successCallback, errorCallback) {
    return receiver.file($.convertDartClosureToJS(successCallback, 1), $.convertDartClosureToJS(errorCallback, 1));
  },
  file$0: function(receiver) {
    var completer = $._CompleterImpl$();
    this._file$2(receiver, new $.FileEntry_file_anon(completer), new $.FileEntry_file_anon0(completer));
    return completer.future;
  }
};

$$.FileError = {
  "": function FileError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.FileException = {
  "": function FileException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.FileReader = {
  "": function FileReader() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$result: function(receiver) {
    return receiver.result;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  get$onLoadEnd: function(receiver) {
    return $.EventStreamProvider_loadend.forTarget$1(receiver);
  }
};

$$.FileSystem = {
  "": function FileSystem() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$root: function(receiver) {
    return receiver.root;
  }
};

$$.FileWriter = {
  "": function FileWriter() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$length: function(receiver) {
    return receiver.length;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  truncate$1: function(receiver, size) {
    return receiver.truncate(size);
  },
  write$1: function(receiver, data) {
    return receiver.write(data);
  },
  get$onWriteEnd: function(receiver) {
    return $.EventStreamProvider_writeend.forTarget$1(receiver);
  }
};

$$.FocusEvent = {
  "": function FocusEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent"
};

$$.FormElement = {
  "": function FormElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$length: function(receiver) {
    return receiver.length;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  get$target: function(receiver) {
    return receiver.target;
  }
};

$$.HRElement = {
  "": function HRElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.HashChangeEvent = {
  "": function HashChangeEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.HeadElement = {
  "": function HeadElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.HeadingElement = {
  "": function HeadingElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.HtmlCollection = {
  "": function HtmlCollection() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.HtmlDocument = {
  "": function HtmlDocument() {
    throw "Called unused constructor";
  },
  "super": "Document",
  get$body: function(receiver) {
    return receiver.body;
  }
};

$$.HtmlElement = {
  "": function HtmlElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.HtmlFormControlsCollection = {
  "": function HtmlFormControlsCollection() {
    throw "Called unused constructor";
  },
  "super": "HtmlCollection"
};

$$.HtmlOptionsCollection = {
  "": function HtmlOptionsCollection() {
    throw "Called unused constructor";
  },
  "super": "HtmlCollection"
};

$$.HttpRequestException = {
  "": function HttpRequestException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.HttpRequestProgressEvent = {
  "": function HttpRequestProgressEvent() {
    throw "Called unused constructor";
  },
  "super": "ProgressEvent"
};

$$.IFrameElement = {
  "": function IFrameElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.ImageElement = {
  "": function ImageElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.InputElement = {
  "": function InputElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  },
  $isElement: true,
  $asElement: null
};

$$.KeyboardEvent = {
  "": function KeyboardEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent"
};

$$.KeygenElement = {
  "": function KeygenElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.LIElement = {
  "": function LIElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.LabelElement = {
  "": function LabelElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.LegendElement = {
  "": function LegendElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.LinkElement = {
  "": function LinkElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.MapElement = {
  "": function MapElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.MediaElement = {
  "": function MediaElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.MediaError = {
  "": function MediaError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.MediaKeyError = {
  "": function MediaKeyError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.MediaKeyEvent = {
  "": function MediaKeyEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.MediaStreamEvent = {
  "": function MediaStreamEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.MediaStreamTrackEvent = {
  "": function MediaStreamTrackEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.MenuElement = {
  "": function MenuElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.MessageEvent = {
  "": function MessageEvent() {
    throw "Called unused constructor";
  },
  "super": "Event",
  get$data: function(receiver) {
    return $.convertNativeToDart_SerializedScriptValue(receiver.data);
  }
};

$$.MetaElement = {
  "": function MetaElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$content: function(receiver) {
    return receiver.content;
  },
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.MeterElement = {
  "": function MeterElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.ModElement = {
  "": function ModElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.MouseEvent = {
  "": function MouseEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent"
};

$$.MutationEvent = {
  "": function MutationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.Navigator = {
  "": function Navigator() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.NavigatorUserMediaError = {
  "": function NavigatorUserMediaError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.Node = {
  "": function Node() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  set$text: function(receiver, v) {
    receiver.textContent = v;
  },
  get$nodes: function(receiver) {
    return $._ChildNodeListLazy$(receiver);
  },
  remove$0: function(receiver) {
    var t1 = receiver.parentNode;
    if (t1 != null)
      t1.removeChild(receiver);
  },
  replaceWith$1: function(receiver, otherNode) {
    var $parent, exception;
    try {
      $parent = receiver.parentNode;
      $.$$dom_replaceChild$2$x($parent, otherNode, receiver);
    } catch (exception) {
      $.unwrapException(exception);
    }

    return receiver;
  },
  toString$0: function(receiver) {
    var t1 = receiver.localName;
    if (t1 == null) {
      t1 = receiver.nodeValue;
      if (t1 == null)
        t1 = $.Interceptor.prototype.toString$0.call(this, receiver);
    }
    return t1;
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  append$1: function(receiver, newChild) {
    return receiver.appendChild(newChild);
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_replaceChild$2: function(receiver, newChild, oldChild) {
    return receiver.replaceChild(newChild, oldChild);
  }
};

$$.NodeList = {
  "": function NodeList() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Notation = {
  "": function Notation() {
    throw "Called unused constructor";
  },
  "super": "Node"
};

$$.OListElement = {
  "": function OListElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.ObjectElement = {
  "": function ObjectElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$data: function(receiver) {
    return receiver.data;
  },
  get$name: function(receiver) {
    return receiver.name;
  }
};

$$.OptGroupElement = {
  "": function OptGroupElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.OptionElement = {
  "": function OptionElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.OutputElement = {
  "": function OutputElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.OverflowEvent = {
  "": function OverflowEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.PageTransitionEvent = {
  "": function PageTransitionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.ParagraphElement = {
  "": function ParagraphElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.ParamElement = {
  "": function ParamElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.PopStateEvent = {
  "": function PopStateEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.PositionError = {
  "": function PositionError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.PreElement = {
  "": function PreElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.ProcessingInstruction = {
  "": function ProcessingInstruction() {
    throw "Called unused constructor";
  },
  "super": "Node",
  get$data: function(receiver) {
    return receiver.data;
  },
  get$target: function(receiver) {
    return receiver.target;
  }
};

$$.ProgressElement = {
  "": function ProgressElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.ProgressEvent = {
  "": function ProgressEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.QuoteElement = {
  "": function QuoteElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.RangeException = {
  "": function RangeException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.RtcDataChannelEvent = {
  "": function RtcDataChannelEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.RtcDtmfToneChangeEvent = {
  "": function RtcDtmfToneChangeEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.RtcIceCandidateEvent = {
  "": function RtcIceCandidateEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.ScriptElement = {
  "": function ScriptElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.SecurityPolicyViolationEvent = {
  "": function SecurityPolicyViolationEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.SelectElement = {
  "": function SelectElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$length: function(receiver) {
    return receiver.length;
  },
  get$name: function(receiver) {
    return receiver.name;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.ShadowElement = {
  "": function ShadowElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.ShadowRoot = {
  "": function ShadowRoot() {
    throw "Called unused constructor";
  },
  "super": "DocumentFragment",
  set$innerHtml: function(receiver, v) {
    receiver.innerHTML = v;
  },
  clone$1: function(receiver, deep) {
    return receiver.cloneNode(deep);
  }
};

$$.SourceElement = {
  "": function SourceElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.SpanElement = {
  "": function SpanElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.SpeechInputEvent = {
  "": function SpeechInputEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.SpeechRecognitionError = {
  "": function SpeechRecognitionError() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.SpeechRecognitionEvent = {
  "": function SpeechRecognitionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.StorageEvent = {
  "": function StorageEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.StyleElement = {
  "": function StyleElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TableCaptionElement = {
  "": function TableCaptionElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TableCellElement = {
  "": function TableCellElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TableColElement = {
  "": function TableColElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TableElement = {
  "": function TableElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TableRowElement = {
  "": function TableRowElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TableSectionElement = {
  "": function TableSectionElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TemplateElement = {
  "": function TemplateElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$content: function(receiver) {
    return receiver.content;
  }
};

$$.Text = {
  "": function Text() {
    throw "Called unused constructor";
  },
  "super": "CharacterData"
};

$$.TextAreaElement = {
  "": function TextAreaElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$value: function(receiver) {
    return receiver.value;
  },
  set$value: function(receiver, v) {
    receiver.value = v;
  }
};

$$.TextEvent = {
  "": function TextEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent",
  get$data: function(receiver) {
    return receiver.data;
  }
};

$$.TitleElement = {
  "": function TitleElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TouchEvent = {
  "": function TouchEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent"
};

$$.TrackElement = {
  "": function TrackElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.TrackEvent = {
  "": function TrackEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.TransitionEvent = {
  "": function TransitionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.UIEvent = {
  "": function UIEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.UListElement = {
  "": function UListElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.UnknownElement = {
  "": function UnknownElement() {
    throw "Called unused constructor";
  },
  "super": "Element"
};

$$.VideoElement = {
  "": function VideoElement() {
    throw "Called unused constructor";
  },
  "super": "MediaElement"
};

$$.WebSocket = {
  "": function WebSocket() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  send$1: function(receiver, data) {
    return receiver.send(data);
  },
  get$onClose: function(receiver) {
    return $.EventStreamProvider_close.forTarget$1(receiver);
  },
  get$onError: function(receiver) {
    return $.EventStreamProvider_error.forTarget$1(receiver);
  },
  get$onMessage: function(receiver) {
    return $.EventStreamProvider_message.forTarget$1(receiver);
  },
  get$onOpen: function(receiver) {
    return $.EventStreamProvider_open.forTarget$1(receiver);
  }
};

$$.WheelEvent = {
  "": function WheelEvent() {
    throw "Called unused constructor";
  },
  "super": "MouseEvent"
};

$$.Window = {
  "": function Window() {
    throw "Called unused constructor";
  },
  "super": "EventTarget",
  get$name: function(receiver) {
    return receiver.name;
  },
  get$document: function(receiver) {
    return receiver.document;
  },
  get$console: function(receiver) {
    return $.get$Console_safeConsole();
  },
  requestFileSystem$2$persistent: function(receiver, size, persistent) {
    return this._requestFileSystem$2(receiver, persistent ? 1 : 0, size);
  },
  requestFileSystem$1: function($receiver, size) {
    return this.requestFileSystem$2$persistent($receiver, size, false);
  },
  $$dom_addEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.addEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  $$dom_removeEventListener$3: function(receiver, type, listener, useCapture) {
    return receiver.removeEventListener(type, $.convertDartClosureToJS(listener, 1), useCapture);
  },
  toString$0: function(receiver) {
    return receiver.toString();
  },
  __requestFileSystem$4: function(receiver, type, size, successCallback, errorCallback) {
    return receiver.webkitRequestFileSystem(type, size, $.convertDartClosureToJS(successCallback, 1), $.convertDartClosureToJS(errorCallback, 1));
  },
  _requestFileSystem$2: function(receiver, type, size) {
    var completer = $._CompleterImpl$();
    this.__requestFileSystem$4(receiver, type, size, new $.Window__requestFileSystem_anon(completer), new $.Window__requestFileSystem_anon0(completer));
    return completer.future;
  },
  get$onClick: function(receiver) {
    return $.EventStreamProvider_click.forTarget$1(receiver);
  }
};

$$.XPathException = {
  "": function XPathException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$._EntryArray = {
  "": function _EntryArray() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Entry);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.Entry]; },
  $isIterable: true,
  $asIterable: function() { return [$.Entry]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$._NamedNodeMap = {
  "": function _NamedNodeMap() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    throw $.wrapException($.UnsupportedError$("Cannot assign element of immutable List."));
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.Node);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.Node]; },
  $isIterable: true,
  $asIterable: function() { return [$.Node]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.VersionChangeEvent = {
  "": function VersionChangeEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.AElement = {
  "": function AElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$target: function(receiver) {
    return receiver.target;
  }
};

$$.AltGlyphElement = {
  "": function AltGlyphElement() {
    throw "Called unused constructor";
  },
  "super": "TextPositioningElement"
};

$$.AnimateElement = {
  "": function AnimateElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.AnimateMotionElement = {
  "": function AnimateMotionElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.AnimateTransformElement = {
  "": function AnimateTransformElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.AnimatedNumberList = {
  "": function AnimatedNumberList() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.AnimatedString = {
  "": function AnimatedString() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.AnimationElement = {
  "": function AnimationElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.CircleElement = {
  "": function CircleElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.ClipPathElement = {
  "": function ClipPathElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.DefsElement = {
  "": function DefsElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.DescElement = {
  "": function DescElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.EllipseElement = {
  "": function EllipseElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.FEBlendElement = {
  "": function FEBlendElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEColorMatrixElement = {
  "": function FEColorMatrixElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEComponentTransferElement = {
  "": function FEComponentTransferElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FECompositeElement = {
  "": function FECompositeElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEConvolveMatrixElement = {
  "": function FEConvolveMatrixElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEDiffuseLightingElement = {
  "": function FEDiffuseLightingElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEDisplacementMapElement = {
  "": function FEDisplacementMapElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEDistantLightElement = {
  "": function FEDistantLightElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.FEFloodElement = {
  "": function FEFloodElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEFuncAElement = {
  "": function FEFuncAElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEFuncBElement = {
  "": function FEFuncBElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEFuncGElement = {
  "": function FEFuncGElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEFuncRElement = {
  "": function FEFuncRElement() {
    throw "Called unused constructor";
  },
  "super": "_SVGComponentTransferFunctionElement"
};

$$.FEGaussianBlurElement = {
  "": function FEGaussianBlurElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEImageElement = {
  "": function FEImageElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEMergeElement = {
  "": function FEMergeElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEMergeNodeElement = {
  "": function FEMergeNodeElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.FEMorphologyElement = {
  "": function FEMorphologyElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEOffsetElement = {
  "": function FEOffsetElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FEPointLightElement = {
  "": function FEPointLightElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.FESpecularLightingElement = {
  "": function FESpecularLightingElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FESpotLightElement = {
  "": function FESpotLightElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.FETileElement = {
  "": function FETileElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FETurbulenceElement = {
  "": function FETurbulenceElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement",
  get$result: function(receiver) {
    return receiver.result;
  }
};

$$.FilterElement = {
  "": function FilterElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.ForeignObjectElement = {
  "": function ForeignObjectElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.GElement = {
  "": function GElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.ImageElement0 = {
  "": function ImageElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.LineElement = {
  "": function LineElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.LinearGradientElement = {
  "": function LinearGradientElement() {
    throw "Called unused constructor";
  },
  "super": "_GradientElement"
};

$$.MarkerElement = {
  "": function MarkerElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.MaskElement = {
  "": function MaskElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.MetadataElement = {
  "": function MetadataElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.PathElement = {
  "": function PathElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.PatternElement = {
  "": function PatternElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.PolygonElement = {
  "": function PolygonElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.PolylineElement = {
  "": function PolylineElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.RadialGradientElement = {
  "": function RadialGradientElement() {
    throw "Called unused constructor";
  },
  "super": "_GradientElement"
};

$$.RectElement = {
  "": function RectElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.ScriptElement0 = {
  "": function ScriptElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.SetElement = {
  "": function SetElement() {
    throw "Called unused constructor";
  },
  "super": "AnimationElement"
};

$$.StopElement = {
  "": function StopElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.StyleElement0 = {
  "": function StyleElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.StyledElement = {
  "": function StyledElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.SvgDocument = {
  "": function SvgDocument() {
    throw "Called unused constructor";
  },
  "super": "Document"
};

$$.SvgElement = {
  "": function SvgElement() {
    throw "Called unused constructor";
  },
  "super": "Element",
  get$classes: function(receiver) {
    if (receiver._cssClassSet == null)
      receiver._cssClassSet = $._AttributeClassSet$(receiver);
    return receiver._cssClassSet;
  },
  get$children: function(receiver) {
    return $.FilteredElementList$(receiver, null);
  },
  set$children: function(receiver, value) {
    var children = this.get$children(receiver);
    children.clear$0(children);
    children.addAll$1(children, value);
  },
  set$innerHtml: function(receiver, svg) {
    var container, t1;
    container = $.Element_Element$tag("div");
    t1 = $.getInterceptor$x(container);
    t1.set$innerHtml(container, "<svg version=\"1.1\">" + $.S(svg) + "</svg>");
    this.set$children(receiver, $.get$children$x($.$index$asx(t1.get$children(container), 0)));
  },
  get$$$dom_children: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot get dom_children on SVG."));
  },
  get$id: function(receiver) {
    return receiver.id;
  }
};

$$.SvgException = {
  "": function SvgException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor",
  get$name: function(receiver) {
    return receiver.name;
  },
  toString$0: function(receiver) {
    return receiver.toString();
  }
};

$$.SvgSvgElement = {
  "": function SvgSvgElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.SwitchElement = {
  "": function SwitchElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.SymbolElement = {
  "": function SymbolElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.TSpanElement = {
  "": function TSpanElement() {
    throw "Called unused constructor";
  },
  "super": "TextPositioningElement"
};

$$.TextContentElement = {
  "": function TextContentElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.TextElement = {
  "": function TextElement() {
    throw "Called unused constructor";
  },
  "super": "TextPositioningElement"
};

$$.TextPathElement = {
  "": function TextPathElement() {
    throw "Called unused constructor";
  },
  "super": "TextContentElement"
};

$$.TextPositioningElement = {
  "": function TextPositioningElement() {
    throw "Called unused constructor";
  },
  "super": "TextContentElement"
};

$$.TitleElement0 = {
  "": function TitleElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.UseElement = {
  "": function UseElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$.ViewElement = {
  "": function ViewElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.ZoomEvent = {
  "": function ZoomEvent() {
    throw "Called unused constructor";
  },
  "super": "UIEvent"
};

$$._GradientElement = {
  "": function _GradientElement() {
    throw "Called unused constructor";
  },
  "super": "StyledElement"
};

$$._SVGComponentTransferFunctionElement = {
  "": function _SVGComponentTransferFunctionElement() {
    throw "Called unused constructor";
  },
  "super": "SvgElement"
};

$$.ByteBuffer = {
  "": function ByteBuffer() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.TypedData = {
  "": function TypedData() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.ByteData = {
  "": function ByteData() {
    throw "Called unused constructor";
  },
  "super": "TypedData"
};

$$.Float32List = {
  "": function Float32List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSNumber);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Float64List = {
  "": function Float64List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSNumber);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSDouble]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSDouble]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int16List = {
  "": function Int16List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int32List = {
  "": function Int32List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Int8List = {
  "": function Int8List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint16List = {
  "": function Uint16List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint32List = {
  "": function Uint32List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8ClampedList = {
  "": function Uint8ClampedList() {
    throw "Called unused constructor";
  },
  "super": "Uint8List",
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout1(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout1: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout1(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout1: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.Uint8List = {
  "": function Uint8List() {
    throw "Called unused constructor";
  },
  "super": "TypedData",
  get$length: function(receiver) {
    return receiver.length;
  },
  $index: function(receiver, index) {
    var t1;
    if (typeof index !== "number")
      return this.$$index$bailout(1, index, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    return receiver[index];
  },
  $$index$bailout: function(state0, index, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    return receiver[index];
  },
  $indexSet: function(receiver, index, value) {
    var t1;
    if (typeof index !== "number")
      return this.$$indexSet$bailout(1, index, value, receiver);
    t1 = receiver.length;
    if (index >>> 0 != index || index >= t1)
      if (index < 0 || index >= t1)
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    receiver[index] = value;
  },
  $$indexSet$bailout: function(state0, index, value, receiver) {
    var t1, t2;
    t1 = receiver.length;
    if (index >>> 0 != index || $.$ge$n(index, t1)) {
      t2 = $.getInterceptor$n(index);
      if (t2.$lt(index, 0) || t2.$ge(index, t1))
        $.throwExpression($.RangeError$range(index, 0, t1));
      else
        $.throwExpression($.ArgumentError$("Invalid list index " + $.S(index)));
    }
    receiver[index] = value;
  },
  get$iterator: function(receiver) {
    return $.FixedSizeListIterator$(receiver);
  },
  forEach$1: function(receiver, f) {
    return $.IterableMixinWorkaround_forEach(receiver, f);
  },
  toList$1$growable: function(receiver, growable) {
    return $.List_List$from(receiver, growable, $.JSInt);
  },
  toList$0: function($receiver) {
    return this.toList$1$growable($receiver, true);
  },
  get$isEmpty: function(receiver) {
    return receiver.length === 0;
  },
  skip$1: function(receiver, n) {
    return $.SubListIterable$(receiver, n, null, null);
  },
  elementAt$1: function(receiver, index) {
    if (index >>> 0 !== index || index >= receiver.length)
      throw $.ioore(index);
    return receiver[index];
  },
  add$1: function(receiver, value) {
    throw $.wrapException($.UnsupportedError$("Cannot add to immutable List."));
  },
  removeLast$0: function(receiver) {
    throw $.wrapException($.UnsupportedError$("Cannot remove from immutable List."));
  },
  sublist$2: function(receiver, start, end) {
    if (end == null)
      end = receiver.length;
    return $.Lists_getRange(receiver, start, end, []);
  },
  sublist$1: function($receiver, start) {
    return this.sublist$2($receiver, start, null);
  },
  toString$0: function(receiver) {
    var buffer = $.StringBuffer$("[");
    buffer.writeAll$2(receiver, ", ");
    buffer._contents = buffer._contents + "]";
    return buffer._contents;
  },
  $isList: true,
  $asList: function() { return [$.JSInt]; },
  $isIterable: true,
  $asIterable: function() { return [$.JSInt]; },
  $isJavaScriptIndexingBehavior: true,
  $asJavaScriptIndexingBehavior: null
};

$$.AudioProcessingEvent = {
  "": function AudioProcessingEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.OfflineAudioCompletionEvent = {
  "": function OfflineAudioCompletionEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.ContextEvent = {
  "": function ContextEvent() {
    throw "Called unused constructor";
  },
  "super": "Event"
};

$$.SqlError = {
  "": function SqlError() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

$$.SqlException = {
  "": function SqlException() {
    throw "Called unused constructor";
  },
  "super": "Interceptor"
};

// Bound closures
$$.BoundClosure$1 = {
  "": function BoundClosure$1(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$1: function(p0) {
    return this.self[this.target](p0);
  }
};

$$.BoundClosure$0 = {
  "": function BoundClosure$0(self, target) {
    this.self = self;
    this.target = target;
  },
  "super": "Closure",
  call$0: function() {
    return this.self[this.target]();
  }
};

Isolate.$finishClasses($$, $, null);
$$ = null;

$.FileManager__success = function(filesystem) {
  $.Primitives_printString(">>> _success");
  $.FileManager__filesystem = filesystem;
  $.FileManager_updateFileList();
};

$.FileManager__error = function(error) {
  $.Primitives_printString(">>> _error");
  if ($.Window_methods.get$console(window).get$_isConsoleDefined())
    console.log(error);
};

$.FileManager_addFile = function(filename, fileContents) {
  $.Primitives_printString(">>> addFile");
  $._getFile$2$options$x($.get$root$x($.FileManager__filesystem), filename, $.makeLiteralMap(["create", true, "exclusive", false])).then$1(new $.FileManager_addFile_anon(fileContents));
};

$.FileManager_removeFileByName = function(filename) {
  $.Primitives_printString($.JSString_methods.$add(">>>>> removeFileByName: ", filename));
  $._getFile$1$x($.get$root$x($.FileManager__filesystem), filename).then$1(new $.FileManager_removeFileByName_anon());
};

$.FileManager_updateFileList = function() {
  $.Primitives_printString(">>> updateFileList");
  var ul = $.get$MainSection_element().querySelector("#fileList");
  $.set$innerHtml$x(ul, "");
  $.readEntries$0$x($.get$root$x($.FileManager__filesystem).createReader()).then$1(new $.FileManager_updateFileList_anon(ul));
};

$.FileManager_sendToCloud = function() {
  $.Primitives_printString(">>> sendToCloud");
  $.readEntries$0$x($.get$root$x($.FileManager__filesystem).createReader()).then$1(new $.FileManager_sendToCloud_anon());
  return;
};

$.FileManager_updateStructure = function(structure) {
  var filenames;
  $.Primitives_printString(">>> updateStructure");
  filenames = $.$index$asx(structure, "rootDir");
  $.readEntries$0$x($.get$root$x($.FileManager__filesystem).createReader()).then$1(new $.FileManager_updateStructure_anon(filenames));
};

$.CloudSocket_init = function() {
  $.CloudSocket_ws = $.WebSocket_WebSocket("ws://192.168.10.109:8080", $);
  var t1 = $.get$onOpen$x($.CloudSocket_ws);
  $._EventStreamSubscription$(t1._target, t1._eventType, $.CloudSocket_onOpen, t1._useCapture);
  t1 = $.get$onMessage$x($.CloudSocket_ws);
  $._EventStreamSubscription$(t1._target, t1._eventType, $.CloudSocket_onMessage, t1._useCapture);
  t1 = $.get$onError$x($.CloudSocket_ws);
  $._EventStreamSubscription$(t1._target, t1._eventType, $.CloudSocket_onError, t1._useCapture);
  t1 = $.get$onClose$x($.CloudSocket_ws);
  $._EventStreamSubscription$(t1._target, t1._eventType, $.CloudSocket_onClose, t1._useCapture);
  t1 = $.get$onClick$x(document.querySelector("#setAsBaseBtn"));
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.CloudSocket_init_anon(), t1._useCapture);
  t1 = $.get$onClick$x(document.querySelector("#requestBtn"));
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.CloudSocket_init_anon0(), t1._useCapture);
};

$.CloudSocket_onOpen = function($event) {
  var data, t1, output;
  $.Primitives_printString("WebSocket opened");
  data = $.HashMap$(null, null);
  data.$indexSet(data, "message", "I'm connected");
  t1 = $.CloudSocket_ws;
  output = $.StringBuffer$("");
  $._JsonStringifier$(output).stringifyValue$1(data);
  t1.send(output._contents);
};

$.CloudSocket_onMessage = function($event) {
  var t1, input;
  t1 = $.getInterceptor$x($event);
  $.Primitives_printString($.JSString_methods.$add("WebSocket message: ", t1.get$data($event)));
  input = $.parse(t1.get$data($event), null);
  t1 = $.getInterceptor$asx(input);
  if (t1.$index(input, "action") != null)
    switch (t1.$index(input, "action")) {
      case "getCloudStructure":
        $.FileManager_sendToCloud();
        break;
      case "updateStructure":
        $.FileManager_updateStructure(t1.$index(input, "structure"));
        break;
    }
};

$.CloudSocket_onError = function($event) {
  $.Primitives_printString("WebSocket error");
  window.alert("Error connecting to WebSocket.");
};

$.CloudSocket_onClose = function($event) {
  $.Primitives_printString("WebSocket closed");
  window.alert("WebSocket has been disconnected.");
};

$.MainNav_init = function() {
  var t1 = $.get$onClick$x($.get$MainNav_sendBtn());
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.MainNav_init_anon(), t1._useCapture);
};

$.MainNav_toggle = function($event) {
  $.preventDefault$0$x($event);
  $.get$classes$x($.get$MainNav_element()).toggle$1("displayed");
};

$.MainSection_init = function() {
  var t1 = $.get$onClick$x($.get$MainSection_menuBtn());
  $._EventStreamSubscription$(t1._target, t1._eventType, $.MainNav_toggle, t1._useCapture);
  t1 = $.get$onClick$x($.get$MainSection_createFileBtn());
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.MainSection_init_anon(), t1._useCapture);
};

$.TextFileEditorBox_show = function(filename, fileContents) {
  var _frag, t1, filenameInput, textarea, saveBtn, deleteBtn;
  $.Primitives_printString(">>> TextFileEditorBox.show(" + $.S(filename) + ", " + $.S(fileContents) + ")");
  _frag = $.clone$1$x($.get$content$x(document.querySelector("#template_textFileEditor")), true);
  t1 = $.getInterceptor$x(_frag);
  filenameInput = t1.query$1(_frag, ".filename");
  textarea = t1.query$1(_frag, ".fileContents");
  saveBtn = t1.query$1(_frag, ".saveBtn");
  deleteBtn = t1.query$1(_frag, ".deleteBtn");
  if (filename != null)
    $.set$value$x(filenameInput, filename);
  if (fileContents != null)
    textarea.textContent = fileContents;
  t1 = $.get$onClick$x(saveBtn);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.TextFileEditorBox_show_anon(filenameInput, textarea), t1._useCapture);
  t1 = $.get$onClick$x(deleteBtn);
  $._EventStreamSubscription$(t1._target, t1._eventType, new $.TextFileEditorBox_show_anon0(filename), t1._useCapture);
  $.get$body$x($.Window_methods.get$document(window)).appendChild(_frag);
};

$.main = function() {
  $.CloudSocket_init();
  $.Primitives_printString(">>> FileManager.init");
  $.Window_methods.requestFileSystem$1(window, 31457280).then$2$onError($.FileManager__success, $.FileManager__error);
  $.MainSection_init();
  $.MainNav_init();
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== "string" && (typeof src !== "object" || src === null || src.constructor !== Array && !$.getInterceptor(src).$isJavaScriptIndexingBehavior))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== "object" || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !$.getInterceptor(dst).$isJavaScriptIndexingBehavior)
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dstStart !== "number")
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i >>> 0 !== i || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j >>> 0 !== j || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j, t1;
  if ($.JSNumber_methods.$lt(srcStart, dstStart))
    for (i = srcStart + count - 1, j = $.$sub$n($.$add$ns(dstStart, count), 1), t1 = $.getInterceptor$asx(src); i >= srcStart; --i, j = $.$sub$n(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
  else
    for (t1 = $.getInterceptor$asx(src), j = dstStart, i = srcStart; i < srcStart + count; ++i, j = $.$add$ns(j, 1))
      $.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
};

$.SubListIterable$ = function(_iterable, _start, _endOrLength, E) {
  var t1 = new $.SubListIterable(_iterable, _start, _endOrLength);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.ListIterator$ = function(iterable) {
  return new $.ListIterator(iterable, $.get$length$asx(iterable), 0, null);
};

$.MappedIterable$ = function(_iterable, _f, S, T) {
  var t1 = new $.MappedIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [S, T]);
  return t1;
};

$.MappedIterator$ = function(_iterator, _f) {
  return new $.MappedIterator(null, _iterator, _f);
};

$.WhereIterable$ = function(_iterable, _f, E) {
  var t1 = new $.WhereIterable(_iterable, _f);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.WhereIterator$ = function(_iterator, _f) {
  return new $.WhereIterator(_iterator, _f);
};

$.SkipIterable$ = function(_iterable, _skipCount, E) {
  var t1 = new $.SkipIterable(_iterable, _skipCount);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.SkipIterable$2(_iterable, _skipCount, E);
  return t1;
};

$.SkipIterator$ = function(_iterator, _skipCount) {
  var t1 = new $.SkipIterator(_iterator, _skipCount);
  t1.SkipIterator$2(_iterator, _skipCount);
  return t1;
};

$.IterableMixinWorkaround_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.get$iterator$ax(iterable); t1.moveNext$0() === true;)
    f.call$1(t1.get$current());
};

$.IterableMixinWorkaround__rangeCheck = function(list, start, end) {
  var t1 = $.getInterceptor$n(start);
  if (t1.$lt(start, 0) || t1.$gt(start, list.length))
    throw $.wrapException($.RangeError$range(start, 0, list.length));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start) || t1.$gt(end, list.length))
    throw $.wrapException($.RangeError$range(end, start, list.length));
};

$.IterableMixinWorkaround_setRangeList = function(list, start, end, from, skipCount) {
  var $length, otherStart, otherList;
  $.IterableMixinWorkaround__rangeCheck(list, start, end);
  $length = $.$sub$n(end, start);
  if ($.$eq($length, 0))
    return;
  if (skipCount < 0)
    throw $.wrapException($.ArgumentError$(skipCount));
  if (typeof from === "object" && from !== null && (from.constructor === Array || !!$.getInterceptor(from).$isList)) {
    otherStart = skipCount;
    otherList = from;
  } else {
    otherList = $.toList$1$growable$ax($.skip$1$ax(from, skipCount), false);
    otherStart = 0;
  }
  if (typeof $length !== "number")
    throw $.iae($length);
  if ($.JSNumber_methods.$gt(otherStart + $length, $.get$length$asx(otherList)))
    throw $.wrapException($.StateError$("Not enough elements"));
  $.Arrays_copy(otherList, otherStart, list, start, $length);
};

$.ToString__emitValue = function(i, result, visiting) {
  var t1, isList, t2, t3, first, e;
  t1 = $.getInterceptor$ax(visiting);
  t1.add$1(visiting, i);
  isList = typeof i === "object" && i !== null && (i.constructor === Array || !!$.getInterceptor(i).$isList);
  t2 = isList ? "[" : "{";
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, t2);
  for (t2 = $.get$iterator$ax(i), first = true; t2.moveNext$0() === true; first = false) {
    e = t2.get$current();
    if (!first)
      t3.write$1(result, ", ");
    $.ToString__emitObject(e, result, visiting);
  }
  t3.write$1(result, isList ? "]" : "}");
  t1.removeLast$0(visiting);
};

$.ToString__emitObject = function(o, result, visiting) {
  if (typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isIterable)) {
    o;
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, typeof o === "object" && o !== null && (o.constructor === Array || !!$.getInterceptor(o).$isList) ? "[...]" : "{...}");
    else
      $.ToString__emitValue(o, result, visiting);
  } else if (typeof o === "object" && o !== null && !!$.getInterceptor(o).$isMap)
    if ($.ToString__containsRef(visiting, o))
      $.write$1$x(result, "{...}");
    else
      $.ToString__emitPair(o, result, visiting);
  else
    $.write$1$x(result, o);
};

$.ToString__containsRef = function(i, ref) {
  var t1;
  for (t1 = $.get$iterator$ax(i); t1.moveNext$0() === true;)
    if (t1.get$current() === ref)
      return true;
  return false;
};

$.ToString__emitPair = function(m, result, visiting) {
  var t1, t2, t3;
  t1 = {};
  t2 = $.getInterceptor$ax(visiting);
  t2.add$1(visiting, m);
  t3 = $.getInterceptor$x(result);
  t3.write$1(result, "{");
  t1.first_0 = true;
  m.forEach$1(m, new $.ToString__emitPair_anon(t1, result, visiting));
  t3.write$1(result, "}");
  t2.removeLast$0(visiting);
};

$.HashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; i += 2)
    if ($.$eq(bucket[i], key) === true)
      return i;
  return -1;
};

$.HashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.HashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.HashMapKeyIterator$ = function(_map, _keys) {
  return new $.HashMapKeyIterator(_map, _keys, 0, null);
};

$.LinkedHashMap__findBucketIndex = function(bucket, key) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_key(), key) === true)
      return i;
  return -1;
};

$.LinkedHashMapCell$ = function(_key, _value) {
  return new $.LinkedHashMapCell(_key, _value, null, null);
};

$.LinkedHashMapKeyIterable$ = function(_map, E) {
  var t1 = new $.LinkedHashMapKeyIterable(_map);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.LinkedHashMapKeyIterator$ = function(_map, _modifications) {
  var t1 = new $.LinkedHashMapKeyIterator(_map, _modifications, null, null);
  t1.LinkedHashMapKeyIterator$2(_map, _modifications);
  return t1;
};

$.LinkedHashSet__findBucketIndex = function(bucket, element) {
  var $length, i;
  if (bucket == null)
    return -1;
  $length = bucket.length;
  for (i = 0; i < $length; ++i)
    if ($.$eq(bucket[i].get$_element(), element) === true)
      return i;
  return -1;
};

$.LinkedHashSetCell$ = function(_element) {
  return new $.LinkedHashSetCell(_element, null, null);
};

$.LinkedHashSetIterator$ = function(_set, _modifications) {
  var t1 = new $.LinkedHashSetIterator(_set, _modifications, null, null);
  t1.LinkedHashSetIterator$2(_set, _modifications);
  return t1;
};

$.getInterceptor = function(object) {
};

$.getDispatchProperty = function(object) {
  return object[$.dispatchPropertyName];
};

$.setDispatchProperty = function(object, value) {
  object[$.dispatchPropertyName] = value;
};

$.getNativeInterceptor = function(object) {
  var record, proto, objectProto;
  record = $.getDispatchProperty(object);
  if (record != null) {
    proto = record.p;
    if (false === proto)
      return record.i;
    if (true === proto)
      return object;
    objectProto = Object.getPrototypeOf(object);
    if (proto === objectProto)
      return record.i;
    if (record.e === objectProto)
      return proto(object, record);
  }
  record = $.lookupDispatchRecord(object);
  $.setDispatchProperty(Object.getPrototypeOf(object), record);
  return $.getNativeInterceptor(object);
};

$.initializeDispatchPropertyCSP = function(setGetDispatchPropertyFn, getterFunctions, jsObjectInterceptor) {
  var objectProto, rootProperty, i, getter, property;
  objectProto = Object.prototype;
  for (rootProperty = null, i = 0; true; ++i) {
    if (i < getterFunctions.length) {
      getter = getterFunctions[i];
      property = ("" + getter).match(/\.([^;}]*)/)[1];
      rootProperty = property;
    } else {
      property = rootProperty + "_" + i;
      getter = null;
    }
    if (typeof objectProto[property] === "undefined") {
      $.dispatchPropertyName = property;
      if (getter != null)
        setGetDispatchPropertyFn(getter);
      $.setDispatchProperty(objectProto, {i: jsObjectInterceptor, p: objectProto, e: null});
      return;
    }
  }
};

$.JsIsolateSink$fromPort = function(_port) {
  return new $.JsIsolateSink(false, _port);
};

$._callInIsolate = function(isolate, $function) {
  var result = isolate.eval$1($function);
  $globalState.topEventLoop.run$0();
  return result;
};

$._currentIsolate = function() {
  return $globalState.currentContext;
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($globalState.isWorker === true)
    return;
  rootContext = $._IsolateContext$();
  $globalState.rootContext = rootContext;
  $globalState.currentContext = rootContext;
  rootContext.eval$1(entry);
  $globalState.topEventLoop.run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue($._IsolateEvent), 0);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.IsolateNatives_computeThisScript = function() {
  var currentScript, stack, matches;
  currentScript = $.$currentScript;
  if (currentScript != null)
    return String(currentScript.src);
  stack = new Error().stack;
  if (stack == null)
    stack = (function() {try { throw new Error() } catch(e) { return e.stack }})();
  matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
  if (matches != null)
    return matches[1];
  matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
  if (matches != null)
    return matches[1];
  throw $.wrapException($.UnsupportedError$("Cannot extract URI from \"" + $.S(stack) + "\""));
};

$.IsolateNatives_computeGlobalThis = function() {
  return function() { return this; }();
};

$.IsolateNatives__processWorkerMessage = function(sender, e) {
  var msg, t1, entryPoint, replyTo, context, t2;
  msg = $._deserializeMessage(e.data);
  t1 = $.getInterceptor$asx(msg);
  switch (t1.$index(msg, "command")) {
    case "start":
      $globalState.currentManagerId = t1.$index(msg, "id");
      entryPoint = $[t1.$index(msg, "functionName")];
      replyTo = $._deserializeMessage(t1.$index(msg, "replyTo"));
      context = $._IsolateContext$();
      $globalState.topEventLoop.events._add$1($._IsolateEvent$(context, new $.IsolateNatives__processWorkerMessage_anon(entryPoint, replyTo), "worker-start"));
      $globalState.currentContext = context;
      $globalState.topEventLoop.run$0();
      break;
    case "spawn-worker":
      $.IsolateNatives__spawnWorker(t1.$index(msg, "functionName"), t1.$index(msg, "uri"), t1.$index(msg, "replyPort"));
      break;
    case "message":
      if (t1.$index(msg, "port") != null)
        $.send$2$x(t1.$index(msg, "port"), t1.$index(msg, "msg"), t1.$index(msg, "replyTo"));
      $globalState.topEventLoop.run$0();
      break;
    case "close":
      $.IsolateNatives__log("Closing Worker");
      t1 = $globalState.managers;
      t2 = $.getInterceptor$x(sender);
      t1.remove$1(t1, t2.get$id(sender));
      t2.terminate$0(sender);
      $globalState.topEventLoop.run$0();
      break;
    case "log":
      $.IsolateNatives__log(t1.$index(msg, "msg"));
      break;
    case "print":
      if ($globalState.isWorker === true) {
        $globalState;
        t1 = $._serializeMessage($.makeLiteralMap(["command", "print", "msg", msg]));
        $.get$globalThis().postMessage(t1);
      } else
        $.Primitives_printString($.toString$0(t1.$index(msg, "msg")));
      break;
    case "error":
      throw $.wrapException(t1.$index(msg, "msg"));
  }
};

$.IsolateNatives__log = function(msg) {
  var trace, t1, exception;
  if ($globalState.isWorker === true) {
    $globalState;
    t1 = $._serializeMessage($.makeLiteralMap(["command", "log", "msg", msg]));
    $.get$globalThis().postMessage(t1);
  } else
    try {
      $.get$globalThis().console.log(msg);
    } catch (exception) {
      $.unwrapException(exception);
      trace = $.getTraceFromException(exception);
      throw $.wrapException($._ExceptionImplementation$(trace));
    }

};

$.IsolateNatives__spawnWorker = function(functionName, uri, replyPort) {
  var worker, t1, workerId;
  if (functionName == null)
    functionName = "main";
  if (uri == null)
    uri = $.get$IsolateNatives_thisScript();
  worker = new Worker(uri);
  $._WorkerStub_methods.set$onmessage(worker, function(e) { $.IsolateNatives__processWorkerMessage.call$2(worker, e); });
  t1 = $globalState;
  workerId = t1.nextManagerId;
  t1.nextManagerId = workerId + 1;
  $._WorkerStub_methods.set$id(worker, workerId);
  t1 = $globalState.managers;
  t1.$indexSet(t1, workerId, worker);
  worker.postMessage($._serializeMessage($.makeLiteralMap(["command", "start", "id", workerId, "replyTo", $._serializeMessage(replyPort), "functionName", functionName])));
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.ReceivePortImpl$ = function() {
  var t1 = $.ReceivePortImpl__nextFreeId;
  $.ReceivePortImpl__nextFreeId = $.$add$ns(t1, 1);
  t1 = new $.ReceivePortImpl(t1, null);
  t1.ReceivePortImpl$0();
  return t1;
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $._FutureImpl__FutureImpl$wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._PendingSendPortFinder$ = function() {
  var t1 = new $._PendingSendPortFinder([], $._MessageTraverserVisitedMap$());
  t1._PendingSendPortFinder$0();
  return t1;
};

$._serializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($globalState.get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$.TimerImpl$ = function(milliseconds, callback) {
  var t1 = new $.TimerImpl(true, false, null);
  t1.TimerImpl$2(milliseconds, callback);
  return t1;
};

$.hasTimer = function() {
  return $.get$globalThis().setTimeout != null;
};

$.checkGrowable = function(list, reason) {
  if (!!list.fixed$length)
    throw $.wrapException($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res;
  if (typeof value === "string")
    return value;
  if (typeof value === "number") {
    if (value !== 0)
      return "" + value;
  } else if (true === value)
    return "true";
  else if (false === value)
    return "false";
  else if (value == null)
    return "null";
  res = $.toString$0(value);
  if (typeof res !== "string")
    throw $.wrapException($.ArgumentError$(value));
  return res;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.$add$ns($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.Primitives_printString = function(string) {
  if (typeof dartPrint == "function") {
    dartPrint(string);
    return;
  }
  if (typeof window == "object") {
    if (typeof console == "object")
      console.log(string);
    return;
  }
  if (typeof print == "function") {
    print(string);
    return;
  }
  throw "Unable to print message: " + String(string);
};

$.Primitives_objectTypeName = function(object) {
  var $name, decompiled, t1;
  $name = $.constructorNameFallback(object);
  if ($.$eq($name, "Object") === true) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === "string")
      $name = decompiled;
  }
  t1 = $.getInterceptor$s($name);
  return t1.codeUnitAt$1($name, 0) === 36 ? t1.substring$1($name, 1) : $name;
};

$.Primitives__fromCharCodeApply = function(array) {
  var end, t1, result, i, subarray, t2;
  end = array.length;
  for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
    if (t1)
      subarray = array;
    else {
      t2 = i + 500;
      t2 = t2 < end ? t2 : end;
      subarray = array.slice(i, t2);
    }
    result += String.fromCharCode.apply(null, subarray);
  }
  return result;
};

$.Primitives_stringFromCodePoints = function(codePoints) {
  var a, t1, i;
  a = [];
  for (t1 = $.JSArray_methods.get$iterator(codePoints); t1.moveNext$0();) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i <= 65535)
      a.push(i);
    else if (i <= 1114111) {
      a.push(55296 + ($.JSNumber_methods.$shr(i - 65536, 10) & 1023));
      a.push(56320 + (i & 1023));
    } else
      throw $.wrapException($.ArgumentError$(i));
  }
  return $.Primitives__fromCharCodeApply(a);
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, i;
  for (t1 = $.JSArray_methods.get$iterator(charCodes); t1.moveNext$0();) {
    i = t1.get$current();
    if (typeof i !== "number" || Math.floor(i) !== i)
      throw $.wrapException($.ArgumentError$(i));
    else
      i;
    if (i < 0)
      throw $.wrapException($.ArgumentError$(i));
    if (i > 65535)
      return $.Primitives_stringFromCodePoints(charCodes);
  }
  return $.Primitives__fromCharCodeApply(charCodes);
};

$.Primitives_getProperty = function(object, key) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  return object[key];
};

$.Primitives_setProperty = function(object, key, value) {
  if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
    throw $.wrapException($.ArgumentError$(object));
  object[key] = value;
};

$.iae = function(argument) {
  throw $.wrapException($.ArgumentError$(argument));
};

$.ioore = function(index) {
  if (typeof index !== "number" || Math.floor(index) !== index)
    $.throwExpression($.ArgumentError$(index));
  throw $.wrapException($.RangeError$value(index));
};

$.wrapException = function(ex) {
  var wrapper;
  if (ex == null)
    ex = $.C_NullThrownError;
  wrapper = $.DartError$(ex);
  if (!!Error.captureStackTrace)
    Error.captureStackTrace(wrapper, $.wrapException);
  else
    wrapper.stack = new Error().stack;
  return wrapper;
};

$.throwExpression = function(ex) {
  throw $.wrapException(ex);
};

$.DartError$ = function(dartException) {
  var t1 = new $.DartError();
  t1.DartError$1(dartException);
  return t1;
};

$.DartError_toStringWrapper = function() {
  return $.toString$0(this);
};

$.unwrapException = function(ex) {
  var message, type, $name, t1, ieErrorCode, ieFacilityNumber, t2;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    $name = ex.arguments ? ex.arguments[0] : "";
    if (message.indexOf("JSNull") === -1) {
      t1 = $.getInterceptor(type);
      t1 = t1.$eq(type, "property_not_function") === true || t1.$eq(type, "called_non_callable") === true || t1.$eq(type, "non_object_property_call") === true || t1.$eq(type, "non_object_property_load") === true;
    } else
      t1 = true;
    if (t1)
      return $.NoSuchMethodError$(null, $name, [], $.makeLiteralMap([]), null);
    else if ($.$eq(type, "undefined_method") === true)
      return $.NoSuchMethodError$("", $name, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number >> 16 & 0x1FFF;
    t1 = typeof message === "string";
    if (t1) {
      message;
      if (message === "null has no properties" || message === "'null' is not an object" || message === "'undefined' is not an object" || $.JSString_methods.endsWith$1(message, "is null") || $.JSString_methods.endsWith$1(message, "is undefined") || $.JSString_methods.endsWith$1(message, "is null or undefined") || $.JSString_methods.endsWith$1(message, "of undefined") || $.JSString_methods.endsWith$1(message, "of null"))
        return $.NoSuchMethodError$(null, "<unknown>", [], $.makeLiteralMap([]), null);
      else {
        if (message.indexOf(" has no method ") === -1)
          if (message.indexOf(" is not a function") === -1)
            t2 = ieErrorCode === 438 && ieFacilityNumber === 10;
          else
            t2 = true;
        else
          t2 = true;
        if (t2)
          return $.NoSuchMethodError$("", "<unknown>", [], $.makeLiteralMap([]), null);
      }
    }
    t1 = t1 ? message : "";
    return $._ExceptionImplementation$(t1);
  }
  if (ex instanceof RangeError) {
    if (typeof message === "string" && message.indexOf("call stack") !== -1)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == "function" && ex instanceof InternalError)
    if (typeof message === "string" && message === "too much recursion")
      return $.StackOverflowError$();
  return ex;
};

$.getTraceFromException = function(exception) {
  return $._StackTrace$(exception.stack);
};

$._StackTrace$ = function(_stack) {
  return new $._StackTrace(_stack);
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result, key;
  iterator = $.JSArray_methods.get$iterator(keyValuePairs);
  result = $.LinkedHashMap$(null, null);
  for (; iterator.moveNext$0();) {
    key = iterator.get$current();
    iterator.moveNext$0();
    result.$indexSet(result, key, iterator.get$current());
  }
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  var t1 = $.getInterceptor(numberOfArguments);
  if (t1.$eq(numberOfArguments, 0) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if (t1.$eq(numberOfArguments, 1) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(closure, arg1));
  else if (t1.$eq(numberOfArguments, 2) === true)
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(closure, arg1, arg2));
  else
    throw $.wrapException($._ExceptionImplementation$("Unsupported number of arguments for wrapped closure"));
};

$.convertDartClosureToJS = function(closure, arity) {
  var $function;
  if (closure == null)
    return;
  $function = closure.$identity;
  if (!!$function)
    return $function;
  $function = (function ($2, $3) { return function($0, $1) { return $3(closure, $2, arity, $0, $1) }})($._currentIsolate(), $.invokeClosure.call$5);
  closure.$identity = $function;
  return $function;
};

$.throwCyclicInit = function(staticName) {
  throw $.wrapException($.RuntimeError$("Cyclic initialization for static " + $.S(staticName)));
};

$.setRuntimeTypeInfo = function(target, typeInfo) {
  target.$builtinTypeInfo = typeInfo;
};

$.getRuntimeTypeInfo = function(target) {
  if (target == null)
    return;
  return target.$builtinTypeInfo;
};

$.getRuntimeTypeArgument = function(target, substitution, index) {
  var $arguments = $.getRuntimeTypeInfo(target);
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $arguments == null ? null : $arguments[index];
};

$.runtimeTypeToString = function(type) {
  if (typeof type !== "string" && (typeof type !== "object" || type === null || type.constructor !== Array && !$.getInterceptor(type).$isJavaScriptIndexingBehavior))
    return $.runtimeTypeToString$bailout(1, type);
  if (type.constructor === Array) {
    if (0 >= type.length)
      throw $.ioore(0);
    return type[0].builtin$cls + $.joinArguments(type, 1);
  } else
    return type.builtin$cls;
};

$.runtimeTypeToString$bailout = function(state0, type) {
  var t1 = type == null;
  if (t1)
    return "dynamic";
  else if (!t1 && type.constructor === Array)
    return $.$index$asx(type, 0).builtin$cls + $.joinArguments(type, 1);
  else
    return type.builtin$cls;
};

$.joinArguments = function(types, startIndex) {
  var buffer, index, firstArgument, allDynamic, argument, t1;
  if (typeof types !== "string" && (typeof types !== "object" || types === null || types.constructor !== Array && !$.getInterceptor(types).$isJavaScriptIndexingBehavior))
    return $.joinArguments$bailout(1, types, startIndex);
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    if (index < 0 || index >= types.length)
      throw $.ioore(index);
    argument = types[index];
    if (argument != null)
      allDynamic = false;
    t1 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t1;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.joinArguments$bailout = function(state0, types, startIndex) {
  var t1, buffer, index, firstArgument, allDynamic, argument, t2;
  t1 = $.getInterceptor(types);
  if (types == null)
    return "";
  buffer = $.StringBuffer$("");
  for (index = startIndex, firstArgument = true, allDynamic = true; $.JSNumber_methods.$lt(index, t1.get$length(types)); ++index) {
    if (firstArgument)
      firstArgument = false;
    else
      buffer._contents = buffer._contents + ", ";
    argument = t1.$index(types, index);
    if (argument != null)
      allDynamic = false;
    t2 = $.runtimeTypeToString(argument);
    buffer._contents = buffer._contents + t2;
  }
  return allDynamic ? "" : "<" + $.S(buffer) + ">";
};

$.checkSubtype = function(object, isField, checks, asField) {
  var $arguments, interceptor, isSubclass, substitution;
  if (object == null)
    return false;
  $arguments = $.getRuntimeTypeInfo(object);
  interceptor = typeof object == "function" ? object : $.getInterceptor(object);
  isSubclass = interceptor[isField];
  if (isSubclass == null || isSubclass !== true)
    return false;
  substitution = interceptor[asField];
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $.areSubtypes($arguments, checks);
};

$.areSubtypes = function(s, t) {
  var len, i, t1;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !$.getInterceptor(s).$isJavaScriptIndexingBehavior))
    return $.areSubtypes$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !$.getInterceptor(t).$isJavaScriptIndexingBehavior))
    return $.areSubtypes$bailout(1, s, t);
  if (false)
    return true;
  len = s.length;
  for (i = 0; i < len; ++i) {
    if (i >= s.length)
      throw $.ioore(i);
    t1 = s[i];
    if (i >= t.length)
      throw $.ioore(i);
    if (!$.isSubtype(t1, t[i]))
      return false;
  }
  return true;
};

$.areSubtypes$bailout = function(state0, s, t) {
  var t1, len, t2, i;
  t1 = $.getInterceptor(s);
  if (s == null || t == null)
    return true;
  len = t1.get$length(s);
  for (t2 = $.getInterceptor$asx(t), i = 0; $.JSNumber_methods.$lt(i, len); ++i)
    if (!$.isSubtype(t1.$index(s, i), t2.$index(t, i)))
      return false;
  return true;
};

$.isSubtype = function(s, t) {
  var t1, typeOfS, typeOfT, substitution, $arguments;
  if (typeof s !== "string" && (typeof s !== "object" || s === null || s.constructor !== Array && !$.getInterceptor(s).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (typeof t !== "string" && (typeof t !== "object" || t === null || t.constructor !== Array && !$.getInterceptor(t).$isJavaScriptIndexingBehavior))
    return $.isSubtype$bailout(1, s, t);
  if (s == null || t == null)
    return true;
  if (s === t)
    return true;
  if (s.constructor === Array) {
    if (0 >= s.length)
      throw $.ioore(0);
    t1 = s[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(2, s, t, true, t1);
    typeOfS = t1;
  } else
    typeOfS = s;
  if (t.constructor === Array) {
    if (0 >= t.length)
      throw $.ioore(0);
    t1 = t[0];
    if (typeof t1 !== "string" && (typeof t1 !== "object" || t1 === null || t1.constructor !== Array && !$.getInterceptor(t1).$isJavaScriptIndexingBehavior))
      return $.isSubtype$bailout(3, s, t, true, true, typeOfS, t1);
    typeOfT = t1;
  } else
    typeOfT = t;
  if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
    return false;
  substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
  if (!(!(s.constructor === Array) && substitution == null))
    t1 = !(t.constructor === Array);
  else
    t1 = true;
  if (t1)
    return true;
  $arguments = s.constructor === Array ? s.slice(1) : null;
  t1 = t.constructor === Array ? t.slice(1) : null;
  if (substitution != null && substitution.constructor === Array)
    $arguments = substitution;
  else if (typeof substitution == "function")
    $arguments = substitution.apply(null, $arguments);
  return $.areSubtypes($arguments, t1);
};

$.isSubtype$bailout = function(state0, s, t, t1, t2, typeOfS, t3) {
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (s == null || t == null)
        return true;
      if (s === t)
        return true;
      t1 = s != null;
    case 2:
      if (state0 === 2 || state0 === 0 && t1 && s.constructor === Array)
        switch (state0) {
          case 0:
            t2 = $.$index$asx(s, 0);
          case 2:
            state0 = 0;
            typeOfS = t2;
        }
      else
        typeOfS = s;
      t2 = t != null;
    case 3:
      var typeOfT, substitution, $arguments;
      if (state0 === 3 || state0 === 0 && t2 && t.constructor === Array)
        switch (state0) {
          case 0:
            t3 = $.$index$asx(t, 0);
          case 3:
            state0 = 0;
            typeOfT = t3;
        }
      else
        typeOfT = t;
      if (typeOfS["$is" + $.runtimeTypeToString(typeOfT)] == null)
        return false;
      substitution = typeOfT !== typeOfS ? typeOfS["$as" + $.runtimeTypeToString(typeOfT)] : null;
      if (!(!(t1 && s.constructor === Array) && substitution == null))
        t3 = !(t2 && t.constructor === Array);
      else
        t3 = true;
      if (t3)
        return true;
      $arguments = t1 && s.constructor === Array ? s.slice(1) : null;
      t1 = t2 && t.constructor === Array ? t.slice(1) : null;
      if (substitution != null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = substitution.apply(null, $arguments);
      return $.areSubtypes($arguments, t1);
  }
};

$._convertJsonToDart = function(json, reviver) {
  var revive = reviver == null ? new $._convertJsonToDart_anon() : reviver;
  return revive.call$2("", new $._convertJsonToDart_walk(revive).call$1(json));
};

$.typeNameInChrome = function(obj) {
  return $.typeNameInWebKitCommon(obj.constructor.name);
};

$.typeNameInSafari = function(obj) {
  return $.typeNameInWebKitCommon($.constructorNameFallback(obj));
};

$.typeNameInWebKitCommon = function(tag) {
  var $name = tag;
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "AudioChannelMerger")
    return "ChannelMergerNode";
  if ($name === "AudioChannelSplitter")
    return "ChannelSplitterNode";
  if ($name === "AudioGainNode")
    return "GainNode";
  if ($name === "AudioPannerNode")
    return "PannerNode";
  if ($name === "JavaScriptAudioNode")
    return "ScriptProcessorNode";
  if ($name === "Oscillator")
    return "OscillatorNode";
  if ($name === "RealtimeAnalyserNode")
    return "AnalyserNode";
  if ($name === "IDBVersionChangeRequest")
    return "IDBOpenDBRequest";
  return $name;
};

$.typeNameInOpera = function(obj) {
  return $.constructorNameFallback(obj);
};

$.typeNameInFirefox = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CSS2Properties")
    return "CSSStyleDeclaration";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "GeoGeolocation")
    return "Geolocation";
  if ($name === "WorkerMessageEvent")
    return "MessageEvent";
  if ($name === "XMLDocument")
    return "Document";
  return $name;
};

$.typeNameInIE = function(obj) {
  var $name = $.constructorNameFallback(obj);
  if ($name === "Document") {
    if (!!obj.xmlVersion)
      return "Document";
    return "HTMLDocument";
  }
  if ($name === "BeforeUnloadEvent")
    return "Event";
  if ($name === "CanvasPixelArray")
    return "Uint8ClampedArray";
  if ($name === "DataTransfer")
    return "Clipboard";
  if ($name === "DragEvent")
    return "MouseEvent";
  if ($name === "HTMLDDElement")
    return "HTMLElement";
  if ($name === "HTMLDTElement")
    return "HTMLElement";
  if ($name === "HTMLTableDataCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLTableHeaderCellElement")
    return "HTMLTableCellElement";
  if ($name === "HTMLPhraseElement")
    return "HTMLElement";
  if ($name === "MSStyleCSSProperties")
    return "CSSStyleDeclaration";
  if ($name === "Position")
    return "Geoposition";
  if ($name === "Object")
    if (window.DataView && obj instanceof window.DataView)
      return "DataView";
  return $name;
};

$.constructorNameFallback = function(object) {
  var $constructor, $name, t1, string;
  if (object == null)
    return "Null";
  $constructor = object.constructor;
  if (typeof $constructor === "function") {
    $name = $constructor.name;
    if (typeof $name === "string") {
      $name;
      t1 = $name !== "" && $name !== "Object" && $name !== "Function.prototype";
    } else
      t1 = false;
    if (t1)
      return $name;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.alternateTag = function(object, tag) {
  if (!!/^HTML[A-Z].*Element$/.test(tag)) {
    if (Object.prototype.toString.call(object) === "[object Object]")
      return;
    return "HTMLElement";
  }
  return;
};

$.getFunctionForTypeNameOf = function() {
  if (typeof navigator !== "object")
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf("Chrome") !== -1 || userAgent.indexOf("DumpRenderTree") !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf("Firefox") !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf("MSIE") !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf("Opera") !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf("AppleWebKit") !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.toStringForNativeObject = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return "Instance of " + $._getTypeNameOf.call$1(obj);
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
};

$.defineNativeMethods = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, true);
};

$.defineNativeMethodsNonleaf = function(tags, interceptorClass) {
  $.defineNativeMethodsCommon(tags, interceptorClass, false);
};

$.defineNativeMethodsCommon = function(tags, interceptorClass, isLeaf) {
  var methods, tagsList, i, tag;
  methods = interceptorClass.prototype;
  if ($.interceptorsByTag == null)
    $.interceptorsByTag = {};
  if ($.leafTags == null)
    $.leafTags = {};
  tagsList = tags.split("|");
  for (i = 0; i < tagsList.length; ++i) {
    tag = tagsList[i];
    $.interceptorsByTag[tag] = methods;
    $.leafTags[tag] = isLeaf;
  }
};

$.defineNativeMethodsFinish = function() {
};

$.lookupDispatchRecord = function(obj) {
  var hasOwnPropertyFunction, tag, map, interceptor, secondTag;
  hasOwnPropertyFunction = Object.prototype.hasOwnProperty;
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  tag = $._getTypeNameOf.call$1(obj);
  map = $.interceptorsByTag;
  interceptor = hasOwnPropertyFunction.call(map, tag) ? map[tag] : null;
  if (interceptor == null) {
    secondTag = $.alternateTag(obj, tag);
    if (secondTag != null) {
      map = $.interceptorsByTag;
      interceptor = hasOwnPropertyFunction.call(map, secondTag) ? map[secondTag] : null;
    }
  }
  if (interceptor == null)
    interceptor = {__what: "interceptor not found", __tag: tag};
  if (true === $.leafTags[tag])
    return {i: interceptor, p: false, e: null};
  else
    return {i: interceptor, p: Object.getPrototypeOf(obj), e: null};
};

$.JSSyntaxRegExp$_globalVersionOf = function(other) {
  var t1, t2, t3;
  t1 = other.get$pattern(other);
  t2 = other.get$isMultiLine();
  t3 = other.get$isCaseSensitive();
  return new $.JSSyntaxRegExp(t1, t2, t3, $.JSSyntaxRegExp_makeNative(t1, t2, t3, true));
};

$.JSSyntaxRegExp_makeNative = function(pattern, multiLine, caseSensitive, global) {
  var m, i, g, regexp, errorMessage;
  if (typeof pattern !== "string")
    $.throwExpression($.ArgumentError$(pattern));
  m = multiLine === true ? "m" : "";
  i = caseSensitive === true ? "" : "i";
  g = global ? "g" : "";
  regexp = (function() {try {return new RegExp(pattern, m + i + g);} catch (e) {return e;}})();
  if (regexp instanceof RegExp)
    return regexp;
  errorMessage = String(regexp);
  throw $.wrapException($.FormatException$("Illegal RegExp pattern: " + $.S(pattern) + ", " + errorMessage));
};

$._MatchImplementation$ = function(pattern, str, start, end, _groups) {
  return new $._MatchImplementation(pattern, str, start, end, _groups);
};

$._AllMatchesIterator$ = function(re, _str) {
  return new $._AllMatchesIterator($.JSSyntaxRegExp$_globalVersionOf(re), _str, null);
};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return $.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, $length, i, t1;
  if (from === "")
    if (receiver === "")
      return to;
    else {
      result = $.StringBuffer$("");
      $length = receiver.length;
      result._contents = result._contents + to;
      for (i = 0; i < $length; ++i) {
        t1 = receiver[i];
        result._contents = result._contents + t1;
        result._contents = result._contents + to;
      }
      return result._contents;
    }
  else
    return receiver.replace(new RegExp(from.replace(new RegExp("[-[\\]{}()*+?.,\\\\^$|#\\s]", 'g'), "\\$&"), 'g'), to.replace("$", "$$$$"));
};

$._attachStackTrace = function(o, st) {
  var t1;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  t1.$indexSet(t1, o, st);
};

$.getAttachedStackTrace = function(o) {
  var t1, values;
  if (o == null || typeof o === "boolean" || typeof o === "number" || typeof o === "string")
    return;
  t1 = $.get$_stackTraceExpando();
  values = $.Primitives_getProperty(o, "expando$values");
  return values == null ? null : $.Primitives_getProperty(values, t1._getKey$0());
};

$._asyncRunCallback = function() {
  var callbacks, i, callback, remainingCallbacks, newCallbacks, exception;
  for (; !$.JSArray_methods.get$isEmpty($.get$_asyncCallbacks());) {
    callbacks = $.get$_asyncCallbacks();
    $._asyncCallbacks = [];
    for (i = 0; $.$lt$n(i, $.get$length$asx(callbacks)); i = $.$add$ns(i, 1)) {
      callback = $.$index$asx(callbacks, i);
      $.$indexSet$ax(callbacks, i, null);
      try {
        callback.call$0();
      } catch (exception) {
        $.unwrapException(exception);
        i = $.$add$ns(i, 1);
        remainingCallbacks = $.sublist$1$ax(callbacks, i);
        newCallbacks = $.get$_asyncCallbacks();
        $._asyncCallbacks = [];
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), remainingCallbacks);
        $.JSArray_methods.addAll$1($.get$_asyncCallbacks(), newCallbacks);
        $.Timer_run($._asyncRunCallback);
        throw exception;
      }

    }
  }
  $._callbacksAreEnqueued = false;
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$(), false);
};

$._FutureListenerWrapper$ = function(future) {
  return new $._FutureListenerWrapper(future, null);
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(0, null);
};

$._FutureImpl$immediate = function(value) {
  var t1 = new $._FutureImpl(0, null);
  t1._FutureImpl$immediate$1(value);
  return t1;
};

$._FutureImpl__FutureImpl$wait = function(futures) {
  var t1, t2, t3, future, pos;
  t1 = {};
  t1.completer_0 = null;
  t1.values_1 = null;
  t2 = new $._FutureImpl__FutureImpl$wait_handleError(t1);
  t1.remaining_2 = 0;
  for (t3 = $.JSArray_methods.get$iterator(futures); t3.moveNext$0();) {
    future = t3.get$current();
    pos = t1.remaining_2;
    t1.remaining_2 = $.$add$ns(pos, 1);
    future.catchError$1(t2).then$1(new $._FutureImpl__FutureImpl$wait_anon(t1, pos));
  }
  t2 = t1.remaining_2;
  if ($.$eq(t2, 0))
    return $._FutureImpl$immediate($.List_empty);
  t1.values_1 = $.List_List(t2, null);
  t1.completer_0 = $._CompleterImpl$();
  return t1.completer_0.future;
};

$._ThenFuture$ = function(_onValue) {
  return new $._ThenFuture(_onValue, null, 0, null);
};

$._CatchErrorFuture$ = function(_onError, _test) {
  return new $._CatchErrorFuture(_test, _onError, null, 0, null);
};

$._SubscribeFuture$ = function(onValue, _onError) {
  return new $._SubscribeFuture(_onError, onValue, null, 0, null);
};

$._FutureWrapper$ = function(_future) {
  return new $._FutureWrapper(_future);
};

$._throwDelayed = function(error, stackTrace) {
  $.get$_asyncCallbacks().push(new $._throwDelayed_anon(error, stackTrace));
  if (!$._callbacksAreEnqueued) {
    $.Timer_run($._asyncRunCallback);
    $._callbacksAreEnqueued = true;
  }
};

$._nullDataHandler = function(value) {
};

$._nullErrorHandler = function(error) {
  $._throwDelayed(error, null);
};

$._nullDoneHandler = function() {
};

$._asyncError = function(error, stackTrace) {
  if (stackTrace == null)
    return error;
  if ($.getAttachedStackTrace(error) != null)
    return error;
  $._attachStackTrace(error, stackTrace);
  return error;
};

$._runUserCode = function(userCode, onSuccess, onError) {
  var e, s, exception, t1;
  try {
    onSuccess.call$1(userCode.call$0());
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    s = $.getTraceFromException(exception);
    onError.call$1($._asyncError(e, s));
  }

};

$._cancelAndError = function(subscription, future) {
  return new $._cancelAndError_anon(subscription, future);
};

$._ForwardingStreamSubscription$ = function(_stream, onData, onError, onDone, _cancelOnError) {
  var t1 = new $._ForwardingStreamSubscription(_stream, _cancelOnError, null, onData, onError, onDone);
  t1._BaseStreamSubscription$3(onData, onError, onDone);
  t1._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, _cancelOnError);
  return t1;
};

$._SkipStream$ = function(source, count) {
  var t1 = new $._SkipStream(count, source);
  t1._SkipStream$2(source, count);
  return t1;
};

$.Timer_run = function(callback) {
  var milliseconds;
  $.get$Timer__runCallbacks().push(callback);
  if ($.get$Timer__runCallbacks().length === 1) {
    milliseconds = $.Duration_0.get$inMilliseconds();
    if (milliseconds < 0)
      milliseconds = 0;
    $.TimerImpl$(milliseconds, new $.Timer_run_anon());
  }
};

$.HashMap$ = function(K, V) {
  var t1 = new $.HashMap(0, null, null, null, null);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashMap$ = function(K, V) {
  var t1 = new $.LinkedHashMap(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [K, V]);
  return t1;
};

$.LinkedHashSet$ = function(E) {
  var t1 = new $.LinkedHashSet(0, null, null, null, null, null, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  return t1;
};

$.Queue_Queue = function(E) {
  return $.ListQueue$(null, E);
};

$.ListQueue$ = function(initialCapacity, E) {
  var t1 = new $.ListQueue(null, 0, 0, 0);
  $.setRuntimeTypeInfo(t1, [E]);
  t1.ListQueue$1(initialCapacity, E);
  return t1;
};

$.ListQueue__isPowerOf2 = function(number) {
  return $.JSNull_methods.$and(number, $.JSNull_methods.$sub(number, 1)) === 0;
};

$.ListQueue__nextPowerOf2 = function(number) {
  var nextNumber;
  number = $.JSNull_methods.$shl(number, 2) - 1;
  for (; true; number = nextNumber) {
    nextNumber = (number & number - 1) >>> 0;
    if (nextNumber === 0)
      return number;
  }
};

$._ListQueueIterator$ = function(queue) {
  return new $._ListQueueIterator(queue, queue._tail, queue._modificationCount, queue._head, null);
};

$.Duration$ = function(days, hours, microseconds, milliseconds, minutes, seconds) {
  if (typeof microseconds !== "number")
    throw $.iae(microseconds);
  return new $.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
};

$.Error_safeToString = function(object) {
  if (typeof object === "number" && Math.floor(object) === object || typeof object === "number" || typeof object === "boolean" || null == object)
    return $.toString$0(object);
  if (typeof object === "string")
    return "\"" + $.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2($.JSString_methods.replaceAll$2(object, "\\", "\\\\"), "\n", "\\n"), "\r", "\\r"), "\"", "\\\"") + "\"";
  return "Instance of '" + $.S($.Primitives_objectTypeName(object)) + "'";
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.RangeError$value = function(value) {
  return new $.RangeError("value " + $.S(value));
};

$.RangeError$range = function(value, start, end) {
  return new $.RangeError("value " + $.S(value) + " not in range " + $.S(start) + ".." + $.S(end));
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.ConcurrentModificationError$ = function(modifiedObject) {
  return new $.ConcurrentModificationError(modifiedObject);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.Expando$ = function($name) {
  return new $.Expando($name);
};

$.List_List = function($length, E) {
  var t1, result;
  t1 = $ === $length;
  if (t1)
    $length = null;
  if (t1)
    return new Array(0);
  if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
    throw $.wrapException($.ArgumentError$("Length must be a positive integer: " + $.S($length) + "."));
  result = new Array($length);
  result.fixed$length = true;
  return result;
};

$.List_List$from = function(other, growable, E) {
  var list, t1, $length, fixedList, t2, i, t3;
  list = $.List_List($, E);
  $.setRuntimeTypeInfo(list, [E]);
  for (t1 = $.get$iterator$ax(other); t1.moveNext$0() === true;)
    list.push(t1.get$current());
  if (growable === true)
    return list;
  $length = list.length;
  fixedList = $.List_List($length, E);
  $.setRuntimeTypeInfo(fixedList, [E]);
  for (t1 = list.length, t2 = fixedList.length, i = 0; i < $length; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    t3 = list[i];
    if (i >= t2)
      throw $.ioore(i);
    fixedList[i] = t3;
  }
  return fixedList;
};

$.Map_Map = function(K, V) {
  return $.HashMap$(K, V);
};

$.Object$ = function() {
  return new $.Object();
};

$.StringBuffer$ = function($content) {
  var t1 = new $.StringBuffer("");
  t1.StringBuffer$1($content);
  return t1;
};

$.window = function() {
  return window;
};

$.query = function(selector) {
  return document.querySelector(selector);
};

$.Blob_Blob = function(blobParts, type, endings) {
  var bag;
  if (false)
    return new Blob(blobParts);
  bag = {};
  bag.type = type;
  if (endings != null)
    bag.endings = endings;
  return new Blob(blobParts, bag);
};

$.Console$ = function() {
  return new $.Console();
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, $.get$$$dom_children$x(element));
};

$._ElementCssClassSet$ = function(_element) {
  return new $._ElementCssClassSet(_element);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.WebSocket_WebSocket = function(url, protocol_OR_protocols) {
  var t1 = $ === protocol_OR_protocols;
  if (t1)
    protocol_OR_protocols = null;
  if (true && t1)
    return new WebSocket(url);
  if (true) {
    t1 = $.checkSubtype(protocol_OR_protocols, "$isList", [$.JSString], "$asList");
    t1 = t1 || protocol_OR_protocols == null;
  } else
    t1 = false;
  if (t1)
    return new WebSocket(url, protocol_OR_protocols);
  if (true)
    t1 = protocol_OR_protocols == null;
  else
    t1 = false;
  if (t1)
    return new WebSocket(url, protocol_OR_protocols);
  throw $.wrapException($.ArgumentError$("Incorrect number or type of arguments"));
};

$._ElementAttributeMap$ = function(element) {
  return new $._ElementAttributeMap(element);
};

$._EventStream$ = function(_target, _eventType, _useCapture) {
  return new $._EventStream(_target, _eventType, _useCapture);
};

$._EventStreamSubscription$ = function(_target, _eventType, _onData, _useCapture) {
  var t1 = new $._EventStreamSubscription(0, _target, _eventType, _onData, _useCapture);
  t1._EventStreamSubscription$4(_target, _eventType, _onData, _useCapture);
  return t1;
};

$._convertNativeToDart_EventTarget = function(e) {
  if ("setInterval" in e)
    return $._DOMWindowCrossFrame__createSafe(e);
  else
    return e;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  if (w === window)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator(array, array.length, -1, null);
};

$.convertDartToNative_Dictionary = function(dict) {
  var object;
  if (dict == null)
    return;
  object = {};
  $.forEach$1$ax(dict, new $.convertDartToNative_Dictionary_anon(object));
  return object;
};

$.convertNativeToDart_SerializedScriptValue = function(object) {
  return $.convertNativeToDart_AcceptStructuredClone(object, true);
};

$.convertNativeToDart_AcceptStructuredClone = function(object, mustCopy) {
  var copies = [];
  return new $.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new $.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new $.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new $.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
};

$.Device_userAgent = function() {
  return $.window().navigator.userAgent;
};

$.Device_isOpera = function() {
  if ($.Device__isOpera == null)
    $.Device__isOpera = $.contains$2$asx($.Device_userAgent(), "Opera", 0);
  return $.Device__isOpera;
};

$.Device_isWebKit = function() {
  if ($.Device__isWebKit == null)
    $.Device__isWebKit = $.Device_isOpera() !== true && $.contains$2$asx($.Device_userAgent(), "WebKit", 0) === true;
  return $.Device__isWebKit;
};

$.FilteredElementList$ = function(node, T) {
  var t1 = new $.FilteredElementList(node, $.get$nodes$x(node));
  $.setRuntimeTypeInfo(t1, [T]);
  return t1;
};

$.Lists_getRange = function(a, start, end, accumulator) {
  var i;
  if (start !== (start | 0))
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (typeof end !== "number")
    return $.Lists_getRange$bailout(1, a, start, end, accumulator);
  if (start < 0)
    throw $.wrapException($.RangeError$value(start));
  if (end < start)
    throw $.wrapException($.RangeError$value(end));
  if (end > a.length)
    throw $.wrapException($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    if (i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.Lists_getRange$bailout = function(state0, a, start, end, accumulator) {
  var t1, i;
  if ($.$lt$n(start, 0))
    throw $.wrapException($.RangeError$value(start));
  t1 = $.getInterceptor$n(end);
  if (t1.$lt(end, start))
    throw $.wrapException($.RangeError$value(end));
  if (t1.$gt(end, a.length))
    throw $.wrapException($.RangeError$value(end));
  for (i = start; $.$lt$n(i, end); ++i) {
    if (i >>> 0 !== i || i >= a.length)
      throw $.ioore(i);
    accumulator.push(a[i]);
  }
  return accumulator;
};

$.ReceivePort_ReceivePort = function() {
  return $.ReceivePortImpl$();
};

$._Isolate_port = function() {
  if ($.lazyPort == null)
    $.lazyPort = $.ReceivePort_ReceivePort();
  return $.lazyPort;
};

$.JsonUnsupportedObjectError$ = function(unsupportedObject, cause) {
  return new $.JsonUnsupportedObjectError(unsupportedObject, cause);
};

$.JsonCyclicError$ = function(object) {
  return new $.JsonCyclicError(object, null);
};

$.parse = function(json, reviver) {
  var parsed, e, t1, exception;
  t1 = json;
  if (typeof t1 !== "string")
    throw $.wrapException($.ArgumentError$(json));
  parsed = null;
  try {
    parsed = JSON.parse(json);
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.wrapException($.FormatException$(String(e)));
  }

  return $._convertJsonToDart(parsed, reviver);
};

$._JsonStringifier$ = function(sb) {
  return new $._JsonStringifier(sb, []);
};

$._JsonStringifier_escape = function(sb, s) {
  var t1, $length, charCodes, needsEscape, i, charCode, t2, str;
  t1 = $.getInterceptor$asx(s);
  $length = t1.get$length(s);
  charCodes = $.List_List($, $.JSInt);
  $.setRuntimeTypeInfo(charCodes, [$.JSInt]);
  for (needsEscape = false, i = 0; $.JSNumber_methods.$lt(i, $length); ++i) {
    charCode = t1.codeUnitAt$1(s, i);
    if (charCode < 32) {
      charCodes.push(92);
      switch (charCode) {
        case 8:
          charCodes.push(98);
          break;
        case 9:
          charCodes.push(116);
          break;
        case 10:
          charCodes.push(110);
          break;
        case 12:
          charCodes.push(102);
          break;
        case 13:
          charCodes.push(114);
          break;
        default:
          charCodes.push(117);
          t2 = $.JSInt_methods.$shr(charCode, 12) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.JSInt_methods.$shr(charCode, 8) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = $.JSInt_methods.$shr(charCode, 4) & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          t2 = charCode & 15;
          charCodes.push(t2 < 10 ? 48 + t2 : 87 + t2);
          break;
      }
      needsEscape = true;
    } else if (charCode === 34 || charCode === 92) {
      charCodes.push(92);
      charCodes.push(charCode);
      needsEscape = true;
    } else
      charCodes.push(charCode);
  }
  if (needsEscape) {
    if (!(charCodes.constructor === Array))
      charCodes = $.List_List$from(charCodes, true, null);
    t1 = $.Primitives_stringFromCharCodes(charCodes);
    str = t1;
  } else
    str = s;
  str = typeof str === "string" ? str : $.S(str);
  sb._contents = sb._contents + str;
};

$._AttributeClassSet$ = function(_element) {
  return new $._AttributeClassSet(_element);
};

$.FileManager__success.call$1 = $.FileManager__success;
$.FileManager__success.$name = "FileManager__success";
$.FileManager__error.call$1 = $.FileManager__error;
$.FileManager__error.$name = "FileManager__error";
$.CloudSocket_onOpen.call$1 = $.CloudSocket_onOpen;
$.CloudSocket_onOpen.$name = "CloudSocket_onOpen";
$.CloudSocket_onMessage.call$1 = $.CloudSocket_onMessage;
$.CloudSocket_onMessage.$name = "CloudSocket_onMessage";
$.CloudSocket_onError.call$1 = $.CloudSocket_onError;
$.CloudSocket_onError.$name = "CloudSocket_onError";
$.CloudSocket_onClose.call$1 = $.CloudSocket_onClose;
$.CloudSocket_onClose.$name = "CloudSocket_onClose";
$.MainNav_toggle.call$1 = $.MainNav_toggle;
$.MainNav_toggle.$name = "MainNav_toggle";
$.IsolateNatives__processWorkerMessage.call$2 = $.IsolateNatives__processWorkerMessage;
$.IsolateNatives__processWorkerMessage.$name = "IsolateNatives__processWorkerMessage";
$.wrapException.call$1 = $.wrapException;
$.wrapException.$name = "wrapException";
$.DartError_toStringWrapper.call$0 = $.DartError_toStringWrapper;
$.DartError_toStringWrapper.$name = "DartError_toStringWrapper";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._asyncRunCallback.call$0 = $._asyncRunCallback;
$._asyncRunCallback.$name = "_asyncRunCallback";
$._nullDataHandler.call$1 = $._nullDataHandler;
$._nullDataHandler.$name = "_nullDataHandler";
$._nullErrorHandler.call$1 = $._nullErrorHandler;
$._nullErrorHandler.$name = "_nullErrorHandler";
$._nullDoneHandler.call$0 = $._nullDoneHandler;
$._nullDoneHandler.$name = "_nullDoneHandler";
$.JSString.$isString = true;
$.JSString.$isString = true;
$.C_NullThrownError = new $.NullThrownError();
$.JSInt_methods = $.JSInt.prototype;
$.EventStreamProvider_close = new $.EventStreamProvider("close");
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.List_empty = Isolate.makeConstantList([]);
$.EventStreamProvider_loadend = new $.EventStreamProvider("loadend");
$.EventStreamProvider_error = new $.EventStreamProvider("error");
$.JSNull_methods = $.JSNull.prototype;
$.NodeList_methods = $.NodeList.prototype;
$.FileReader_methods = $.FileReader.prototype;
$._WorkerStub_methods = $._WorkerStub.prototype;
$.EventStreamProvider_open = new $.EventStreamProvider("open");
$.JSArray_methods = $.JSArray.prototype;
$.EventStreamProvider_click = new $.EventStreamProvider("click");
$.C_CloseToken = new $.CloseToken();
$._EntryArray_methods = $._EntryArray.prototype;
$.JSNumber_methods = $.JSNumber.prototype;
$.JSString_methods = $.JSString.prototype;
$.Window_methods = $.Window.prototype;
$.Duration_0 = new $.Duration(0);
$.EventStreamProvider_writeend = new $.EventStreamProvider("writeend");
$.EventStreamProvider_message = new $.EventStreamProvider("message");
$.FileManager__filesystem = null;
$.CloudSocket_ws = null;
$.Expando__keyCount = 0;
$.dispatchPropertyName = null;
$.lazyPort = null;
$.ReceivePortImpl__nextFreeId = 1;
$.Primitives_hashCodeSeed = 0;
$._getTypeNameOf = null;
$.interceptorsByTag = null;
$.leafTags = null;
$._callbacksAreEnqueued = false;
$.Device__isOpera = null;
$.Device__isWebKit = null;
$.$$dom_addEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_addEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return $.getInterceptor$x(receiver).$$dom_removeEventListener$3(receiver, a0, a1, a2);
};
$.$$dom_replaceChild$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).$$dom_replaceChild$2(receiver, a0, a1);
};
$.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return $.getInterceptor$ns(receiver).$add(receiver, a0);
};
$.$and$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver & a0) >>> 0;
  return $.getInterceptor$n(receiver).$and(receiver, a0);
};
$.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return $.getInterceptor(receiver).$eq(receiver, a0);
};
$.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return $.getInterceptor$n(receiver).$ge(receiver, a0);
};
$.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return $.getInterceptor$n(receiver).$gt(receiver, a0);
};
$.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string")
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return $.getInterceptor$asx(receiver).$index(receiver, a0);
};
$.$indexSet$ax = function(receiver, a0, a1) {
  if (receiver.constructor == Array && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return $.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
$.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return $.getInterceptor$n(receiver).$lt(receiver, a0);
};
$.$shl$n = function(receiver, a0) {
  return $.getInterceptor$n(receiver).$shl(receiver, a0);
};
$.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return $.getInterceptor$n(receiver).$sub(receiver, a0);
};
$._getFile$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver)._getFile$1(receiver, a0);
};
$._getFile$2$options$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver)._getFile$2$options(receiver, a0, a1);
};
$.add$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).add$1(receiver, a0);
};
$.append$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).append$1(receiver, a0);
};
$.clone$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).clone$1(receiver, a0);
};
$.contains$2$asx = function(receiver, a0, a1) {
  return $.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
$.createWriter$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).createWriter$0(receiver);
};
$.elementAt$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
$.file$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).file$0(receiver);
};
$.forEach$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
$.get$$$dom_children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$$$dom_children(receiver);
};
$.get$attributes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$attributes(receiver);
};
$.get$body$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$body(receiver);
};
$.get$children$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$children(receiver);
};
$.get$classes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$classes(receiver);
};
$.get$content$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$content(receiver);
};
$.get$hashCode$ = function(receiver) {
  return $.getInterceptor(receiver).get$hashCode(receiver);
};
$.get$id$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$id(receiver);
};
$.get$isEmpty$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
$.get$iterator$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).get$iterator(receiver);
};
$.get$length$asx = function(receiver) {
  return $.getInterceptor$asx(receiver).get$length(receiver);
};
$.get$name$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$name(receiver);
};
$.get$nodes$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$nodes(receiver);
};
$.get$onClick$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClick(receiver);
};
$.get$onClose$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onClose(receiver);
};
$.get$onError$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onError(receiver);
};
$.get$onMessage$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onMessage(receiver);
};
$.get$onOpen$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$onOpen(receiver);
};
$.get$result$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$result(receiver);
};
$.get$root$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$root(receiver);
};
$.get$target$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$target(receiver);
};
$.get$value$x = function(receiver) {
  return $.getInterceptor$x(receiver).get$value(receiver);
};
$.postMessage$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).postMessage$1(receiver, a0);
};
$.preventDefault$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).preventDefault$0(receiver);
};
$.readEntries$0$x = function(receiver) {
  return $.getInterceptor$x(receiver).readEntries$0(receiver);
};
$.register$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).register$2(receiver, a0, a1);
};
$.remove$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).remove$0(receiver);
};
$.replaceWith$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
$.send$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).send$1(receiver, a0);
};
$.send$2$x = function(receiver, a0, a1) {
  return $.getInterceptor$x(receiver).send$2(receiver, a0, a1);
};
$.set$innerHtml$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$innerHtml(receiver, value);
};
$.set$text$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$text(receiver, value);
};
$.set$value$x = function(receiver, value) {
  return $.getInterceptor$x(receiver).set$value(receiver, value);
};
$.skip$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).skip$1(receiver, a0);
};
$.split$1$s = function(receiver, a0) {
  return $.getInterceptor$s(receiver).split$1(receiver, a0);
};
$.sublist$1$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).sublist$1(receiver, a0);
};
$.toList$0$ax = function(receiver) {
  return $.getInterceptor$ax(receiver).toList$0(receiver);
};
$.toList$1$growable$ax = function(receiver, a0) {
  return $.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
$.toString$0 = function(receiver) {
  return $.getInterceptor(receiver).toString$0(receiver);
};
$.trim$0$s = function(receiver) {
  return $.getInterceptor$s(receiver).trim$0(receiver);
};
$.write$1$x = function(receiver, a0) {
  return $.getInterceptor$x(receiver).write$1(receiver, a0);
};
$.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return $.JSInt.prototype;
    return $.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return $.JSNull.prototype;
  if (typeof receiver == "function")
    return $.JSFunction.prototype;
  if (typeof receiver == "boolean")
    return $.JSBool.prototype;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return $.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
$.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return $.JSNumber.prototype;
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return $.JSString.prototype;
  if (receiver == null)
    return receiver;
  return receiver;
};
$.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof $.Object)
    return receiver;
  if (Object.getPrototypeOf(receiver) === Object.prototype)
    return $.Interceptor.prototype;
  return $.getNativeInterceptor(receiver);
};
Isolate.$lazy($, "element", "MainNav_element", "get$MainNav_element", function() {
  return $.query("#mainNav");
}, function() {
  return $.MainNav_element;
});
Isolate.$lazy($, "sendBtn", "MainNav_sendBtn", "get$MainNav_sendBtn", function() {
  return $.query("#sendBtn");
}, function() {
  return $.MainNav_sendBtn;
});
Isolate.$lazy($, "element", "MainSection_element", "get$MainSection_element", function() {
  return $.query("#mainSection");
}, function() {
  return $.MainSection_element;
});
Isolate.$lazy($, "menuBtn", "MainSection_menuBtn", "get$MainSection_menuBtn", function() {
  return $.query("#menu");
}, function() {
  return $.MainSection_menuBtn;
});
Isolate.$lazy($, "createFileBtn", "MainSection_createFileBtn", "get$MainSection_createFileBtn", function() {
  return $.query("#newFile");
}, function() {
  return $.MainSection_createFileBtn;
});
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return $.IsolateNatives_computeGlobalThis();
}, function() {
  return $.globalThis;
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
}, function() {
  return $.globalWindow;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
}, function() {
  return $.globalWorker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
}, function() {
  return $.globalPostMessageDefined;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return $.IsolateNatives_computeThisScript();
}, function() {
  return $.IsolateNatives_thisScript;
});
Isolate.$lazy($, "_stackTraceExpando", "_stackTraceExpando", "get$_stackTraceExpando", function() {
  return $.Expando$("asynchronous error");
}, function() {
  return $._stackTraceExpando;
});
Isolate.$lazy($, "_asyncCallbacks", "_asyncCallbacks", "get$_asyncCallbacks", function() {
  return [];
}, function() {
  return $._asyncCallbacks;
});
Isolate.$lazy($, "_runCallbacks", "Timer__runCallbacks", "get$Timer__runCallbacks", function() {
  return [];
}, function() {
  return $.Timer__runCallbacks;
});
Isolate.$lazy($, "safeConsole", "Console_safeConsole", "get$Console_safeConsole", function() {
  return $.Console$();
}, function() {
  return $.Console_safeConsole;
});
// Native classes
$.defineNativeMethods("Worker", $._WorkerStub);

$.defineNativeMethodsNonleaf("HTMLElement", $._HTMLElement);

$.defineNativeMethods("HTMLAnchorElement", $.AnchorElement);

$.defineNativeMethods("WebKitAnimationEvent", $.AnimationEvent);

$.defineNativeMethods("HTMLAreaElement", $.AreaElement);

$.defineNativeMethods("Attr", $.Attr);

$.defineNativeMethods("HTMLAudioElement", $.AudioElement);

$.defineNativeMethods("AutocompleteErrorEvent", $.AutocompleteErrorEvent);

$.defineNativeMethods("HTMLBRElement", $.BRElement);

$.defineNativeMethods("HTMLBaseElement", $.BaseElement);

$.defineNativeMethods("BeforeLoadEvent", $.BeforeLoadEvent);

$.defineNativeMethodsNonleaf("Blob", $.Blob);

$.defineNativeMethods("HTMLBodyElement", $.BodyElement);

$.defineNativeMethods("HTMLButtonElement", $.ButtonElement);

$.defineNativeMethods("CDATASection", $.CDataSection);

$.defineNativeMethods("HTMLCanvasElement", $.CanvasElement);

$.defineNativeMethodsNonleaf("CharacterData", $.CharacterData);

$.defineNativeMethods("CloseEvent", $.CloseEvent);

$.defineNativeMethods("Comment", $.Comment);

$.defineNativeMethods("CompositionEvent", $.CompositionEvent);

$.defineNativeMethods("HTMLContentElement", $.ContentElement);

$.defineNativeMethods("CSSFontFaceLoadEvent", $.CssFontFaceLoadEvent);

$.defineNativeMethods("CSSStyleDeclaration", $.CssStyleDeclaration);

$.defineNativeMethods("CustomElementConstructor", $.CustomElementConstructor);

$.defineNativeMethods("CustomEvent", $.CustomEvent);

$.defineNativeMethods("HTMLDListElement", $.DListElement);

$.defineNativeMethods("HTMLDataListElement", $.DataListElement);

$.defineNativeMethods("HTMLDetailsElement", $.DetailsElement);

$.defineNativeMethods("DeviceMotionEvent", $.DeviceMotionEvent);

$.defineNativeMethods("DeviceOrientationEvent", $.DeviceOrientationEvent);

$.defineNativeMethods("HTMLDialogElement", $.DialogElement);

$.defineNativeMethods("DirectoryEntry", $.DirectoryEntry);

$.defineNativeMethods("DirectoryReader", $.DirectoryReader);

$.defineNativeMethods("HTMLDivElement", $.DivElement);

$.defineNativeMethodsNonleaf("Document", $.Document);

$.defineNativeMethodsNonleaf("DocumentFragment", $.DocumentFragment);

$.defineNativeMethods("DocumentType", $.DocumentType);

$.defineNativeMethods("DOMError", $.DomError);

$.defineNativeMethods("DOMException", $.DomException);

$.defineNativeMethodsNonleaf("Element", $.Element);

$.defineNativeMethods("HTMLEmbedElement", $.EmbedElement);

$.defineNativeMethodsNonleaf("Entry", $.Entry);

$.defineNativeMethods("ErrorEvent", $.ErrorEvent);

$.defineNativeMethodsNonleaf("Event", $.Event);

$.defineNativeMethods("EventException", $.EventException);

$.defineNativeMethodsNonleaf("EventTarget", $.EventTarget);

$.defineNativeMethods("HTMLFieldSetElement", $.FieldSetElement);

$.defineNativeMethods("File", $.File);

$.defineNativeMethods("FileEntry", $.FileEntry);

$.defineNativeMethods("FileError", $.FileError);

$.defineNativeMethods("FileException", $.FileException);

$.defineNativeMethods("FileReader", $.FileReader);

$.defineNativeMethods("DOMFileSystem", $.FileSystem);

$.defineNativeMethods("FileWriter", $.FileWriter);

$.defineNativeMethods("FocusEvent", $.FocusEvent);

$.defineNativeMethods("HTMLFormElement", $.FormElement);

$.defineNativeMethods("HTMLHRElement", $.HRElement);

$.defineNativeMethods("HashChangeEvent", $.HashChangeEvent);

$.defineNativeMethods("HTMLHeadElement", $.HeadElement);

$.defineNativeMethods("HTMLHeadingElement", $.HeadingElement);

$.defineNativeMethodsNonleaf("HTMLCollection", $.HtmlCollection);

$.defineNativeMethods("HTMLDocument", $.HtmlDocument);

$.defineNativeMethods("HTMLHtmlElement", $.HtmlElement);

$.defineNativeMethods("HTMLFormControlsCollection", $.HtmlFormControlsCollection);

$.defineNativeMethods("HTMLOptionsCollection", $.HtmlOptionsCollection);

$.defineNativeMethods("XMLHttpRequestException", $.HttpRequestException);

$.defineNativeMethods("XMLHttpRequestProgressEvent", $.HttpRequestProgressEvent);

$.defineNativeMethods("HTMLIFrameElement", $.IFrameElement);

$.defineNativeMethods("HTMLImageElement", $.ImageElement);

$.defineNativeMethods("HTMLInputElement", $.InputElement);

$.defineNativeMethods("KeyboardEvent", $.KeyboardEvent);

$.defineNativeMethods("HTMLKeygenElement", $.KeygenElement);

$.defineNativeMethods("HTMLLIElement", $.LIElement);

$.defineNativeMethods("HTMLLabelElement", $.LabelElement);

$.defineNativeMethods("HTMLLegendElement", $.LegendElement);

$.defineNativeMethods("HTMLLinkElement", $.LinkElement);

$.defineNativeMethods("HTMLMapElement", $.MapElement);

$.defineNativeMethodsNonleaf("HTMLMediaElement", $.MediaElement);

$.defineNativeMethods("MediaError", $.MediaError);

$.defineNativeMethods("MediaKeyError", $.MediaKeyError);

$.defineNativeMethods("MediaKeyEvent", $.MediaKeyEvent);

$.defineNativeMethods("MediaStreamEvent", $.MediaStreamEvent);

$.defineNativeMethods("MediaStreamTrackEvent", $.MediaStreamTrackEvent);

$.defineNativeMethods("HTMLMenuElement", $.MenuElement);

$.defineNativeMethods("MessageEvent", $.MessageEvent);

$.defineNativeMethods("HTMLMetaElement", $.MetaElement);

$.defineNativeMethods("HTMLMeterElement", $.MeterElement);

$.defineNativeMethods("HTMLModElement", $.ModElement);

$.defineNativeMethodsNonleaf("MouseEvent", $.MouseEvent);

$.defineNativeMethods("MutationEvent", $.MutationEvent);

$.defineNativeMethods("Navigator", $.Navigator);

$.defineNativeMethods("NavigatorUserMediaError", $.NavigatorUserMediaError);

$.defineNativeMethodsNonleaf("Node", $.Node);

$.defineNativeMethods("NodeList|RadioNodeList", $.NodeList);

$.defineNativeMethods("Notation", $.Notation);

$.defineNativeMethods("HTMLOListElement", $.OListElement);

$.defineNativeMethods("HTMLObjectElement", $.ObjectElement);

$.defineNativeMethods("HTMLOptGroupElement", $.OptGroupElement);

$.defineNativeMethods("HTMLOptionElement", $.OptionElement);

$.defineNativeMethods("HTMLOutputElement", $.OutputElement);

$.defineNativeMethods("OverflowEvent", $.OverflowEvent);

$.defineNativeMethods("PageTransitionEvent", $.PageTransitionEvent);

$.defineNativeMethods("HTMLParagraphElement", $.ParagraphElement);

$.defineNativeMethods("HTMLParamElement", $.ParamElement);

$.defineNativeMethods("PopStateEvent", $.PopStateEvent);

$.defineNativeMethods("PositionError", $.PositionError);

$.defineNativeMethods("HTMLPreElement", $.PreElement);

$.defineNativeMethods("ProcessingInstruction", $.ProcessingInstruction);

$.defineNativeMethods("HTMLProgressElement", $.ProgressElement);

$.defineNativeMethodsNonleaf("ProgressEvent", $.ProgressEvent);

$.defineNativeMethods("HTMLQuoteElement", $.QuoteElement);

$.defineNativeMethods("RangeException", $.RangeException);

$.defineNativeMethods("RTCDataChannelEvent", $.RtcDataChannelEvent);

$.defineNativeMethods("RTCDTMFToneChangeEvent", $.RtcDtmfToneChangeEvent);

$.defineNativeMethods("RTCIceCandidateEvent", $.RtcIceCandidateEvent);

$.defineNativeMethods("HTMLScriptElement", $.ScriptElement);

$.defineNativeMethods("SecurityPolicyViolationEvent", $.SecurityPolicyViolationEvent);

$.defineNativeMethods("HTMLSelectElement", $.SelectElement);

$.defineNativeMethods("HTMLShadowElement", $.ShadowElement);

$.defineNativeMethods("ShadowRoot", $.ShadowRoot);

$.defineNativeMethods("HTMLSourceElement", $.SourceElement);

$.defineNativeMethods("HTMLSpanElement", $.SpanElement);

$.defineNativeMethods("SpeechInputEvent", $.SpeechInputEvent);

$.defineNativeMethods("SpeechRecognitionError", $.SpeechRecognitionError);

$.defineNativeMethods("SpeechRecognitionEvent", $.SpeechRecognitionEvent);

$.defineNativeMethods("StorageEvent", $.StorageEvent);

$.defineNativeMethods("HTMLStyleElement", $.StyleElement);

$.defineNativeMethods("HTMLTableCaptionElement", $.TableCaptionElement);

$.defineNativeMethods("HTMLTableCellElement", $.TableCellElement);

$.defineNativeMethods("HTMLTableColElement", $.TableColElement);

$.defineNativeMethods("HTMLTableElement", $.TableElement);

$.defineNativeMethods("HTMLTableRowElement", $.TableRowElement);

$.defineNativeMethods("HTMLTableSectionElement", $.TableSectionElement);

$.defineNativeMethods("HTMLTemplateElement", $.TemplateElement);

$.defineNativeMethodsNonleaf("Text", $.Text);

$.defineNativeMethods("HTMLTextAreaElement", $.TextAreaElement);

$.defineNativeMethods("TextEvent", $.TextEvent);

$.defineNativeMethods("HTMLTitleElement", $.TitleElement);

$.defineNativeMethods("TouchEvent", $.TouchEvent);

$.defineNativeMethods("HTMLTrackElement", $.TrackElement);

$.defineNativeMethods("TrackEvent", $.TrackEvent);

$.defineNativeMethods("TransitionEvent|WebKitTransitionEvent", $.TransitionEvent);

$.defineNativeMethodsNonleaf("UIEvent", $.UIEvent);

$.defineNativeMethods("HTMLUListElement", $.UListElement);

$.defineNativeMethods("HTMLUnknownElement", $.UnknownElement);

$.defineNativeMethods("HTMLVideoElement", $.VideoElement);

$.defineNativeMethods("WebSocket", $.WebSocket);

$.defineNativeMethods("MouseScrollEvent|MouseWheelEvent|WheelEvent", $.WheelEvent);

$.defineNativeMethods("DOMWindow|Window", $.Window);

$.defineNativeMethods("XPathException", $.XPathException);

$.defineNativeMethods("EntryArray", $._EntryArray);

$.defineNativeMethods("NamedNodeMap", $._NamedNodeMap);

$.defineNativeMethods("IDBVersionChangeEvent", $.VersionChangeEvent);

$.defineNativeMethods("SVGAElement", $.AElement);

$.defineNativeMethods("SVGAltGlyphElement", $.AltGlyphElement);

$.defineNativeMethods("SVGAnimateElement", $.AnimateElement);

$.defineNativeMethods("SVGAnimateMotionElement", $.AnimateMotionElement);

$.defineNativeMethods("SVGAnimateTransformElement", $.AnimateTransformElement);

$.defineNativeMethods("SVGAnimatedNumberList", $.AnimatedNumberList);

$.defineNativeMethods("SVGAnimatedString", $.AnimatedString);

$.defineNativeMethodsNonleaf("SVGAnimationElement", $.AnimationElement);

$.defineNativeMethods("SVGCircleElement", $.CircleElement);

$.defineNativeMethods("SVGClipPathElement", $.ClipPathElement);

$.defineNativeMethods("SVGDefsElement", $.DefsElement);

$.defineNativeMethods("SVGDescElement", $.DescElement);

$.defineNativeMethods("SVGEllipseElement", $.EllipseElement);

$.defineNativeMethods("SVGFEBlendElement", $.FEBlendElement);

$.defineNativeMethods("SVGFEColorMatrixElement", $.FEColorMatrixElement);

$.defineNativeMethods("SVGFEComponentTransferElement", $.FEComponentTransferElement);

$.defineNativeMethods("SVGFECompositeElement", $.FECompositeElement);

$.defineNativeMethods("SVGFEConvolveMatrixElement", $.FEConvolveMatrixElement);

$.defineNativeMethods("SVGFEDiffuseLightingElement", $.FEDiffuseLightingElement);

$.defineNativeMethods("SVGFEDisplacementMapElement", $.FEDisplacementMapElement);

$.defineNativeMethods("SVGFEDistantLightElement", $.FEDistantLightElement);

$.defineNativeMethods("SVGFEFloodElement", $.FEFloodElement);

$.defineNativeMethods("SVGFEFuncAElement", $.FEFuncAElement);

$.defineNativeMethods("SVGFEFuncBElement", $.FEFuncBElement);

$.defineNativeMethods("SVGFEFuncGElement", $.FEFuncGElement);

$.defineNativeMethods("SVGFEFuncRElement", $.FEFuncRElement);

$.defineNativeMethods("SVGFEGaussianBlurElement", $.FEGaussianBlurElement);

$.defineNativeMethods("SVGFEImageElement", $.FEImageElement);

$.defineNativeMethods("SVGFEMergeElement", $.FEMergeElement);

$.defineNativeMethods("SVGFEMergeNodeElement", $.FEMergeNodeElement);

$.defineNativeMethods("SVGFEMorphologyElement", $.FEMorphologyElement);

$.defineNativeMethods("SVGFEOffsetElement", $.FEOffsetElement);

$.defineNativeMethods("SVGFEPointLightElement", $.FEPointLightElement);

$.defineNativeMethods("SVGFESpecularLightingElement", $.FESpecularLightingElement);

$.defineNativeMethods("SVGFESpotLightElement", $.FESpotLightElement);

$.defineNativeMethods("SVGFETileElement", $.FETileElement);

$.defineNativeMethods("SVGFETurbulenceElement", $.FETurbulenceElement);

$.defineNativeMethods("SVGFilterElement", $.FilterElement);

$.defineNativeMethods("SVGForeignObjectElement", $.ForeignObjectElement);

$.defineNativeMethods("SVGGElement", $.GElement);

$.defineNativeMethods("SVGImageElement", $.ImageElement0);

$.defineNativeMethods("SVGLineElement", $.LineElement);

$.defineNativeMethods("SVGLinearGradientElement", $.LinearGradientElement);

$.defineNativeMethods("SVGMarkerElement", $.MarkerElement);

$.defineNativeMethods("SVGMaskElement", $.MaskElement);

$.defineNativeMethods("SVGMetadataElement", $.MetadataElement);

$.defineNativeMethods("SVGPathElement", $.PathElement);

$.defineNativeMethods("SVGPatternElement", $.PatternElement);

$.defineNativeMethods("SVGPolygonElement", $.PolygonElement);

$.defineNativeMethods("SVGPolylineElement", $.PolylineElement);

$.defineNativeMethods("SVGRadialGradientElement", $.RadialGradientElement);

$.defineNativeMethods("SVGRectElement", $.RectElement);

$.defineNativeMethods("SVGScriptElement", $.ScriptElement0);

$.defineNativeMethods("SVGSetElement", $.SetElement);

$.defineNativeMethods("SVGStopElement", $.StopElement);

$.defineNativeMethods("SVGStyleElement", $.StyleElement0);

$.defineNativeMethodsNonleaf("SVGStyledElement", $.StyledElement);

$.defineNativeMethods("SVGDocument", $.SvgDocument);

$.defineNativeMethodsNonleaf("SVGElement", $.SvgElement);

$.defineNativeMethods("SVGException", $.SvgException);

$.defineNativeMethods("SVGSVGElement", $.SvgSvgElement);

$.defineNativeMethods("SVGSwitchElement", $.SwitchElement);

$.defineNativeMethods("SVGSymbolElement", $.SymbolElement);

$.defineNativeMethods("SVGTSpanElement", $.TSpanElement);

$.defineNativeMethodsNonleaf("SVGTextContentElement", $.TextContentElement);

$.defineNativeMethods("SVGTextElement", $.TextElement);

$.defineNativeMethods("SVGTextPathElement", $.TextPathElement);

$.defineNativeMethodsNonleaf("SVGTextPositioningElement", $.TextPositioningElement);

$.defineNativeMethods("SVGTitleElement", $.TitleElement0);

$.defineNativeMethods("SVGUseElement", $.UseElement);

$.defineNativeMethods("SVGViewElement", $.ViewElement);

$.defineNativeMethods("SVGZoomEvent", $.ZoomEvent);

$.defineNativeMethodsNonleaf("SVGGradientElement", $._GradientElement);

$.defineNativeMethodsNonleaf("SVGComponentTransferFunctionElement", $._SVGComponentTransferFunctionElement);

$.defineNativeMethods("ArrayBuffer", $.ByteBuffer);

$.defineNativeMethodsNonleaf("ArrayBufferView", $.TypedData);

$.defineNativeMethods("DataView", $.ByteData);

$.defineNativeMethods("Float32Array", $.Float32List);

$.defineNativeMethods("Float64Array", $.Float64List);

$.defineNativeMethods("Int16Array", $.Int16List);

$.defineNativeMethods("Int32Array", $.Int32List);

$.defineNativeMethods("Int8Array", $.Int8List);

$.defineNativeMethods("Uint16Array", $.Uint16List);

$.defineNativeMethods("Uint32Array", $.Uint32List);

$.defineNativeMethods("Uint8ClampedArray", $.Uint8ClampedList);

$.defineNativeMethodsNonleaf("Uint8Array", $.Uint8List);

$.defineNativeMethods("AudioProcessingEvent", $.AudioProcessingEvent);

$.defineNativeMethods("OfflineAudioCompletionEvent", $.OfflineAudioCompletionEvent);

$.defineNativeMethods("WebGLContextEvent", $.ContextEvent);

$.defineNativeMethods("SQLError", $.SqlError);

$.defineNativeMethods("SQLException", $.SqlException);


var $ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.main.call$0 = $.main;
$.initializeDispatchPropertyCSP(function(a) {
  $.getDispatchProperty = a;
}, [function(a) {
  return a.___dart_dispatch_record_ZxYxX_3_;
}, function(a) {
  return a.___dart_dispatch_record_ZxYxX_2_;
}, function(a) {
  return a.___dart_dispatch_record_ZxYxX_1_;
}, function(a) {
  return a.___dart_dispatch_record_ZxYxX_0_;
}], $.Interceptor.prototype);
// BEGIN invoke [main].
if (typeof document !== "undefined" && document.readyState !== "complete") {
  document.addEventListener("readystatechange", function () {
    if (document.readyState == "complete") {
      if (typeof dartMainRunner === "function") {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function defineClass(name, cls, constructor, prototype) {
    constructor.prototype = prototype;
    constructor.builtin$cls = name;
    return constructor;
  }
  var supportsProto = !!{}.__proto__;
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        var classData = desc[""], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        if (typeof fields == "string") {
          var s = fields.split(";");
          fields = s[1] == "" ? [] : s[1].split(",");
          supr = s[0];
        } else {
          supr = desc.super;
          if (!!desc.$name)
            name = desc.$name;
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        isolateProperties[cls] = defineClass(name, cls, fields, desc);
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    var finishedClasses = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = isolateProperties[cls];
      var superConstructor = isolateProperties[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = constructor.prototype;
      if (supportsProto) {
        prototype.__proto__ = superConstructor.prototype;
        prototype.constructor = constructor;
      } else {
        function tmp() {
        }
        tmp.prototype = superConstructor.prototype;
        var newPrototype = new tmp();
        constructor.prototype = newPrototype;
        newPrototype.constructor = constructor;
        for (var member in prototype) {
          if (!member)
            continue;
          if (hasOwnProperty.call(prototype, member)) {
            newPrototype[member] = prototype[member];
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue, getter) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined) {
              if ($[fieldName] === sentinelInProgress) {
                $[fieldName] = null;
              }
            }
          }
        } else {
          if (result === sentinelInProgress)
            $.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = getter;
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    return Isolate;
  };
}
//@ sourceMappingURL=driver.dart.js.map
